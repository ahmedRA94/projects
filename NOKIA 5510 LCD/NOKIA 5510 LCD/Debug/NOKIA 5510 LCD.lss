
NOKIA 5510 LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020c  00800060  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080026c  0080026c  0000063a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000066a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000863  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a2  00000000  00000000  00000f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e9  00000000  00000000  000011ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027f  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000046f  00000000  00000000  000018f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00001d62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  8a:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_M_Init>:



void SPI_M_Init()					/* SPI Initialize function */
{
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS)|(1<<RST)|(1<<DC);				/* Set MOSI and SCK output, all others input */
  92:	83 eb       	ldi	r24, 0xB3	; 179
  94:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<RST);												/* define reset pin as a output */
  96:	c0 9a       	sbi	0x18, 0	; 24
	DDRB &= ~(1<<MISO);												/* define MISO pin as a input */
  98:	be 98       	cbi	0x17, 6	; 23
	PORTB |= (1<<SS);												/* Make SS pin as a output */
  9a:	c4 9a       	sbi	0x18, 4	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);							/* Enable SPE, MSTR and SPR0 bit in SPI control register */
  9c:	81 e5       	ldi	r24, 0x51	; 81
  9e:	8d b9       	out	0x0d, r24	; 13
  a0:	08 95       	ret

000000a2 <SPI_M_Write>:
}
void SPI_M_Write(char write_data)		/* SPI write data function */
{
	
	SPDR = write_data;
  a2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  a4:	77 9b       	sbis	0x0e, 7	; 14
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <SPI_M_Write+0x2>
}
  a8:	08 95       	ret

000000aa <SPI_SS_enable>:
void SPI_SS_enable()
{
	PORTB&=~(1<<PB4);
  aa:	c4 98       	cbi	0x18, 4	; 24
  ac:	08 95       	ret

000000ae <SPI_SS_disable>:
}
void SPI_SS_disable(){
	PORTB|=(1<<PB4);
  ae:	c4 9a       	sbi	0x18, 4	; 24
  b0:	08 95       	ret

000000b2 <N5110_Reset>:
}
void N5110_Reset()					/* reset the Display at the beginning of initialization */
{
	PORTB &= ~(1<<RST);
  b2:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	80 e7       	ldi	r24, 0x70	; 112
  b8:	92 e0       	ldi	r25, 0x02	; 2
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <N5110_Reset+0x8>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <N5110_Reset+0x12>
  c4:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<RST);
  c6:	c0 9a       	sbi	0x18, 0	; 24
  c8:	08 95       	ret

000000ca <N5110_Cmnd>:
}

void N5110_Cmnd(char DATA)
{
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
	PORTB &= ~(1<<DC);				/* make DC pin to logic zero for command operation */
  ce:	c1 98       	cbi	0x18, 1	; 24
	SPI_SS_enable();				/* enable SS pin to slave selection */
  d0:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_SS_enable>
	SPI_M_Write(DATA);				/* send data on data register */
  d4:	8c 2f       	mov	r24, r28
  d6:	0e 94 51 00 	call	0xa2	; 0xa2 <SPI_M_Write>
	PORTB |= (1<<DC);				/* make DC pin to logic high for data operation */
  da:	c1 9a       	sbi	0x18, 1	; 24
	SPI_SS_disable();
  dc:	0e 94 57 00 	call	0xae	; 0xae <SPI_SS_disable>
}
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <N5110_init>:
void N5110_init()
{
	SPI_M_Init();
  e4:	0e 94 49 00 	call	0x92	; 0x92 <SPI_M_Init>
	N5110_Reset();					/* reset the display */
  e8:	0e 94 59 00 	call	0xb2	; 0xb2 <N5110_Reset>
	N5110_Cmnd(0x21);				/* command set in addition mode */
  ec:	81 e2       	ldi	r24, 0x21	; 33
  ee:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
	N5110_Cmnd(0xC0);				/* set the voltage by sending C0 means VOP = 5V */
  f2:	80 ec       	ldi	r24, 0xC0	; 192
  f4:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
	N5110_Cmnd(0x07);				/* set the temp. coefficient to 3 */
  f8:	87 e0       	ldi	r24, 0x07	; 7
  fa:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
	N5110_Cmnd(0x13);				/* set value of Voltage Bias System */
  fe:	83 e1       	ldi	r24, 0x13	; 19
 100:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
	N5110_Cmnd(0x20);				/* command set in basic mode */
 104:	80 e2       	ldi	r24, 0x20	; 32
 106:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
	N5110_Cmnd(0x0C);				/* display result in normal mode */
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
 110:	08 95       	ret

00000112 <N5110_Data>:
}
void N5110_Data(char *DATA)
{
 112:	8f 92       	push	r8
 114:	9f 92       	push	r9
 116:	af 92       	push	r10
 118:	bf 92       	push	r11
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	6c 01       	movw	r12, r24
	PORTB |= (1<<DC);									/* make DC pin to logic high for data operation */
 12c:	c1 9a       	sbi	0x18, 1	; 24
	SPI_SS_enable();									/* enable SS pin to slave selection */
 12e:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_SS_enable>
	int lenan = strlen(DATA);							/* measure the length of data */
 132:	f6 01       	movw	r30, r12
 134:	01 90       	ld	r0, Z+
 136:	00 20       	and	r0, r0
 138:	e9 f7       	brne	.-6      	; 0x134 <N5110_Data+0x22>
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	5f 01       	movw	r10, r30
 13e:	ac 18       	sub	r10, r12
 140:	bd 08       	sbc	r11, r13
	for (int g=0; g<lenan; g++)
 142:	1a 14       	cp	r1, r10
 144:	1b 04       	cpc	r1, r11
 146:	54 f5       	brge	.+84     	; 0x19c <N5110_Data+0x8a>
 148:	e1 2c       	mov	r14, r1
 14a:	f1 2c       	mov	r15, r1
	N5110_Cmnd(0x13);				/* set value of Voltage Bias System */
	N5110_Cmnd(0x20);				/* command set in basic mode */
	N5110_Cmnd(0x0C);				/* display result in normal mode */
}
void N5110_Data(char *DATA)
{
 14c:	81 2c       	mov	r8, r1
 14e:	91 2c       	mov	r9, r1
 150:	1f c0       	rjmp	.+62     	; 0x190 <N5110_Data+0x7e>
	int lenan = strlen(DATA);							/* measure the length of data */
	for (int g=0; g<lenan; g++)
	{
		for (int index=0; index<5; index++)
		{
			SPI_M_Write(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */
 152:	f8 01       	movw	r30, r16
 154:	80 81       	ld	r24, Z
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	80 97       	sbiw	r24, 0x20	; 32
 15a:	fc 01       	movw	r30, r24
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	e8 0f       	add	r30, r24
 166:	f9 1f       	adc	r31, r25
 168:	ec 0f       	add	r30, r28
 16a:	fd 1f       	adc	r31, r29
 16c:	e4 57       	subi	r30, 0x74	; 116
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	80 81       	ld	r24, Z
 172:	0e 94 51 00 	call	0xa2	; 0xa2 <SPI_M_Write>
	PORTB |= (1<<DC);									/* make DC pin to logic high for data operation */
	SPI_SS_enable();									/* enable SS pin to slave selection */
	int lenan = strlen(DATA);							/* measure the length of data */
	for (int g=0; g<lenan; g++)
	{
		for (int index=0; index<5; index++)
 176:	21 96       	adiw	r28, 0x01	; 1
 178:	c5 30       	cpi	r28, 0x05	; 5
 17a:	d1 05       	cpc	r29, r1
 17c:	51 f7       	brne	.-44     	; 0x152 <N5110_Data+0x40>
		{
			SPI_M_Write(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */
		}
		SPI_M_Write(0x00);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 51 00 	call	0xa2	; 0xa2 <SPI_M_Write>
void N5110_Data(char *DATA)
{
	PORTB |= (1<<DC);									/* make DC pin to logic high for data operation */
	SPI_SS_enable();									/* enable SS pin to slave selection */
	int lenan = strlen(DATA);							/* measure the length of data */
	for (int g=0; g<lenan; g++)
 184:	ff ef       	ldi	r31, 0xFF	; 255
 186:	ef 1a       	sub	r14, r31
 188:	ff 0a       	sbc	r15, r31
 18a:	ae 14       	cp	r10, r14
 18c:	bf 04       	cpc	r11, r15
 18e:	31 f0       	breq	.+12     	; 0x19c <N5110_Data+0x8a>
	N5110_Cmnd(0x13);				/* set value of Voltage Bias System */
	N5110_Cmnd(0x20);				/* command set in basic mode */
	N5110_Cmnd(0x0C);				/* display result in normal mode */
}
void N5110_Data(char *DATA)
{
 190:	c8 2d       	mov	r28, r8
 192:	d9 2d       	mov	r29, r9
 194:	86 01       	movw	r16, r12
 196:	0e 0d       	add	r16, r14
 198:	1f 1d       	adc	r17, r15
 19a:	db cf       	rjmp	.-74     	; 0x152 <N5110_Data+0x40>
		{
			SPI_M_Write(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */
		}
		SPI_M_Write(0x00);
	}
	SPI_SS_disable();
 19c:	0e 94 57 00 	call	0xae	; 0xae <SPI_SS_disable>
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	df 90       	pop	r13
 1ae:	cf 90       	pop	r12
 1b0:	bf 90       	pop	r11
 1b2:	af 90       	pop	r10
 1b4:	9f 90       	pop	r9
 1b6:	8f 90       	pop	r8
 1b8:	08 95       	ret

000001ba <N5110_clear>:
void N5110_clear()					/* clear the Display */
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
	SPI_SS_enable();
 1be:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_SS_enable>
	PORTB |= (1<<DC);
 1c2:	c1 9a       	sbi	0x18, 1	; 24
 1c4:	c8 ef       	ldi	r28, 0xF8	; 248
 1c6:	d1 e0       	ldi	r29, 0x01	; 1
	for (int k=0; k<=503; k++)
	{
		SPI_M_Write(0x00);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 51 00 	call	0xa2	; 0xa2 <SPI_M_Write>
 1ce:	21 97       	sbiw	r28, 0x01	; 1
}
void N5110_clear()					/* clear the Display */
{
	SPI_SS_enable();
	PORTB |= (1<<DC);
	for (int k=0; k<=503; k++)
 1d0:	20 97       	sbiw	r28, 0x00	; 0
 1d2:	d1 f7       	brne	.-12     	; 0x1c8 <N5110_clear+0xe>
	{
		SPI_M_Write(0x00);
	}
	PORTB &= ~(1<<DC);
 1d4:	c1 98       	cbi	0x18, 1	; 24
	SPI_SS_disable();
 1d6:	0e 94 57 00 	call	0xae	; 0xae <SPI_SS_disable>
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <N5110_setXY>:
void N5110_setXY(char x, char y)		/* set the column and row */
{
 1e0:	cf 93       	push	r28
 1e2:	c6 2f       	mov	r28, r22
	N5110_Cmnd(0x40+x);
 1e4:	80 5c       	subi	r24, 0xC0	; 192
 1e6:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
	N5110_Cmnd(0x80+y);
 1ea:	80 e8       	ldi	r24, 0x80	; 128
 1ec:	8c 0f       	add	r24, r28
 1ee:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
}
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <lcd_drow_line>:
	}
	PORTB &= ~(1<<DC);
	SPI_SS_disable();
}

void lcd_drow_line(char u,char fon){
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	16 2f       	mov	r17, r22
	N5110_Cmnd(0x40+u);
 1fe:	80 5c       	subi	r24, 0xC0	; 192
 200:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
	N5110_Cmnd(0x80);
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
	SPI_SS_enable();
 20a:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_SS_enable>
	PORTB |= (1<<DC);
 20e:	c1 9a       	sbi	0x18, 1	; 24
 210:	c4 e5       	ldi	r28, 0x54	; 84
 212:	d0 e0       	ldi	r29, 0x00	; 0
	for (int k=0; k<=83;k++)
	{
		SPI_M_Write(fon);
 214:	81 2f       	mov	r24, r17
 216:	0e 94 51 00 	call	0xa2	; 0xa2 <SPI_M_Write>
 21a:	21 97       	sbiw	r28, 0x01	; 1
void lcd_drow_line(char u,char fon){
	N5110_Cmnd(0x40+u);
	N5110_Cmnd(0x80);
	SPI_SS_enable();
	PORTB |= (1<<DC);
	for (int k=0; k<=83;k++)
 21c:	20 97       	sbiw	r28, 0x00	; 0
 21e:	d1 f7       	brne	.-12     	; 0x214 <lcd_drow_line+0x1e>
	{
		SPI_M_Write(fon);
	}
	PORTB &= ~(1<<DC);
 220:	c1 98       	cbi	0x18, 1	; 24
	SPI_SS_disable();
 222:	0e 94 57 00 	call	0xae	; 0xae <SPI_SS_disable>
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	08 95       	ret

0000022e <lcd_drow_colum>:
void lcd_drow_colum(char l){
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
	N5110_Cmnd(0x80+l);
 232:	d0 e8       	ldi	r29, 0x80	; 128
 234:	d8 0f       	add	r29, r24
 236:	8d 2f       	mov	r24, r29
 238:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
	SPI_SS_enable();
 23c:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_SS_enable>
	PORTB |= (1<<DC);
 240:	c1 9a       	sbi	0x18, 1	; 24
 242:	c0 e4       	ldi	r28, 0x40	; 64
	for (int k=0; k<=5;k++)
	{N5110_Cmnd(0x40+k);
 244:	8c 2f       	mov	r24, r28
 246:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
		N5110_Cmnd(0x80+l);
 24a:	8d 2f       	mov	r24, r29
 24c:	0e 94 65 00 	call	0xca	; 0xca <N5110_Cmnd>
		SPI_SS_enable();
 250:	0e 94 55 00 	call	0xaa	; 0xaa <SPI_SS_enable>
		SPI_M_Write(0xff);
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	0e 94 51 00 	call	0xa2	; 0xa2 <SPI_M_Write>
 25a:	cf 5f       	subi	r28, 0xFF	; 255
}
void lcd_drow_colum(char l){
	N5110_Cmnd(0x80+l);
	SPI_SS_enable();
	PORTB |= (1<<DC);
	for (int k=0; k<=5;k++)
 25c:	c6 34       	cpi	r28, 0x46	; 70
 25e:	91 f7       	brne	.-28     	; 0x244 <lcd_drow_colum+0x16>
	{N5110_Cmnd(0x40+k);
		N5110_Cmnd(0x80+l);
		SPI_SS_enable();
		SPI_M_Write(0xff);
	}
	PORTB &= ~(1<<DC);
 260:	c1 98       	cbi	0x18, 1	; 24
	SPI_SS_disable();
 262:	0e 94 57 00 	call	0xae	; 0xae <SPI_SS_disable>
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <N5110_frame>:
void N5110_frame(){
	lcd_drow_line(0,0x01);
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_drow_line>
	lcd_drow_line(5,0x80);
 274:	60 e8       	ldi	r22, 0x80	; 128
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_drow_line>
	lcd_drow_colum(83);
 27c:	83 e5       	ldi	r24, 0x53	; 83
 27e:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_drow_colum>
	lcd_drow_colum(0);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_drow_colum>
 288:	08 95       	ret

0000028a <main>:
char rxt[4];


int main(void)
{ 
	 N5110_init();
 28a:	0e 94 72 00 	call	0xe4	; 0xe4 <N5110_init>
	N5110_setXY(1,40);
 28e:	68 e2       	ldi	r22, 0x28	; 40
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <N5110_setXY>
	N5110_Data("Hallo ahmed 1234567890+=*/.-");
 296:	80 e6       	ldi	r24, 0x60	; 96
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 89 00 	call	0x112	; 0x112 <N5110_Data>
	N5110_setXY(3,0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <N5110_setXY>
	N5110_Data("abcdefghkilmno");
 2a6:	8d e7       	ldi	r24, 0x7D	; 125
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 89 00 	call	0x112	; 0x112 <N5110_Data>
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	89 e6       	ldi	r24, 0x69	; 105
 2b2:	98 e1       	ldi	r25, 0x18	; 24
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x2a>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x34>
 2be:	00 00       	nop
	
	_delay_ms(1000);
	N5110_clear();
 2c0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <N5110_clear>
	
    while(1)
    { N5110_frame();
		for (i=0;i<5;i++)
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
	
	_delay_ms(1000);
	N5110_clear();
	
    while(1)
    { N5110_frame();
 2c6:	0e 94 36 01 	call	0x26c	; 0x26c <N5110_frame>
		for (i=0;i<5;i++)
 2ca:	10 92 71 02 	sts	0x0271, r1
 2ce:	10 92 70 02 	sts	0x0270, r1
 2d2:	8c 2f       	mov	r24, r28
    { N5110_setXY(1,(i*7)+3);
 2d4:	68 2f       	mov	r22, r24
 2d6:	66 0f       	add	r22, r22
 2d8:	66 0f       	add	r22, r22
 2da:	66 0f       	add	r22, r22
 2dc:	68 1b       	sub	r22, r24
 2de:	6d 5f       	subi	r22, 0xFD	; 253
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <N5110_setXY>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2e6:	4a e0       	ldi	r20, 0x0A	; 10
 2e8:	6c e6       	ldi	r22, 0x6C	; 108
 2ea:	72 e0       	ldi	r23, 0x02	; 2
 2ec:	80 91 70 02 	lds	r24, 0x0270
 2f0:	90 91 71 02 	lds	r25, 0x0271
 2f4:	0e 94 96 01 	call	0x32c	; 0x32c <__itoa_ncheck>
		itoa(i,rxt,10);
		N5110_Data(rxt);
 2f8:	8c e6       	ldi	r24, 0x6C	; 108
 2fa:	92 e0       	ldi	r25, 0x02	; 2
 2fc:	0e 94 89 00 	call	0x112	; 0x112 <N5110_Data>
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	89 e6       	ldi	r24, 0x69	; 105
 304:	98 e1       	ldi	r25, 0x18	; 24
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x7c>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x86>
 310:	00 00       	nop
	_delay_ms(1000);
	N5110_clear();
	
    while(1)
    { N5110_frame();
		for (i=0;i<5;i++)
 312:	80 91 70 02 	lds	r24, 0x0270
 316:	90 91 71 02 	lds	r25, 0x0271
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	90 93 71 02 	sts	0x0271, r25
 320:	80 93 70 02 	sts	0x0270, r24
 324:	85 30       	cpi	r24, 0x05	; 5
 326:	91 05       	cpc	r25, r1
 328:	74 f6       	brge	.-100    	; 0x2c6 <main+0x3c>
 32a:	d4 cf       	rjmp	.-88     	; 0x2d4 <main+0x4a>

0000032c <__itoa_ncheck>:
 32c:	bb 27       	eor	r27, r27
 32e:	4a 30       	cpi	r20, 0x0A	; 10
 330:	31 f4       	brne	.+12     	; 0x33e <__itoa_ncheck+0x12>
 332:	99 23       	and	r25, r25
 334:	22 f4       	brpl	.+8      	; 0x33e <__itoa_ncheck+0x12>
 336:	bd e2       	ldi	r27, 0x2D	; 45
 338:	90 95       	com	r25
 33a:	81 95       	neg	r24
 33c:	9f 4f       	sbci	r25, 0xFF	; 255
 33e:	0c 94 a2 01 	jmp	0x344	; 0x344 <__utoa_common>

00000342 <__utoa_ncheck>:
 342:	bb 27       	eor	r27, r27

00000344 <__utoa_common>:
 344:	fb 01       	movw	r30, r22
 346:	55 27       	eor	r21, r21
 348:	aa 27       	eor	r26, r26
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	aa 1f       	adc	r26, r26
 350:	a4 17       	cp	r26, r20
 352:	10 f0       	brcs	.+4      	; 0x358 <__utoa_common+0x14>
 354:	a4 1b       	sub	r26, r20
 356:	83 95       	inc	r24
 358:	50 51       	subi	r21, 0x10	; 16
 35a:	b9 f7       	brne	.-18     	; 0x34a <__utoa_common+0x6>
 35c:	a0 5d       	subi	r26, 0xD0	; 208
 35e:	aa 33       	cpi	r26, 0x3A	; 58
 360:	08 f0       	brcs	.+2      	; 0x364 <__utoa_common+0x20>
 362:	a9 5d       	subi	r26, 0xD9	; 217
 364:	a1 93       	st	Z+, r26
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	79 f7       	brne	.-34     	; 0x348 <__utoa_common+0x4>
 36a:	b1 11       	cpse	r27, r1
 36c:	b1 93       	st	Z+, r27
 36e:	11 92       	st	Z+, r1
 370:	cb 01       	movw	r24, r22
 372:	0c 94 bb 01 	jmp	0x376	; 0x376 <strrev>

00000376 <strrev>:
 376:	dc 01       	movw	r26, r24
 378:	fc 01       	movw	r30, r24
 37a:	67 2f       	mov	r22, r23
 37c:	71 91       	ld	r23, Z+
 37e:	77 23       	and	r23, r23
 380:	e1 f7       	brne	.-8      	; 0x37a <strrev+0x4>
 382:	32 97       	sbiw	r30, 0x02	; 2
 384:	04 c0       	rjmp	.+8      	; 0x38e <strrev+0x18>
 386:	7c 91       	ld	r23, X
 388:	6d 93       	st	X+, r22
 38a:	70 83       	st	Z, r23
 38c:	62 91       	ld	r22, -Z
 38e:	ae 17       	cp	r26, r30
 390:	bf 07       	cpc	r27, r31
 392:	c8 f3       	brcs	.-14     	; 0x386 <strrev+0x10>
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
