
smart_watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003694  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00003694  00003728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  008000fc  008000fc  000037c4  2**0
                  ALLOC
  3 .stab         000028ec  00000000  00000000  000037c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e48  00000000  00000000  000060b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000071e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000922c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a32d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b2b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b6f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 32       	cpi	r26, 0x26	; 38
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <main>
      8a:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ec       	ldi	r26, 0xC9	; 201
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ec       	ldi	r24, 0xC9	; 201
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 ec       	ldi	r22, 0xC9	; 201
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <I2C_Init>:
 *  Author: Ahmed
 */ 
#include "I2C_MASTER.h"

void I2C_Init()			/* I2C initialize function */
{
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	TWBR =BITRATE(TWSR =0x00);	/* Get bit rate register value by formula */
     caa:	00 e2       	ldi	r16, 0x20	; 32
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	e1 e2       	ldi	r30, 0x21	; 33
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	10 82       	st	Z, r1
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e4       	ldi	r21, 0x40	; 64
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e8       	ldi	r24, 0x80	; 128
     cc2:	92 e4       	ldi	r25, 0x42	; 66
     cc4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	bc 01       	movw	r22, r24
     cce:	cd 01       	movw	r24, r26
     cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	f8 01       	movw	r30, r16
     cda:	80 83       	st	Z, r24
}
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	08 95       	ret

00000ce6 <I2C_Start>:

//***************************************************************************************************************************************************************
uint8_t I2C_Start(char write_address)/* I2C start function */
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <I2C_Start+0x6>
     cec:	0f 92       	push	r0
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
     cf4:	e6 e5       	ldi	r30, 0x56	; 86
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	84 ea       	ldi	r24, 0xA4	; 164
     cfa:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     cfc:	e6 e5       	ldi	r30, 0x56	; 86
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	88 23       	and	r24, r24
     d04:	dc f7       	brge	.-10     	; 0xcfc <I2C_Start+0x16>
	status=TWSR&0xF8;		/* Read TWI status register */
     d06:	e1 e2       	ldi	r30, 0x21	; 33
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	88 7f       	andi	r24, 0xF8	; 248
     d0e:	89 83       	std	Y+1, r24	; 0x01
	if(status!=0x08)		/* Check weather START transmitted or not? */
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	88 30       	cpi	r24, 0x08	; 8
     d14:	11 f0       	breq	.+4      	; 0xd1a <I2C_Start+0x34>
	return 0;			/* Return 0 to indicate start condition fail */
     d16:	1b 82       	std	Y+3, r1	; 0x03
     d18:	20 c0       	rjmp	.+64     	; 0xd5a <I2C_Start+0x74>
	TWDR=write_address;		/* Write SLA+W in TWI data register */
     d1a:	e3 e2       	ldi	r30, 0x23	; 35
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	80 83       	st	Z, r24
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
     d22:	e6 e5       	ldi	r30, 0x56	; 86
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	84 e8       	ldi	r24, 0x84	; 132
     d28:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     d2a:	e6 e5       	ldi	r30, 0x56	; 86
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 23       	and	r24, r24
     d32:	dc f7       	brge	.-10     	; 0xd2a <I2C_Start+0x44>
	status=TWSR&0xF8;		/* Read TWI status register */
     d34:	e1 e2       	ldi	r30, 0x21	; 33
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	88 7f       	andi	r24, 0xF8	; 248
     d3c:	89 83       	std	Y+1, r24	; 0x01
	if(status==0x18)		/* Check for SLA+W transmitted &ack received */
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	88 31       	cpi	r24, 0x18	; 24
     d42:	19 f4       	brne	.+6      	; 0xd4a <I2C_Start+0x64>
	return 1;			/* Return 1 to indicate ack received */
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8b 83       	std	Y+3, r24	; 0x03
     d48:	08 c0       	rjmp	.+16     	; 0xd5a <I2C_Start+0x74>
	if(status==0x20)		/* Check for SLA+W transmitted &nack received */
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	80 32       	cpi	r24, 0x20	; 32
     d4e:	19 f4       	brne	.+6      	; 0xd56 <I2C_Start+0x70>
	return 2;			/* Return 2 to indicate nack received */
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	8b 83       	std	Y+3, r24	; 0x03
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <I2C_Start+0x74>
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <I2C_Repeated_Start>:
//*******************************************************************************************************************************
uint8_t I2C_Repeated_Start(char read_address) /* I2C repeated start function */
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <I2C_Repeated_Start+0x6>
     d6e:	0f 92       	push	r0
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);/* Enable TWI, generate start */
     d76:	e6 e5       	ldi	r30, 0x56	; 86
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	84 ea       	ldi	r24, 0xA4	; 164
     d7c:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     d7e:	e6 e5       	ldi	r30, 0x56	; 86
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	88 23       	and	r24, r24
     d86:	dc f7       	brge	.-10     	; 0xd7e <I2C_Repeated_Start+0x16>
	status=TWSR&0xF8;		/* Read TWI status register */
     d88:	e1 e2       	ldi	r30, 0x21	; 33
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	88 7f       	andi	r24, 0xF8	; 248
     d90:	89 83       	std	Y+1, r24	; 0x01
	if(status!=0x10)		/* Check for repeated start transmitted */
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	80 31       	cpi	r24, 0x10	; 16
     d96:	11 f0       	breq	.+4      	; 0xd9c <I2C_Repeated_Start+0x34>
	return 0;			/* Return 0 for repeated start condition fail */
     d98:	1b 82       	std	Y+3, r1	; 0x03
     d9a:	20 c0       	rjmp	.+64     	; 0xddc <I2C_Repeated_Start+0x74>
	TWDR=read_address;		/* Write SLA+R in TWI data register */
     d9c:	e3 e2       	ldi	r30, 0x23	; 35
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	80 83       	st	Z, r24
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
     da4:	e6 e5       	ldi	r30, 0x56	; 86
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	84 e8       	ldi	r24, 0x84	; 132
     daa:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     dac:	e6 e5       	ldi	r30, 0x56	; 86
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	88 23       	and	r24, r24
     db4:	dc f7       	brge	.-10     	; 0xdac <I2C_Repeated_Start+0x44>
	status=TWSR&0xF8;		/* Read TWI status register */
     db6:	e1 e2       	ldi	r30, 0x21	; 33
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	88 7f       	andi	r24, 0xF8	; 248
     dbe:	89 83       	std	Y+1, r24	; 0x01
	if(status==0x40)		/* Check for SLA+R transmitted &ack received */
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	80 34       	cpi	r24, 0x40	; 64
     dc4:	19 f4       	brne	.+6      	; 0xdcc <I2C_Repeated_Start+0x64>
	return 1;			/* Return 1 to indicate ack received */
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	8b 83       	std	Y+3, r24	; 0x03
     dca:	08 c0       	rjmp	.+16     	; 0xddc <I2C_Repeated_Start+0x74>
	if(status==0x48)		/* Check for SLA+R transmitted &nack received */
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	88 34       	cpi	r24, 0x48	; 72
     dd0:	19 f4       	brne	.+6      	; 0xdd8 <I2C_Repeated_Start+0x70>
	return 2;			/* Return 2 to indicate nack received */
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	8b 83       	std	Y+3, r24	; 0x03
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <I2C_Repeated_Start+0x74>
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	8b 83       	std	Y+3, r24	; 0x03
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
}
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <I2C_Write>:
//********************************************************************************************************************************************
uint8_t I2C_Write(char data)	/* I2C write function */
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <I2C_Write+0x6>
     df0:	0f 92       	push	r0
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;		/* Declare variable */
	TWDR=data;			/* Copy data in TWI data register */
     df8:	e3 e2       	ldi	r30, 0x23	; 35
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	80 83       	st	Z, r24
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
     e00:	e6 e5       	ldi	r30, 0x56	; 86
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	84 e8       	ldi	r24, 0x84	; 132
     e06:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     e08:	e6 e5       	ldi	r30, 0x56	; 86
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	88 23       	and	r24, r24
     e10:	dc f7       	brge	.-10     	; 0xe08 <I2C_Write+0x1e>
	status=TWSR&0xF8;		/* Read TWI status register */
     e12:	e1 e2       	ldi	r30, 0x21	; 33
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	88 7f       	andi	r24, 0xF8	; 248
     e1a:	89 83       	std	Y+1, r24	; 0x01
	if(status==0x28)		/* Check for data transmitted &ack received */
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	88 32       	cpi	r24, 0x28	; 40
     e20:	11 f4       	brne	.+4      	; 0xe26 <I2C_Write+0x3c>
	return 0;			/* Return 0 to indicate ack received */
     e22:	1b 82       	std	Y+3, r1	; 0x03
     e24:	08 c0       	rjmp	.+16     	; 0xe36 <I2C_Write+0x4c>
	if(status==0x30)		/* Check for data transmitted &nack received */
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	80 33       	cpi	r24, 0x30	; 48
     e2a:	19 f4       	brne	.+6      	; 0xe32 <I2C_Write+0x48>
	return 1;			/* Return 1 to indicate nack received */
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	8b 83       	std	Y+3, r24	; 0x03
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <I2C_Write+0x4c>
	else
	return 2;			/* Else return 2 for data transmission failure */
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	8b 83       	std	Y+3, r24	; 0x03
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <I2C_Read_Ack>:
//***********************************************************************************************************************************************************************************
char I2C_Read_Ack()		/* I2C read ack function */
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA); /* Enable TWI, generation of ack */
     e4c:	e6 e5       	ldi	r30, 0x56	; 86
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	84 ec       	ldi	r24, 0xC4	; 196
     e52:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     e54:	e6 e5       	ldi	r30, 0x56	; 86
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	88 23       	and	r24, r24
     e5c:	dc f7       	brge	.-10     	; 0xe54 <I2C_Read_Ack+0x10>
	return (TWDR);			/* Return received data */
     e5e:	e3 e2       	ldi	r30, 0x23	; 35
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
}
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <I2C_Read_Nack>:
//***********************************************************************************************************************************************************************************
char I2C_Read_Nack()		/* I2C read nack function */
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
     e72:	e6 e5       	ldi	r30, 0x56	; 86
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	84 e8       	ldi	r24, 0x84	; 132
     e78:	80 83       	st	Z, r24
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     e7a:	e6 e5       	ldi	r30, 0x56	; 86
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	88 23       	and	r24, r24
     e82:	dc f7       	brge	.-10     	; 0xe7a <I2C_Read_Nack+0x10>
	return (TWDR);		/* Return received data */
     e84:	e3 e2       	ldi	r30, 0x23	; 35
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <I2C_Stop>:
//**********************************************************************************************************************************************************************
void I2C_Stop()			/* I2C stop function */
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
     e98:	e6 e5       	ldi	r30, 0x56	; 86
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	84 e9       	ldi	r24, 0x94	; 148
     e9e:	80 83       	st	Z, r24
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
     ea0:	e6 e5       	ldi	r30, 0x56	; 86
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	80 71       	andi	r24, 0x10	; 16
     eac:	90 70       	andi	r25, 0x00	; 0
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	b9 f7       	brne	.-18     	; 0xea0 <I2C_Stop+0x10>
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <lcd_command>:
 * Created: 7/24/2017 10:35:17 PM
 *  Author: Ahmed
 */ 
#include "lcd_4bit.h"
//**********************************************************************************************
void lcd_command(unsigned char cmd){
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	c9 54       	subi	r28, 0x49	; 73
     ec6:	d0 40       	sbci	r29, 0x00	; 0
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	fe 01       	movw	r30, r28
     ed4:	e7 5b       	subi	r30, 0xB7	; 183
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	80 83       	st	Z, r24
	lcd_PRT=(lcd_PRT & 0x0F)|(cmd & 0xF0);
     eda:	ab e3       	ldi	r26, 0x3B	; 59
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	eb e3       	ldi	r30, 0x3B	; 59
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	98 2f       	mov	r25, r24
     ee6:	9f 70       	andi	r25, 0x0F	; 15
     ee8:	fe 01       	movw	r30, r28
     eea:	e7 5b       	subi	r30, 0xB7	; 183
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	80 81       	ld	r24, Z
     ef0:	80 7f       	andi	r24, 0xF0	; 240
     ef2:	89 2b       	or	r24, r25
     ef4:	8c 93       	st	X, r24
	lcd_PRT&=~(1<<lcd_RS);
     ef6:	ab e3       	ldi	r26, 0x3B	; 59
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	eb e3       	ldi	r30, 0x3B	; 59
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8e 7f       	andi	r24, 0xFE	; 254
     f02:	8c 93       	st	X, r24
	lcd_PRT&=~(1<<lcd_RW);
     f04:	ab e3       	ldi	r26, 0x3B	; 59
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	eb e3       	ldi	r30, 0x3B	; 59
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8d 7f       	andi	r24, 0xFD	; 253
     f10:	8c 93       	st	X, r24
	lcd_PRT|=(1<<lcd_EN);
     f12:	ab e3       	ldi	r26, 0x3B	; 59
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	eb e3       	ldi	r30, 0x3B	; 59
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	84 60       	ori	r24, 0x04	; 4
     f1e:	8c 93       	st	X, r24
     f20:	fe 01       	movw	r30, r28
     f22:	eb 5b       	subi	r30, 0xBB	; 187
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a8 e4       	ldi	r26, 0x48	; 72
     f2c:	b2 e4       	ldi	r27, 0x42	; 66
     f2e:	80 83       	st	Z, r24
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	a2 83       	std	Z+2, r26	; 0x02
     f34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f36:	8e 01       	movw	r16, r28
     f38:	0f 5b       	subi	r16, 0xBF	; 191
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
     f3c:	fe 01       	movw	r30, r28
     f3e:	eb 5b       	subi	r30, 0xBB	; 187
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	60 81       	ld	r22, Z
     f44:	71 81       	ldd	r23, Z+1	; 0x01
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	93 81       	ldd	r25, Z+3	; 0x03
     f4a:	2b ea       	ldi	r18, 0xAB	; 171
     f4c:	3a ea       	ldi	r19, 0xAA	; 170
     f4e:	4a e2       	ldi	r20, 0x2A	; 42
     f50:	50 e4       	ldi	r21, 0x40	; 64
     f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	f8 01       	movw	r30, r16
     f5c:	80 83       	st	Z, r24
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	a2 83       	std	Z+2, r26	; 0x02
     f62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f64:	fe 01       	movw	r30, r28
     f66:	ef 5b       	subi	r30, 0xBF	; 191
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	60 81       	ld	r22, Z
     f6c:	71 81       	ldd	r23, Z+1	; 0x01
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e8       	ldi	r20, 0x80	; 128
     f78:	5f e3       	ldi	r21, 0x3F	; 63
     f7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f7e:	88 23       	and	r24, r24
     f80:	34 f4       	brge	.+12     	; 0xf8e <lcd_command+0xd6>
		__ticks = 1;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	fe 01       	movw	r30, r28
     f86:	e0 5c       	subi	r30, 0xC0	; 192
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	80 83       	st	Z, r24
     f8c:	9d c0       	rjmp	.+314    	; 0x10c8 <lcd_command+0x210>
	else if (__tmp > 255)
     f8e:	fe 01       	movw	r30, r28
     f90:	ef 5b       	subi	r30, 0xBF	; 191
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	60 81       	ld	r22, Z
     f96:	71 81       	ldd	r23, Z+1	; 0x01
     f98:	82 81       	ldd	r24, Z+2	; 0x02
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	4f e7       	ldi	r20, 0x7F	; 127
     fa2:	53 e4       	ldi	r21, 0x43	; 67
     fa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fa8:	18 16       	cp	r1, r24
     faa:	0c f0       	brlt	.+2      	; 0xfae <lcd_command+0xf6>
     fac:	7e c0       	rjmp	.+252    	; 0x10aa <lcd_command+0x1f2>
	{
		_delay_ms(__us / 1000.0);
     fae:	fe 01       	movw	r30, r28
     fb0:	eb 5b       	subi	r30, 0xBB	; 187
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	4a e7       	ldi	r20, 0x7A	; 122
     fc2:	54 e4       	ldi	r21, 0x44	; 68
     fc4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8c af       	std	Y+60, r24	; 0x3c
     fce:	9d af       	std	Y+61, r25	; 0x3d
     fd0:	ae af       	std	Y+62, r26	; 0x3e
     fd2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd4:	6c ad       	ldd	r22, Y+60	; 0x3c
     fd6:	7d ad       	ldd	r23, Y+61	; 0x3d
     fd8:	8e ad       	ldd	r24, Y+62	; 0x3e
     fda:	9f ad       	ldd	r25, Y+63	; 0x3f
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	4a ef       	ldi	r20, 0xFA	; 250
     fe2:	54 e4       	ldi	r21, 0x44	; 68
     fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	88 af       	std	Y+56, r24	; 0x38
     fee:	99 af       	std	Y+57, r25	; 0x39
     ff0:	aa af       	std	Y+58, r26	; 0x3a
     ff2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     ff4:	68 ad       	ldd	r22, Y+56	; 0x38
     ff6:	79 ad       	ldd	r23, Y+57	; 0x39
     ff8:	8a ad       	ldd	r24, Y+58	; 0x3a
     ffa:	9b ad       	ldd	r25, Y+59	; 0x3b
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e8       	ldi	r20, 0x80	; 128
    1002:	5f e3       	ldi	r21, 0x3F	; 63
    1004:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1008:	88 23       	and	r24, r24
    100a:	2c f4       	brge	.+10     	; 0x1016 <lcd_command+0x15e>
		__ticks = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9f ab       	std	Y+55, r25	; 0x37
    1012:	8e ab       	std	Y+54, r24	; 0x36
    1014:	3f c0       	rjmp	.+126    	; 0x1094 <lcd_command+0x1dc>
	else if (__tmp > 65535)
    1016:	68 ad       	ldd	r22, Y+56	; 0x38
    1018:	79 ad       	ldd	r23, Y+57	; 0x39
    101a:	8a ad       	ldd	r24, Y+58	; 0x3a
    101c:	9b ad       	ldd	r25, Y+59	; 0x3b
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	3f ef       	ldi	r19, 0xFF	; 255
    1022:	4f e7       	ldi	r20, 0x7F	; 127
    1024:	57 e4       	ldi	r21, 0x47	; 71
    1026:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    102a:	18 16       	cp	r1, r24
    102c:	4c f5       	brge	.+82     	; 0x1080 <lcd_command+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1030:	7d ad       	ldd	r23, Y+61	; 0x3d
    1032:	8e ad       	ldd	r24, Y+62	; 0x3e
    1034:	9f ad       	ldd	r25, Y+63	; 0x3f
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e2       	ldi	r20, 0x20	; 32
    103c:	51 e4       	ldi	r21, 0x41	; 65
    103e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	bc 01       	movw	r22, r24
    1048:	cd 01       	movw	r24, r26
    104a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	9f ab       	std	Y+55, r25	; 0x37
    1054:	8e ab       	std	Y+54, r24	; 0x36
    1056:	0f c0       	rjmp	.+30     	; 0x1076 <lcd_command+0x1be>
    1058:	88 ec       	ldi	r24, 0xC8	; 200
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	9d ab       	std	Y+53, r25	; 0x35
    105e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1060:	8c a9       	ldd	r24, Y+52	; 0x34
    1062:	9d a9       	ldd	r25, Y+53	; 0x35
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <lcd_command+0x1ac>
    1068:	9d ab       	std	Y+53, r25	; 0x35
    106a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106c:	8e a9       	ldd	r24, Y+54	; 0x36
    106e:	9f a9       	ldd	r25, Y+55	; 0x37
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	9f ab       	std	Y+55, r25	; 0x37
    1074:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1076:	8e a9       	ldd	r24, Y+54	; 0x36
    1078:	9f a9       	ldd	r25, Y+55	; 0x37
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	69 f7       	brne	.-38     	; 0x1058 <lcd_command+0x1a0>
    107e:	2d c0       	rjmp	.+90     	; 0x10da <lcd_command+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1080:	68 ad       	ldd	r22, Y+56	; 0x38
    1082:	79 ad       	ldd	r23, Y+57	; 0x39
    1084:	8a ad       	ldd	r24, Y+58	; 0x3a
    1086:	9b ad       	ldd	r25, Y+59	; 0x3b
    1088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	9f ab       	std	Y+55, r25	; 0x37
    1092:	8e ab       	std	Y+54, r24	; 0x36
    1094:	8e a9       	ldd	r24, Y+54	; 0x36
    1096:	9f a9       	ldd	r25, Y+55	; 0x37
    1098:	9b ab       	std	Y+51, r25	; 0x33
    109a:	8a ab       	std	Y+50, r24	; 0x32
    109c:	8a a9       	ldd	r24, Y+50	; 0x32
    109e:	9b a9       	ldd	r25, Y+51	; 0x33
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <lcd_command+0x1e8>
    10a4:	9b ab       	std	Y+51, r25	; 0x33
    10a6:	8a ab       	std	Y+50, r24	; 0x32
    10a8:	18 c0       	rjmp	.+48     	; 0x10da <lcd_command+0x222>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10aa:	fe 01       	movw	r30, r28
    10ac:	ef 5b       	subi	r30, 0xBF	; 191
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	60 81       	ld	r22, Z
    10b2:	71 81       	ldd	r23, Z+1	; 0x01
    10b4:	82 81       	ldd	r24, Z+2	; 0x02
    10b6:	93 81       	ldd	r25, Z+3	; 0x03
    10b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	fe 01       	movw	r30, r28
    10c2:	e0 5c       	subi	r30, 0xC0	; 192
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	80 83       	st	Z, r24
    10c8:	fe 01       	movw	r30, r28
    10ca:	e0 5c       	subi	r30, 0xC0	; 192
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	80 81       	ld	r24, Z
    10d0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10d2:	89 a9       	ldd	r24, Y+49	; 0x31
    10d4:	8a 95       	dec	r24
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <lcd_command+0x21c>
    10d8:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	lcd_PRT&=~(1<<lcd_EN);
    10da:	ab e3       	ldi	r26, 0x3B	; 59
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	eb e3       	ldi	r30, 0x3B	; 59
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8b 7f       	andi	r24, 0xFB	; 251
    10e6:	8c 93       	st	X, r24
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a8 e4       	ldi	r26, 0x48	; 72
    10ee:	b2 e4       	ldi	r27, 0x42	; 66
    10f0:	8d a7       	std	Y+45, r24	; 0x2d
    10f2:	9e a7       	std	Y+46, r25	; 0x2e
    10f4:	af a7       	std	Y+47, r26	; 0x2f
    10f6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10f8:	6d a5       	ldd	r22, Y+45	; 0x2d
    10fa:	7e a5       	ldd	r23, Y+46	; 0x2e
    10fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    10fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1100:	2b ea       	ldi	r18, 0xAB	; 171
    1102:	3a ea       	ldi	r19, 0xAA	; 170
    1104:	4a e2       	ldi	r20, 0x2A	; 42
    1106:	50 e4       	ldi	r21, 0x40	; 64
    1108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	89 a7       	std	Y+41, r24	; 0x29
    1112:	9a a7       	std	Y+42, r25	; 0x2a
    1114:	ab a7       	std	Y+43, r26	; 0x2b
    1116:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1118:	69 a5       	ldd	r22, Y+41	; 0x29
    111a:	7a a5       	ldd	r23, Y+42	; 0x2a
    111c:	8b a5       	ldd	r24, Y+43	; 0x2b
    111e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e8       	ldi	r20, 0x80	; 128
    1126:	5f e3       	ldi	r21, 0x3F	; 63
    1128:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    112c:	88 23       	and	r24, r24
    112e:	1c f4       	brge	.+6      	; 0x1136 <lcd_command+0x27e>
		__ticks = 1;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	88 a7       	std	Y+40, r24	; 0x28
    1134:	91 c0       	rjmp	.+290    	; 0x1258 <lcd_command+0x3a0>
	else if (__tmp > 255)
    1136:	69 a5       	ldd	r22, Y+41	; 0x29
    1138:	7a a5       	ldd	r23, Y+42	; 0x2a
    113a:	8b a5       	ldd	r24, Y+43	; 0x2b
    113c:	9c a5       	ldd	r25, Y+44	; 0x2c
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	4f e7       	ldi	r20, 0x7F	; 127
    1144:	53 e4       	ldi	r21, 0x43	; 67
    1146:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    114a:	18 16       	cp	r1, r24
    114c:	0c f0       	brlt	.+2      	; 0x1150 <lcd_command+0x298>
    114e:	7b c0       	rjmp	.+246    	; 0x1246 <lcd_command+0x38e>
	{
		_delay_ms(__us / 1000.0);
    1150:	6d a5       	ldd	r22, Y+45	; 0x2d
    1152:	7e a5       	ldd	r23, Y+46	; 0x2e
    1154:	8f a5       	ldd	r24, Y+47	; 0x2f
    1156:	98 a9       	ldd	r25, Y+48	; 0x30
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	4a e7       	ldi	r20, 0x7A	; 122
    115e:	54 e4       	ldi	r21, 0x44	; 68
    1160:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	8c a3       	std	Y+36, r24	; 0x24
    116a:	9d a3       	std	Y+37, r25	; 0x25
    116c:	ae a3       	std	Y+38, r26	; 0x26
    116e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1170:	6c a1       	ldd	r22, Y+36	; 0x24
    1172:	7d a1       	ldd	r23, Y+37	; 0x25
    1174:	8e a1       	ldd	r24, Y+38	; 0x26
    1176:	9f a1       	ldd	r25, Y+39	; 0x27
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	4a ef       	ldi	r20, 0xFA	; 250
    117e:	54 e4       	ldi	r21, 0x44	; 68
    1180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	88 a3       	std	Y+32, r24	; 0x20
    118a:	99 a3       	std	Y+33, r25	; 0x21
    118c:	aa a3       	std	Y+34, r26	; 0x22
    118e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1190:	68 a1       	ldd	r22, Y+32	; 0x20
    1192:	79 a1       	ldd	r23, Y+33	; 0x21
    1194:	8a a1       	ldd	r24, Y+34	; 0x22
    1196:	9b a1       	ldd	r25, Y+35	; 0x23
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e8       	ldi	r20, 0x80	; 128
    119e:	5f e3       	ldi	r21, 0x3F	; 63
    11a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11a4:	88 23       	and	r24, r24
    11a6:	2c f4       	brge	.+10     	; 0x11b2 <lcd_command+0x2fa>
		__ticks = 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9f 8f       	std	Y+31, r25	; 0x1f
    11ae:	8e 8f       	std	Y+30, r24	; 0x1e
    11b0:	3f c0       	rjmp	.+126    	; 0x1230 <lcd_command+0x378>
	else if (__tmp > 65535)
    11b2:	68 a1       	ldd	r22, Y+32	; 0x20
    11b4:	79 a1       	ldd	r23, Y+33	; 0x21
    11b6:	8a a1       	ldd	r24, Y+34	; 0x22
    11b8:	9b a1       	ldd	r25, Y+35	; 0x23
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	3f ef       	ldi	r19, 0xFF	; 255
    11be:	4f e7       	ldi	r20, 0x7F	; 127
    11c0:	57 e4       	ldi	r21, 0x47	; 71
    11c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11c6:	18 16       	cp	r1, r24
    11c8:	4c f5       	brge	.+82     	; 0x121c <lcd_command+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ca:	6c a1       	ldd	r22, Y+36	; 0x24
    11cc:	7d a1       	ldd	r23, Y+37	; 0x25
    11ce:	8e a1       	ldd	r24, Y+38	; 0x26
    11d0:	9f a1       	ldd	r25, Y+39	; 0x27
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e2       	ldi	r20, 0x20	; 32
    11d8:	51 e4       	ldi	r21, 0x41	; 65
    11da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	bc 01       	movw	r22, r24
    11e4:	cd 01       	movw	r24, r26
    11e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	9f 8f       	std	Y+31, r25	; 0x1f
    11f0:	8e 8f       	std	Y+30, r24	; 0x1e
    11f2:	0f c0       	rjmp	.+30     	; 0x1212 <lcd_command+0x35a>
    11f4:	88 ec       	ldi	r24, 0xC8	; 200
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	9d 8f       	std	Y+29, r25	; 0x1d
    11fa:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <lcd_command+0x348>
    1204:	9d 8f       	std	Y+29, r25	; 0x1d
    1206:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1208:	8e 8d       	ldd	r24, Y+30	; 0x1e
    120a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	9f 8f       	std	Y+31, r25	; 0x1f
    1210:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1212:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1214:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	69 f7       	brne	.-38     	; 0x11f4 <lcd_command+0x33c>
    121a:	24 c0       	rjmp	.+72     	; 0x1264 <lcd_command+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121c:	68 a1       	ldd	r22, Y+32	; 0x20
    121e:	79 a1       	ldd	r23, Y+33	; 0x21
    1220:	8a a1       	ldd	r24, Y+34	; 0x22
    1222:	9b a1       	ldd	r25, Y+35	; 0x23
    1224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	9f 8f       	std	Y+31, r25	; 0x1f
    122e:	8e 8f       	std	Y+30, r24	; 0x1e
    1230:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1232:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1234:	9b 8f       	std	Y+27, r25	; 0x1b
    1236:	8a 8f       	std	Y+26, r24	; 0x1a
    1238:	8a 8d       	ldd	r24, Y+26	; 0x1a
    123a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <lcd_command+0x384>
    1240:	9b 8f       	std	Y+27, r25	; 0x1b
    1242:	8a 8f       	std	Y+26, r24	; 0x1a
    1244:	0f c0       	rjmp	.+30     	; 0x1264 <lcd_command+0x3ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1246:	69 a5       	ldd	r22, Y+41	; 0x29
    1248:	7a a5       	ldd	r23, Y+42	; 0x2a
    124a:	8b a5       	ldd	r24, Y+43	; 0x2b
    124c:	9c a5       	ldd	r25, Y+44	; 0x2c
    124e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	88 a7       	std	Y+40, r24	; 0x28
    1258:	88 a5       	ldd	r24, Y+40	; 0x28
    125a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    125c:	89 8d       	ldd	r24, Y+25	; 0x19
    125e:	8a 95       	dec	r24
    1260:	f1 f7       	brne	.-4      	; 0x125e <lcd_command+0x3a6>
    1262:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	lcd_PRT =(lcd_PRT & 0x0F)|(cmd<<4);
    1264:	ab e3       	ldi	r26, 0x3B	; 59
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	eb e3       	ldi	r30, 0x3B	; 59
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	28 2f       	mov	r18, r24
    1270:	2f 70       	andi	r18, 0x0F	; 15
    1272:	fe 01       	movw	r30, r28
    1274:	e7 5b       	subi	r30, 0xB7	; 183
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	80 81       	ld	r24, Z
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	82 95       	swap	r24
    1280:	92 95       	swap	r25
    1282:	90 7f       	andi	r25, 0xF0	; 240
    1284:	98 27       	eor	r25, r24
    1286:	80 7f       	andi	r24, 0xF0	; 240
    1288:	98 27       	eor	r25, r24
    128a:	82 2b       	or	r24, r18
    128c:	8c 93       	st	X, r24
	lcd_PRT|=(1<<lcd_EN);
    128e:	ab e3       	ldi	r26, 0x3B	; 59
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	eb e3       	ldi	r30, 0x3B	; 59
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	84 60       	ori	r24, 0x04	; 4
    129a:	8c 93       	st	X, r24
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a8 e4       	ldi	r26, 0x48	; 72
    12a2:	b2 e4       	ldi	r27, 0x42	; 66
    12a4:	8d 8b       	std	Y+21, r24	; 0x15
    12a6:	9e 8b       	std	Y+22, r25	; 0x16
    12a8:	af 8b       	std	Y+23, r26	; 0x17
    12aa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12ac:	6d 89       	ldd	r22, Y+21	; 0x15
    12ae:	7e 89       	ldd	r23, Y+22	; 0x16
    12b0:	8f 89       	ldd	r24, Y+23	; 0x17
    12b2:	98 8d       	ldd	r25, Y+24	; 0x18
    12b4:	2b ea       	ldi	r18, 0xAB	; 171
    12b6:	3a ea       	ldi	r19, 0xAA	; 170
    12b8:	4a e2       	ldi	r20, 0x2A	; 42
    12ba:	50 e4       	ldi	r21, 0x40	; 64
    12bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	89 8b       	std	Y+17, r24	; 0x11
    12c6:	9a 8b       	std	Y+18, r25	; 0x12
    12c8:	ab 8b       	std	Y+19, r26	; 0x13
    12ca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    12cc:	69 89       	ldd	r22, Y+17	; 0x11
    12ce:	7a 89       	ldd	r23, Y+18	; 0x12
    12d0:	8b 89       	ldd	r24, Y+19	; 0x13
    12d2:	9c 89       	ldd	r25, Y+20	; 0x14
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e8       	ldi	r20, 0x80	; 128
    12da:	5f e3       	ldi	r21, 0x3F	; 63
    12dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12e0:	88 23       	and	r24, r24
    12e2:	1c f4       	brge	.+6      	; 0x12ea <lcd_command+0x432>
		__ticks = 1;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	88 8b       	std	Y+16, r24	; 0x10
    12e8:	91 c0       	rjmp	.+290    	; 0x140c <lcd_command+0x554>
	else if (__tmp > 255)
    12ea:	69 89       	ldd	r22, Y+17	; 0x11
    12ec:	7a 89       	ldd	r23, Y+18	; 0x12
    12ee:	8b 89       	ldd	r24, Y+19	; 0x13
    12f0:	9c 89       	ldd	r25, Y+20	; 0x14
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	4f e7       	ldi	r20, 0x7F	; 127
    12f8:	53 e4       	ldi	r21, 0x43	; 67
    12fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12fe:	18 16       	cp	r1, r24
    1300:	0c f0       	brlt	.+2      	; 0x1304 <lcd_command+0x44c>
    1302:	7b c0       	rjmp	.+246    	; 0x13fa <lcd_command+0x542>
	{
		_delay_ms(__us / 1000.0);
    1304:	6d 89       	ldd	r22, Y+21	; 0x15
    1306:	7e 89       	ldd	r23, Y+22	; 0x16
    1308:	8f 89       	ldd	r24, Y+23	; 0x17
    130a:	98 8d       	ldd	r25, Y+24	; 0x18
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	4a e7       	ldi	r20, 0x7A	; 122
    1312:	54 e4       	ldi	r21, 0x44	; 68
    1314:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	8c 87       	std	Y+12, r24	; 0x0c
    131e:	9d 87       	std	Y+13, r25	; 0x0d
    1320:	ae 87       	std	Y+14, r26	; 0x0e
    1322:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1324:	6c 85       	ldd	r22, Y+12	; 0x0c
    1326:	7d 85       	ldd	r23, Y+13	; 0x0d
    1328:	8e 85       	ldd	r24, Y+14	; 0x0e
    132a:	9f 85       	ldd	r25, Y+15	; 0x0f
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	4a ef       	ldi	r20, 0xFA	; 250
    1332:	54 e4       	ldi	r21, 0x44	; 68
    1334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	88 87       	std	Y+8, r24	; 0x08
    133e:	99 87       	std	Y+9, r25	; 0x09
    1340:	aa 87       	std	Y+10, r26	; 0x0a
    1342:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1344:	68 85       	ldd	r22, Y+8	; 0x08
    1346:	79 85       	ldd	r23, Y+9	; 0x09
    1348:	8a 85       	ldd	r24, Y+10	; 0x0a
    134a:	9b 85       	ldd	r25, Y+11	; 0x0b
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e8       	ldi	r20, 0x80	; 128
    1352:	5f e3       	ldi	r21, 0x3F	; 63
    1354:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1358:	88 23       	and	r24, r24
    135a:	2c f4       	brge	.+10     	; 0x1366 <lcd_command+0x4ae>
		__ticks = 1;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9f 83       	std	Y+7, r25	; 0x07
    1362:	8e 83       	std	Y+6, r24	; 0x06
    1364:	3f c0       	rjmp	.+126    	; 0x13e4 <lcd_command+0x52c>
	else if (__tmp > 65535)
    1366:	68 85       	ldd	r22, Y+8	; 0x08
    1368:	79 85       	ldd	r23, Y+9	; 0x09
    136a:	8a 85       	ldd	r24, Y+10	; 0x0a
    136c:	9b 85       	ldd	r25, Y+11	; 0x0b
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	3f ef       	ldi	r19, 0xFF	; 255
    1372:	4f e7       	ldi	r20, 0x7F	; 127
    1374:	57 e4       	ldi	r21, 0x47	; 71
    1376:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    137a:	18 16       	cp	r1, r24
    137c:	4c f5       	brge	.+82     	; 0x13d0 <lcd_command+0x518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1380:	7d 85       	ldd	r23, Y+13	; 0x0d
    1382:	8e 85       	ldd	r24, Y+14	; 0x0e
    1384:	9f 85       	ldd	r25, Y+15	; 0x0f
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e2       	ldi	r20, 0x20	; 32
    138c:	51 e4       	ldi	r21, 0x41	; 65
    138e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	9f 83       	std	Y+7, r25	; 0x07
    13a4:	8e 83       	std	Y+6, r24	; 0x06
    13a6:	0f c0       	rjmp	.+30     	; 0x13c6 <lcd_command+0x50e>
    13a8:	88 ec       	ldi	r24, 0xC8	; 200
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	9d 83       	std	Y+5, r25	; 0x05
    13ae:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <lcd_command+0x4fc>
    13b8:	9d 83       	std	Y+5, r25	; 0x05
    13ba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13bc:	8e 81       	ldd	r24, Y+6	; 0x06
    13be:	9f 81       	ldd	r25, Y+7	; 0x07
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	9f 83       	std	Y+7, r25	; 0x07
    13c4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c6:	8e 81       	ldd	r24, Y+6	; 0x06
    13c8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	69 f7       	brne	.-38     	; 0x13a8 <lcd_command+0x4f0>
    13ce:	24 c0       	rjmp	.+72     	; 0x1418 <lcd_command+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d0:	68 85       	ldd	r22, Y+8	; 0x08
    13d2:	79 85       	ldd	r23, Y+9	; 0x09
    13d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9f 83       	std	Y+7, r25	; 0x07
    13e2:	8e 83       	std	Y+6, r24	; 0x06
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	9b 83       	std	Y+3, r25	; 0x03
    13ea:	8a 83       	std	Y+2, r24	; 0x02
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	9b 81       	ldd	r25, Y+3	; 0x03
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <lcd_command+0x538>
    13f4:	9b 83       	std	Y+3, r25	; 0x03
    13f6:	8a 83       	std	Y+2, r24	; 0x02
    13f8:	0f c0       	rjmp	.+30     	; 0x1418 <lcd_command+0x560>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13fa:	69 89       	ldd	r22, Y+17	; 0x11
    13fc:	7a 89       	ldd	r23, Y+18	; 0x12
    13fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1400:	9c 89       	ldd	r25, Y+20	; 0x14
    1402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	88 8b       	std	Y+16, r24	; 0x10
    140c:	88 89       	ldd	r24, Y+16	; 0x10
    140e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	8a 95       	dec	r24
    1414:	f1 f7       	brne	.-4      	; 0x1412 <lcd_command+0x55a>
    1416:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	lcd_PRT&=~(1<<lcd_EN);
    1418:	ab e3       	ldi	r26, 0x3B	; 59
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	eb e3       	ldi	r30, 0x3B	; 59
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8b 7f       	andi	r24, 0xFB	; 251
    1424:	8c 93       	st	X, r24

}	
    1426:	c7 5b       	subi	r28, 0xB7	; 183
    1428:	df 4f       	sbci	r29, 0xFF	; 255
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	08 95       	ret

0000143e <lcd_data>:
//********************************************************************************************
void lcd_data(unsigned char data){
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	c9 54       	subi	r28, 0x49	; 73
    144c:	d0 40       	sbci	r29, 0x00	; 0
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	fe 01       	movw	r30, r28
    145a:	e7 5b       	subi	r30, 0xB7	; 183
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	80 83       	st	Z, r24
	lcd_PRT=(lcd_PRT & 0x0F)|(data & 0xF0);
    1460:	ab e3       	ldi	r26, 0x3B	; 59
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	eb e3       	ldi	r30, 0x3B	; 59
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	98 2f       	mov	r25, r24
    146c:	9f 70       	andi	r25, 0x0F	; 15
    146e:	fe 01       	movw	r30, r28
    1470:	e7 5b       	subi	r30, 0xB7	; 183
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	80 81       	ld	r24, Z
    1476:	80 7f       	andi	r24, 0xF0	; 240
    1478:	89 2b       	or	r24, r25
    147a:	8c 93       	st	X, r24
	lcd_PRT|=(1<<lcd_RS);
    147c:	ab e3       	ldi	r26, 0x3B	; 59
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	eb e3       	ldi	r30, 0x3B	; 59
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	81 60       	ori	r24, 0x01	; 1
    1488:	8c 93       	st	X, r24
	lcd_PRT&=~(1<<lcd_RW);
    148a:	ab e3       	ldi	r26, 0x3B	; 59
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	eb e3       	ldi	r30, 0x3B	; 59
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	8d 7f       	andi	r24, 0xFD	; 253
    1496:	8c 93       	st	X, r24
	lcd_PRT|=(1<<lcd_EN);
    1498:	ab e3       	ldi	r26, 0x3B	; 59
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	eb e3       	ldi	r30, 0x3B	; 59
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	84 60       	ori	r24, 0x04	; 4
    14a4:	8c 93       	st	X, r24
    14a6:	fe 01       	movw	r30, r28
    14a8:	eb 5b       	subi	r30, 0xBB	; 187
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a8 e4       	ldi	r26, 0x48	; 72
    14b2:	b2 e4       	ldi	r27, 0x42	; 66
    14b4:	80 83       	st	Z, r24
    14b6:	91 83       	std	Z+1, r25	; 0x01
    14b8:	a2 83       	std	Z+2, r26	; 0x02
    14ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14bc:	8e 01       	movw	r16, r28
    14be:	0f 5b       	subi	r16, 0xBF	; 191
    14c0:	1f 4f       	sbci	r17, 0xFF	; 255
    14c2:	fe 01       	movw	r30, r28
    14c4:	eb 5b       	subi	r30, 0xBB	; 187
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	60 81       	ld	r22, Z
    14ca:	71 81       	ldd	r23, Z+1	; 0x01
    14cc:	82 81       	ldd	r24, Z+2	; 0x02
    14ce:	93 81       	ldd	r25, Z+3	; 0x03
    14d0:	2b ea       	ldi	r18, 0xAB	; 171
    14d2:	3a ea       	ldi	r19, 0xAA	; 170
    14d4:	4a e2       	ldi	r20, 0x2A	; 42
    14d6:	50 e4       	ldi	r21, 0x40	; 64
    14d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	f8 01       	movw	r30, r16
    14e2:	80 83       	st	Z, r24
    14e4:	91 83       	std	Z+1, r25	; 0x01
    14e6:	a2 83       	std	Z+2, r26	; 0x02
    14e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14ea:	fe 01       	movw	r30, r28
    14ec:	ef 5b       	subi	r30, 0xBF	; 191
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	60 81       	ld	r22, Z
    14f2:	71 81       	ldd	r23, Z+1	; 0x01
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e8       	ldi	r20, 0x80	; 128
    14fe:	5f e3       	ldi	r21, 0x3F	; 63
    1500:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1504:	88 23       	and	r24, r24
    1506:	34 f4       	brge	.+12     	; 0x1514 <lcd_data+0xd6>
		__ticks = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	fe 01       	movw	r30, r28
    150c:	e0 5c       	subi	r30, 0xC0	; 192
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	80 83       	st	Z, r24
    1512:	9d c0       	rjmp	.+314    	; 0x164e <lcd_data+0x210>
	else if (__tmp > 255)
    1514:	fe 01       	movw	r30, r28
    1516:	ef 5b       	subi	r30, 0xBF	; 191
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	4f e7       	ldi	r20, 0x7F	; 127
    1528:	53 e4       	ldi	r21, 0x43	; 67
    152a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    152e:	18 16       	cp	r1, r24
    1530:	0c f0       	brlt	.+2      	; 0x1534 <lcd_data+0xf6>
    1532:	7e c0       	rjmp	.+252    	; 0x1630 <lcd_data+0x1f2>
	{
		_delay_ms(__us / 1000.0);
    1534:	fe 01       	movw	r30, r28
    1536:	eb 5b       	subi	r30, 0xBB	; 187
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	4a e7       	ldi	r20, 0x7A	; 122
    1548:	54 e4       	ldi	r21, 0x44	; 68
    154a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	8c af       	std	Y+60, r24	; 0x3c
    1554:	9d af       	std	Y+61, r25	; 0x3d
    1556:	ae af       	std	Y+62, r26	; 0x3e
    1558:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155a:	6c ad       	ldd	r22, Y+60	; 0x3c
    155c:	7d ad       	ldd	r23, Y+61	; 0x3d
    155e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1560:	9f ad       	ldd	r25, Y+63	; 0x3f
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4a ef       	ldi	r20, 0xFA	; 250
    1568:	54 e4       	ldi	r21, 0x44	; 68
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	88 af       	std	Y+56, r24	; 0x38
    1574:	99 af       	std	Y+57, r25	; 0x39
    1576:	aa af       	std	Y+58, r26	; 0x3a
    1578:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    157a:	68 ad       	ldd	r22, Y+56	; 0x38
    157c:	79 ad       	ldd	r23, Y+57	; 0x39
    157e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1580:	9b ad       	ldd	r25, Y+59	; 0x3b
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	2c f4       	brge	.+10     	; 0x159c <lcd_data+0x15e>
		__ticks = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9f ab       	std	Y+55, r25	; 0x37
    1598:	8e ab       	std	Y+54, r24	; 0x36
    159a:	3f c0       	rjmp	.+126    	; 0x161a <lcd_data+0x1dc>
	else if (__tmp > 65535)
    159c:	68 ad       	ldd	r22, Y+56	; 0x38
    159e:	79 ad       	ldd	r23, Y+57	; 0x39
    15a0:	8a ad       	ldd	r24, Y+58	; 0x3a
    15a2:	9b ad       	ldd	r25, Y+59	; 0x3b
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	4c f5       	brge	.+82     	; 0x1606 <lcd_data+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	6c ad       	ldd	r22, Y+60	; 0x3c
    15b6:	7d ad       	ldd	r23, Y+61	; 0x3d
    15b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    15ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9f ab       	std	Y+55, r25	; 0x37
    15da:	8e ab       	std	Y+54, r24	; 0x36
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <lcd_data+0x1be>
    15de:	88 ec       	ldi	r24, 0xC8	; 200
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9d ab       	std	Y+53, r25	; 0x35
    15e4:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15e6:	8c a9       	ldd	r24, Y+52	; 0x34
    15e8:	9d a9       	ldd	r25, Y+53	; 0x35
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <lcd_data+0x1ac>
    15ee:	9d ab       	std	Y+53, r25	; 0x35
    15f0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f2:	8e a9       	ldd	r24, Y+54	; 0x36
    15f4:	9f a9       	ldd	r25, Y+55	; 0x37
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	9f ab       	std	Y+55, r25	; 0x37
    15fa:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fc:	8e a9       	ldd	r24, Y+54	; 0x36
    15fe:	9f a9       	ldd	r25, Y+55	; 0x37
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	69 f7       	brne	.-38     	; 0x15de <lcd_data+0x1a0>
    1604:	2d c0       	rjmp	.+90     	; 0x1660 <lcd_data+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1606:	68 ad       	ldd	r22, Y+56	; 0x38
    1608:	79 ad       	ldd	r23, Y+57	; 0x39
    160a:	8a ad       	ldd	r24, Y+58	; 0x3a
    160c:	9b ad       	ldd	r25, Y+59	; 0x3b
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9f ab       	std	Y+55, r25	; 0x37
    1618:	8e ab       	std	Y+54, r24	; 0x36
    161a:	8e a9       	ldd	r24, Y+54	; 0x36
    161c:	9f a9       	ldd	r25, Y+55	; 0x37
    161e:	9b ab       	std	Y+51, r25	; 0x33
    1620:	8a ab       	std	Y+50, r24	; 0x32
    1622:	8a a9       	ldd	r24, Y+50	; 0x32
    1624:	9b a9       	ldd	r25, Y+51	; 0x33
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <lcd_data+0x1e8>
    162a:	9b ab       	std	Y+51, r25	; 0x33
    162c:	8a ab       	std	Y+50, r24	; 0x32
    162e:	18 c0       	rjmp	.+48     	; 0x1660 <lcd_data+0x222>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1630:	fe 01       	movw	r30, r28
    1632:	ef 5b       	subi	r30, 0xBF	; 191
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	fe 01       	movw	r30, r28
    1648:	e0 5c       	subi	r30, 0xC0	; 192
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 83       	st	Z, r24
    164e:	fe 01       	movw	r30, r28
    1650:	e0 5c       	subi	r30, 0xC0	; 192
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 81       	ld	r24, Z
    1656:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1658:	89 a9       	ldd	r24, Y+49	; 0x31
    165a:	8a 95       	dec	r24
    165c:	f1 f7       	brne	.-4      	; 0x165a <lcd_data+0x21c>
    165e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	lcd_PRT&=~(1<<lcd_EN);
    1660:	ab e3       	ldi	r26, 0x3B	; 59
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	eb e3       	ldi	r30, 0x3B	; 59
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8b 7f       	andi	r24, 0xFB	; 251
    166c:	8c 93       	st	X, r24
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a8 e4       	ldi	r26, 0x48	; 72
    1674:	b2 e4       	ldi	r27, 0x42	; 66
    1676:	8d a7       	std	Y+45, r24	; 0x2d
    1678:	9e a7       	std	Y+46, r25	; 0x2e
    167a:	af a7       	std	Y+47, r26	; 0x2f
    167c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    167e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1680:	7e a5       	ldd	r23, Y+46	; 0x2e
    1682:	8f a5       	ldd	r24, Y+47	; 0x2f
    1684:	98 a9       	ldd	r25, Y+48	; 0x30
    1686:	2b ea       	ldi	r18, 0xAB	; 171
    1688:	3a ea       	ldi	r19, 0xAA	; 170
    168a:	4a e2       	ldi	r20, 0x2A	; 42
    168c:	50 e4       	ldi	r21, 0x40	; 64
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	89 a7       	std	Y+41, r24	; 0x29
    1698:	9a a7       	std	Y+42, r25	; 0x2a
    169a:	ab a7       	std	Y+43, r26	; 0x2b
    169c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    169e:	69 a5       	ldd	r22, Y+41	; 0x29
    16a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    16a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    16a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	1c f4       	brge	.+6      	; 0x16bc <lcd_data+0x27e>
		__ticks = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	88 a7       	std	Y+40, r24	; 0x28
    16ba:	91 c0       	rjmp	.+290    	; 0x17de <lcd_data+0x3a0>
	else if (__tmp > 255)
    16bc:	69 a5       	ldd	r22, Y+41	; 0x29
    16be:	7a a5       	ldd	r23, Y+42	; 0x2a
    16c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	53 e4       	ldi	r21, 0x43	; 67
    16cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	0c f0       	brlt	.+2      	; 0x16d6 <lcd_data+0x298>
    16d4:	7b c0       	rjmp	.+246    	; 0x17cc <lcd_data+0x38e>
	{
		_delay_ms(__us / 1000.0);
    16d6:	6d a5       	ldd	r22, Y+45	; 0x2d
    16d8:	7e a5       	ldd	r23, Y+46	; 0x2e
    16da:	8f a5       	ldd	r24, Y+47	; 0x2f
    16dc:	98 a9       	ldd	r25, Y+48	; 0x30
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	4a e7       	ldi	r20, 0x7A	; 122
    16e4:	54 e4       	ldi	r21, 0x44	; 68
    16e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	8c a3       	std	Y+36, r24	; 0x24
    16f0:	9d a3       	std	Y+37, r25	; 0x25
    16f2:	ae a3       	std	Y+38, r26	; 0x26
    16f4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f6:	6c a1       	ldd	r22, Y+36	; 0x24
    16f8:	7d a1       	ldd	r23, Y+37	; 0x25
    16fa:	8e a1       	ldd	r24, Y+38	; 0x26
    16fc:	9f a1       	ldd	r25, Y+39	; 0x27
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	4a ef       	ldi	r20, 0xFA	; 250
    1704:	54 e4       	ldi	r21, 0x44	; 68
    1706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	88 a3       	std	Y+32, r24	; 0x20
    1710:	99 a3       	std	Y+33, r25	; 0x21
    1712:	aa a3       	std	Y+34, r26	; 0x22
    1714:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1716:	68 a1       	ldd	r22, Y+32	; 0x20
    1718:	79 a1       	ldd	r23, Y+33	; 0x21
    171a:	8a a1       	ldd	r24, Y+34	; 0x22
    171c:	9b a1       	ldd	r25, Y+35	; 0x23
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e8       	ldi	r20, 0x80	; 128
    1724:	5f e3       	ldi	r21, 0x3F	; 63
    1726:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    172a:	88 23       	and	r24, r24
    172c:	2c f4       	brge	.+10     	; 0x1738 <lcd_data+0x2fa>
		__ticks = 1;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9f 8f       	std	Y+31, r25	; 0x1f
    1734:	8e 8f       	std	Y+30, r24	; 0x1e
    1736:	3f c0       	rjmp	.+126    	; 0x17b6 <lcd_data+0x378>
	else if (__tmp > 65535)
    1738:	68 a1       	ldd	r22, Y+32	; 0x20
    173a:	79 a1       	ldd	r23, Y+33	; 0x21
    173c:	8a a1       	ldd	r24, Y+34	; 0x22
    173e:	9b a1       	ldd	r25, Y+35	; 0x23
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	57 e4       	ldi	r21, 0x47	; 71
    1748:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    174c:	18 16       	cp	r1, r24
    174e:	4c f5       	brge	.+82     	; 0x17a2 <lcd_data+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1750:	6c a1       	ldd	r22, Y+36	; 0x24
    1752:	7d a1       	ldd	r23, Y+37	; 0x25
    1754:	8e a1       	ldd	r24, Y+38	; 0x26
    1756:	9f a1       	ldd	r25, Y+39	; 0x27
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	40 e2       	ldi	r20, 0x20	; 32
    175e:	51 e4       	ldi	r21, 0x41	; 65
    1760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	bc 01       	movw	r22, r24
    176a:	cd 01       	movw	r24, r26
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9f 8f       	std	Y+31, r25	; 0x1f
    1776:	8e 8f       	std	Y+30, r24	; 0x1e
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <lcd_data+0x35a>
    177a:	88 ec       	ldi	r24, 0xC8	; 200
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9d 8f       	std	Y+29, r25	; 0x1d
    1780:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1782:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1784:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <lcd_data+0x348>
    178a:	9d 8f       	std	Y+29, r25	; 0x1d
    178c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1790:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	9f 8f       	std	Y+31, r25	; 0x1f
    1796:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1798:	8e 8d       	ldd	r24, Y+30	; 0x1e
    179a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	69 f7       	brne	.-38     	; 0x177a <lcd_data+0x33c>
    17a0:	24 c0       	rjmp	.+72     	; 0x17ea <lcd_data+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a2:	68 a1       	ldd	r22, Y+32	; 0x20
    17a4:	79 a1       	ldd	r23, Y+33	; 0x21
    17a6:	8a a1       	ldd	r24, Y+34	; 0x22
    17a8:	9b a1       	ldd	r25, Y+35	; 0x23
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9f 8f       	std	Y+31, r25	; 0x1f
    17b4:	8e 8f       	std	Y+30, r24	; 0x1e
    17b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17ba:	9b 8f       	std	Y+27, r25	; 0x1b
    17bc:	8a 8f       	std	Y+26, r24	; 0x1a
    17be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <lcd_data+0x384>
    17c6:	9b 8f       	std	Y+27, r25	; 0x1b
    17c8:	8a 8f       	std	Y+26, r24	; 0x1a
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <lcd_data+0x3ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17cc:	69 a5       	ldd	r22, Y+41	; 0x29
    17ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    17d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    17d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    17d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	88 a7       	std	Y+40, r24	; 0x28
    17de:	88 a5       	ldd	r24, Y+40	; 0x28
    17e0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17e2:	89 8d       	ldd	r24, Y+25	; 0x19
    17e4:	8a 95       	dec	r24
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <lcd_data+0x3a6>
    17e8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	lcd_PRT =(lcd_PRT & 0x0F)|(data<<4);
    17ea:	ab e3       	ldi	r26, 0x3B	; 59
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	eb e3       	ldi	r30, 0x3B	; 59
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	28 2f       	mov	r18, r24
    17f6:	2f 70       	andi	r18, 0x0F	; 15
    17f8:	fe 01       	movw	r30, r28
    17fa:	e7 5b       	subi	r30, 0xB7	; 183
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 81       	ld	r24, Z
    1800:	88 2f       	mov	r24, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	82 95       	swap	r24
    1806:	92 95       	swap	r25
    1808:	90 7f       	andi	r25, 0xF0	; 240
    180a:	98 27       	eor	r25, r24
    180c:	80 7f       	andi	r24, 0xF0	; 240
    180e:	98 27       	eor	r25, r24
    1810:	82 2b       	or	r24, r18
    1812:	8c 93       	st	X, r24
	lcd_PRT|=(1<<lcd_EN);
    1814:	ab e3       	ldi	r26, 0x3B	; 59
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	eb e3       	ldi	r30, 0x3B	; 59
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	84 60       	ori	r24, 0x04	; 4
    1820:	8c 93       	st	X, r24
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a8 ec       	ldi	r26, 0xC8	; 200
    1828:	b2 e4       	ldi	r27, 0x42	; 66
    182a:	8d 8b       	std	Y+21, r24	; 0x15
    182c:	9e 8b       	std	Y+22, r25	; 0x16
    182e:	af 8b       	std	Y+23, r26	; 0x17
    1830:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1832:	6d 89       	ldd	r22, Y+21	; 0x15
    1834:	7e 89       	ldd	r23, Y+22	; 0x16
    1836:	8f 89       	ldd	r24, Y+23	; 0x17
    1838:	98 8d       	ldd	r25, Y+24	; 0x18
    183a:	2b ea       	ldi	r18, 0xAB	; 171
    183c:	3a ea       	ldi	r19, 0xAA	; 170
    183e:	4a e2       	ldi	r20, 0x2A	; 42
    1840:	50 e4       	ldi	r21, 0x40	; 64
    1842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	89 8b       	std	Y+17, r24	; 0x11
    184c:	9a 8b       	std	Y+18, r25	; 0x12
    184e:	ab 8b       	std	Y+19, r26	; 0x13
    1850:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1852:	69 89       	ldd	r22, Y+17	; 0x11
    1854:	7a 89       	ldd	r23, Y+18	; 0x12
    1856:	8b 89       	ldd	r24, Y+19	; 0x13
    1858:	9c 89       	ldd	r25, Y+20	; 0x14
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e8       	ldi	r20, 0x80	; 128
    1860:	5f e3       	ldi	r21, 0x3F	; 63
    1862:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1866:	88 23       	and	r24, r24
    1868:	1c f4       	brge	.+6      	; 0x1870 <lcd_data+0x432>
		__ticks = 1;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	88 8b       	std	Y+16, r24	; 0x10
    186e:	91 c0       	rjmp	.+290    	; 0x1992 <lcd_data+0x554>
	else if (__tmp > 255)
    1870:	69 89       	ldd	r22, Y+17	; 0x11
    1872:	7a 89       	ldd	r23, Y+18	; 0x12
    1874:	8b 89       	ldd	r24, Y+19	; 0x13
    1876:	9c 89       	ldd	r25, Y+20	; 0x14
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4f e7       	ldi	r20, 0x7F	; 127
    187e:	53 e4       	ldi	r21, 0x43	; 67
    1880:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1884:	18 16       	cp	r1, r24
    1886:	0c f0       	brlt	.+2      	; 0x188a <lcd_data+0x44c>
    1888:	7b c0       	rjmp	.+246    	; 0x1980 <lcd_data+0x542>
	{
		_delay_ms(__us / 1000.0);
    188a:	6d 89       	ldd	r22, Y+21	; 0x15
    188c:	7e 89       	ldd	r23, Y+22	; 0x16
    188e:	8f 89       	ldd	r24, Y+23	; 0x17
    1890:	98 8d       	ldd	r25, Y+24	; 0x18
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4a e7       	ldi	r20, 0x7A	; 122
    1898:	54 e4       	ldi	r21, 0x44	; 68
    189a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8c 87       	std	Y+12, r24	; 0x0c
    18a4:	9d 87       	std	Y+13, r25	; 0x0d
    18a6:	ae 87       	std	Y+14, r26	; 0x0e
    18a8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    18ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    18ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    18b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4a ef       	ldi	r20, 0xFA	; 250
    18b8:	54 e4       	ldi	r21, 0x44	; 68
    18ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	88 87       	std	Y+8, r24	; 0x08
    18c4:	99 87       	std	Y+9, r25	; 0x09
    18c6:	aa 87       	std	Y+10, r26	; 0x0a
    18c8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    18ca:	68 85       	ldd	r22, Y+8	; 0x08
    18cc:	79 85       	ldd	r23, Y+9	; 0x09
    18ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    18d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	5f e3       	ldi	r21, 0x3F	; 63
    18da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18de:	88 23       	and	r24, r24
    18e0:	2c f4       	brge	.+10     	; 0x18ec <lcd_data+0x4ae>
		__ticks = 1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9f 83       	std	Y+7, r25	; 0x07
    18e8:	8e 83       	std	Y+6, r24	; 0x06
    18ea:	3f c0       	rjmp	.+126    	; 0x196a <lcd_data+0x52c>
	else if (__tmp > 65535)
    18ec:	68 85       	ldd	r22, Y+8	; 0x08
    18ee:	79 85       	ldd	r23, Y+9	; 0x09
    18f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	3f ef       	ldi	r19, 0xFF	; 255
    18f8:	4f e7       	ldi	r20, 0x7F	; 127
    18fa:	57 e4       	ldi	r21, 0x47	; 71
    18fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1900:	18 16       	cp	r1, r24
    1902:	4c f5       	brge	.+82     	; 0x1956 <lcd_data+0x518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1904:	6c 85       	ldd	r22, Y+12	; 0x0c
    1906:	7d 85       	ldd	r23, Y+13	; 0x0d
    1908:	8e 85       	ldd	r24, Y+14	; 0x0e
    190a:	9f 85       	ldd	r25, Y+15	; 0x0f
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e2       	ldi	r20, 0x20	; 32
    1912:	51 e4       	ldi	r21, 0x41	; 65
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9f 83       	std	Y+7, r25	; 0x07
    192a:	8e 83       	std	Y+6, r24	; 0x06
    192c:	0f c0       	rjmp	.+30     	; 0x194c <lcd_data+0x50e>
    192e:	88 ec       	ldi	r24, 0xC8	; 200
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9d 83       	std	Y+5, r25	; 0x05
    1934:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1936:	8c 81       	ldd	r24, Y+4	; 0x04
    1938:	9d 81       	ldd	r25, Y+5	; 0x05
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <lcd_data+0x4fc>
    193e:	9d 83       	std	Y+5, r25	; 0x05
    1940:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1942:	8e 81       	ldd	r24, Y+6	; 0x06
    1944:	9f 81       	ldd	r25, Y+7	; 0x07
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	9f 83       	std	Y+7, r25	; 0x07
    194a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194c:	8e 81       	ldd	r24, Y+6	; 0x06
    194e:	9f 81       	ldd	r25, Y+7	; 0x07
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	69 f7       	brne	.-38     	; 0x192e <lcd_data+0x4f0>
    1954:	24 c0       	rjmp	.+72     	; 0x199e <lcd_data+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1956:	68 85       	ldd	r22, Y+8	; 0x08
    1958:	79 85       	ldd	r23, Y+9	; 0x09
    195a:	8a 85       	ldd	r24, Y+10	; 0x0a
    195c:	9b 85       	ldd	r25, Y+11	; 0x0b
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9f 83       	std	Y+7, r25	; 0x07
    1968:	8e 83       	std	Y+6, r24	; 0x06
    196a:	8e 81       	ldd	r24, Y+6	; 0x06
    196c:	9f 81       	ldd	r25, Y+7	; 0x07
    196e:	9b 83       	std	Y+3, r25	; 0x03
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	9b 81       	ldd	r25, Y+3	; 0x03
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <lcd_data+0x538>
    197a:	9b 83       	std	Y+3, r25	; 0x03
    197c:	8a 83       	std	Y+2, r24	; 0x02
    197e:	0f c0       	rjmp	.+30     	; 0x199e <lcd_data+0x560>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1980:	69 89       	ldd	r22, Y+17	; 0x11
    1982:	7a 89       	ldd	r23, Y+18	; 0x12
    1984:	8b 89       	ldd	r24, Y+19	; 0x13
    1986:	9c 89       	ldd	r25, Y+20	; 0x14
    1988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	88 8b       	std	Y+16, r24	; 0x10
    1992:	88 89       	ldd	r24, Y+16	; 0x10
    1994:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	8a 95       	dec	r24
    199a:	f1 f7       	brne	.-4      	; 0x1998 <lcd_data+0x55a>
    199c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	lcd_PRT&=~(1<<lcd_EN);	
    199e:	ab e3       	ldi	r26, 0x3B	; 59
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	eb e3       	ldi	r30, 0x3B	; 59
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	8b 7f       	andi	r24, 0xFB	; 251
    19aa:	8c 93       	st	X, r24
}
    19ac:	c7 5b       	subi	r28, 0xB7	; 183
    19ae:	df 4f       	sbci	r29, 0xFF	; 255
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	08 95       	ret

000019c4 <lcd_init>:
//***********************************************************************************************
//function for lcd initialize.
//lcd_init();
void lcd_init(){
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	cf 59       	subi	r28, 0x9F	; 159
    19d2:	d0 40       	sbci	r29, 0x00	; 0
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	fe 01       	movw	r30, r28
    19e0:	e5 56       	subi	r30, 0x65	; 101
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a0 ea       	ldi	r26, 0xA0	; 160
    19ea:	b0 e4       	ldi	r27, 0x40	; 64
    19ec:	80 83       	st	Z, r24
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	a2 83       	std	Z+2, r26	; 0x02
    19f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f4:	8e 01       	movw	r16, r28
    19f6:	09 56       	subi	r16, 0x69	; 105
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	fe 01       	movw	r30, r28
    19fc:	e5 56       	subi	r30, 0x65	; 101
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4a ef       	ldi	r20, 0xFA	; 250
    1a0e:	54 e4       	ldi	r21, 0x44	; 68
    1a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	f8 01       	movw	r30, r16
    1a1a:	80 83       	st	Z, r24
    1a1c:	91 83       	std	Z+1, r25	; 0x01
    1a1e:	a2 83       	std	Z+2, r26	; 0x02
    1a20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a22:	fe 01       	movw	r30, r28
    1a24:	e9 56       	subi	r30, 0x69	; 105
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	44 f4       	brge	.+16     	; 0x1a50 <lcd_init+0x8c>
		__ticks = 1;
    1a40:	fe 01       	movw	r30, r28
    1a42:	eb 56       	subi	r30, 0x6B	; 107
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    1a4e:	64 c0       	rjmp	.+200    	; 0x1b18 <lcd_init+0x154>
	else if (__tmp > 65535)
    1a50:	fe 01       	movw	r30, r28
    1a52:	e9 56       	subi	r30, 0x69	; 105
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	60 81       	ld	r22, Z
    1a58:	71 81       	ldd	r23, Z+1	; 0x01
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	3f ef       	ldi	r19, 0xFF	; 255
    1a62:	4f e7       	ldi	r20, 0x7F	; 127
    1a64:	57 e4       	ldi	r21, 0x47	; 71
    1a66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a6a:	18 16       	cp	r1, r24
    1a6c:	0c f0       	brlt	.+2      	; 0x1a70 <lcd_init+0xac>
    1a6e:	43 c0       	rjmp	.+134    	; 0x1af6 <lcd_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a70:	fe 01       	movw	r30, r28
    1a72:	e5 56       	subi	r30, 0x65	; 101
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8e 01       	movw	r16, r28
    1a90:	0b 56       	subi	r16, 0x6B	; 107
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	1f c0       	rjmp	.+62     	; 0x1ae6 <lcd_init+0x122>
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	ed 56       	subi	r30, 0x6D	; 109
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	88 ec       	ldi	r24, 0xC8	; 200
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	91 83       	std	Z+1, r25	; 0x01
    1ab4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	ed 56       	subi	r30, 0x6D	; 109
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <lcd_init+0xfc>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	ed 56       	subi	r30, 0x6D	; 109
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ace:	de 01       	movw	r26, r28
    1ad0:	ab 56       	subi	r26, 0x6B	; 107
    1ad2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	eb 56       	subi	r30, 0x6B	; 107
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	11 96       	adiw	r26, 0x01	; 1
    1ae2:	9c 93       	st	X, r25
    1ae4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	eb 56       	subi	r30, 0x6B	; 107
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	80 81       	ld	r24, Z
    1aee:	91 81       	ldd	r25, Z+1	; 0x01
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	d1 f6       	brne	.-76     	; 0x1aa8 <lcd_init+0xe4>
    1af4:	27 c0       	rjmp	.+78     	; 0x1b44 <lcd_init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	8e 01       	movw	r16, r28
    1af8:	0b 56       	subi	r16, 0x6B	; 107
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	fe 01       	movw	r30, r28
    1afe:	e9 56       	subi	r30, 0x69	; 105
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	60 81       	ld	r22, Z
    1b04:	71 81       	ldd	r23, Z+1	; 0x01
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	93 81       	ldd	r25, Z+3	; 0x03
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	f8 01       	movw	r30, r16
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	80 83       	st	Z, r24
    1b18:	de 01       	movw	r26, r28
    1b1a:	af 56       	subi	r26, 0x6F	; 111
    1b1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1e:	fe 01       	movw	r30, r28
    1b20:	eb 56       	subi	r30, 0x6B	; 107
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	8d 93       	st	X+, r24
    1b2a:	9c 93       	st	X, r25
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	ef 56       	subi	r30, 0x6F	; 111
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <lcd_init+0x172>
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	ef 56       	subi	r30, 0x6F	; 111
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	91 83       	std	Z+1, r25	; 0x01
    1b42:	80 83       	st	Z, r24
_delay_ms(5);
	lcd_DDR|=0xff;
    1b44:	ea e3       	ldi	r30, 0x3A	; 58
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	ea e3       	ldi	r30, 0x3A	; 58
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	80 83       	st	Z, r24
	lcd_PRT&=~(1<<lcd_EN);
    1b52:	ab e3       	ldi	r26, 0x3B	; 59
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	eb e3       	ldi	r30, 0x3B	; 59
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	8b 7f       	andi	r24, 0xFB	; 251
    1b5e:	8c 93       	st	X, r24
    1b60:	fe 01       	movw	r30, r28
    1b62:	e3 57       	subi	r30, 0x73	; 115
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	aa ef       	ldi	r26, 0xFA	; 250
    1b6c:	b4 e4       	ldi	r27, 0x44	; 68
    1b6e:	80 83       	st	Z, r24
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	a2 83       	std	Z+2, r26	; 0x02
    1b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b76:	8e 01       	movw	r16, r28
    1b78:	07 57       	subi	r16, 0x77	; 119
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e3 57       	subi	r30, 0x73	; 115
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	2b ea       	ldi	r18, 0xAB	; 171
    1b8c:	3a ea       	ldi	r19, 0xAA	; 170
    1b8e:	4a e2       	ldi	r20, 0x2A	; 42
    1b90:	50 e4       	ldi	r21, 0x40	; 64
    1b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	80 83       	st	Z, r24
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	a2 83       	std	Z+2, r26	; 0x02
    1ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e7 57       	subi	r30, 0x77	; 119
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e8       	ldi	r20, 0x80	; 128
    1bb8:	5f e3       	ldi	r21, 0x3F	; 63
    1bba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bbe:	88 23       	and	r24, r24
    1bc0:	34 f4       	brge	.+12     	; 0x1bce <lcd_init+0x20a>
		__ticks = 1;
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	e8 57       	subi	r30, 0x78	; 120
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	80 83       	st	Z, r24
    1bcc:	e0 c0       	rjmp	.+448    	; 0x1d8e <lcd_init+0x3ca>
	else if (__tmp > 255)
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e7 57       	subi	r30, 0x77	; 119
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	60 81       	ld	r22, Z
    1bd6:	71 81       	ldd	r23, Z+1	; 0x01
    1bd8:	82 81       	ldd	r24, Z+2	; 0x02
    1bda:	93 81       	ldd	r25, Z+3	; 0x03
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	4f e7       	ldi	r20, 0x7F	; 127
    1be2:	53 e4       	ldi	r21, 0x43	; 67
    1be4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be8:	18 16       	cp	r1, r24
    1bea:	0c f0       	brlt	.+2      	; 0x1bee <lcd_init+0x22a>
    1bec:	c0 c0       	rjmp	.+384    	; 0x1d6e <lcd_init+0x3aa>
	{
		_delay_ms(__us / 1000.0);
    1bee:	fe 01       	movw	r30, r28
    1bf0:	e3 57       	subi	r30, 0x73	; 115
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	60 81       	ld	r22, Z
    1bf6:	71 81       	ldd	r23, Z+1	; 0x01
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	4a e7       	ldi	r20, 0x7A	; 122
    1c02:	54 e4       	ldi	r21, 0x44	; 68
    1c04:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	ec 57       	subi	r30, 0x7C	; 124
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 83       	st	Z, r24
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	a2 83       	std	Z+2, r26	; 0x02
    1c18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1a:	8e 01       	movw	r16, r28
    1c1c:	00 58       	subi	r16, 0x80	; 128
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c20:	fe 01       	movw	r30, r28
    1c22:	ec 57       	subi	r30, 0x7C	; 124
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	4a ef       	ldi	r20, 0xFA	; 250
    1c34:	54 e4       	ldi	r21, 0x44	; 68
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	f8 01       	movw	r30, r16
    1c40:	80 83       	st	Z, r24
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	a2 83       	std	Z+2, r26	; 0x02
    1c46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e0 58       	subi	r30, 0x80	; 128
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e8       	ldi	r20, 0x80	; 128
    1c5c:	5f e3       	ldi	r21, 0x3F	; 63
    1c5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c62:	88 23       	and	r24, r24
    1c64:	44 f4       	brge	.+16     	; 0x1c76 <lcd_init+0x2b2>
		__ticks = 1;
    1c66:	fe 01       	movw	r30, r28
    1c68:	e2 58       	subi	r30, 0x82	; 130
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	91 83       	std	Z+1, r25	; 0x01
    1c72:	80 83       	st	Z, r24
    1c74:	64 c0       	rjmp	.+200    	; 0x1d3e <lcd_init+0x37a>
	else if (__tmp > 65535)
    1c76:	fe 01       	movw	r30, r28
    1c78:	e0 58       	subi	r30, 0x80	; 128
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	60 81       	ld	r22, Z
    1c7e:	71 81       	ldd	r23, Z+1	; 0x01
    1c80:	82 81       	ldd	r24, Z+2	; 0x02
    1c82:	93 81       	ldd	r25, Z+3	; 0x03
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	57 e4       	ldi	r21, 0x47	; 71
    1c8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c90:	18 16       	cp	r1, r24
    1c92:	0c f0       	brlt	.+2      	; 0x1c96 <lcd_init+0x2d2>
    1c94:	43 c0       	rjmp	.+134    	; 0x1d1c <lcd_init+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c96:	fe 01       	movw	r30, r28
    1c98:	ec 57       	subi	r30, 0x7C	; 124
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e2       	ldi	r20, 0x20	; 32
    1caa:	51 e4       	ldi	r21, 0x41	; 65
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	8e 01       	movw	r16, r28
    1cb6:	02 58       	subi	r16, 0x82	; 130
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	bc 01       	movw	r22, r24
    1cbc:	cd 01       	movw	r24, r26
    1cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	91 83       	std	Z+1, r25	; 0x01
    1cca:	80 83       	st	Z, r24
    1ccc:	1f c0       	rjmp	.+62     	; 0x1d0c <lcd_init+0x348>
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e4 58       	subi	r30, 0x84	; 132
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	88 ec       	ldi	r24, 0xC8	; 200
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	80 83       	st	Z, r24
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e4 58       	subi	r30, 0x84	; 132
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <lcd_init+0x322>
    1cea:	fe 01       	movw	r30, r28
    1cec:	e4 58       	subi	r30, 0x84	; 132
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	91 83       	std	Z+1, r25	; 0x01
    1cf2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf4:	de 01       	movw	r26, r28
    1cf6:	a2 58       	subi	r26, 0x82	; 130
    1cf8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e2 58       	subi	r30, 0x82	; 130
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	80 81       	ld	r24, Z
    1d02:	91 81       	ldd	r25, Z+1	; 0x01
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	11 96       	adiw	r26, 0x01	; 1
    1d08:	9c 93       	st	X, r25
    1d0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e2 58       	subi	r30, 0x82	; 130
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	d1 f6       	brne	.-76     	; 0x1cce <lcd_init+0x30a>
    1d1a:	4b c0       	rjmp	.+150    	; 0x1db2 <lcd_init+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1c:	8e 01       	movw	r16, r28
    1d1e:	02 58       	subi	r16, 0x82	; 130
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
    1d22:	fe 01       	movw	r30, r28
    1d24:	e0 58       	subi	r30, 0x80	; 128
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	f8 01       	movw	r30, r16
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	80 83       	st	Z, r24
    1d3e:	de 01       	movw	r26, r28
    1d40:	a6 58       	subi	r26, 0x86	; 134
    1d42:	bf 4f       	sbci	r27, 0xFF	; 255
    1d44:	fe 01       	movw	r30, r28
    1d46:	e2 58       	subi	r30, 0x82	; 130
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 81       	ld	r24, Z
    1d4c:	91 81       	ldd	r25, Z+1	; 0x01
    1d4e:	11 96       	adiw	r26, 0x01	; 1
    1d50:	9c 93       	st	X, r25
    1d52:	8e 93       	st	-X, r24
    1d54:	fe 01       	movw	r30, r28
    1d56:	e6 58       	subi	r30, 0x86	; 134
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <lcd_init+0x39a>
    1d62:	fe 01       	movw	r30, r28
    1d64:	e6 58       	subi	r30, 0x86	; 134
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
    1d6c:	22 c0       	rjmp	.+68     	; 0x1db2 <lcd_init+0x3ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d6e:	8e 01       	movw	r16, r28
    1d70:	08 57       	subi	r16, 0x78	; 120
    1d72:	1f 4f       	sbci	r17, 0xFF	; 255
    1d74:	fe 01       	movw	r30, r28
    1d76:	e7 57       	subi	r30, 0x77	; 119
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	82 81       	ldd	r24, Z+2	; 0x02
    1d80:	93 81       	ldd	r25, Z+3	; 0x03
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	80 83       	st	Z, r24
    1d8e:	de 01       	movw	r26, r28
    1d90:	a7 58       	subi	r26, 0x87	; 135
    1d92:	bf 4f       	sbci	r27, 0xFF	; 255
    1d94:	fe 01       	movw	r30, r28
    1d96:	e8 57       	subi	r30, 0x78	; 120
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e7 58       	subi	r30, 0x87	; 135
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 81       	ld	r24, Z
    1da6:	8a 95       	dec	r24
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <lcd_init+0x3e2>
    1daa:	fe 01       	movw	r30, r28
    1dac:	e7 58       	subi	r30, 0x87	; 135
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 83       	st	Z, r24
	_delay_us(2000);
	lcd_command(0x33);
    1db2:	83 e3       	ldi	r24, 0x33	; 51
    1db4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_command>
    1db8:	fe 01       	movw	r30, r28
    1dba:	eb 58       	subi	r30, 0x8B	; 139
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a8 e4       	ldi	r26, 0x48	; 72
    1dc4:	b2 e4       	ldi	r27, 0x42	; 66
    1dc6:	80 83       	st	Z, r24
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	a2 83       	std	Z+2, r26	; 0x02
    1dcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dce:	8e 01       	movw	r16, r28
    1dd0:	0f 58       	subi	r16, 0x8F	; 143
    1dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	eb 58       	subi	r30, 0x8B	; 139
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	2b ea       	ldi	r18, 0xAB	; 171
    1de4:	3a ea       	ldi	r19, 0xAA	; 170
    1de6:	4a e2       	ldi	r20, 0x2A	; 42
    1de8:	50 e4       	ldi	r21, 0x40	; 64
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	f8 01       	movw	r30, r16
    1df4:	80 83       	st	Z, r24
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	a2 83       	std	Z+2, r26	; 0x02
    1dfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	ef 58       	subi	r30, 0x8F	; 143
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	34 f4       	brge	.+12     	; 0x1e26 <lcd_init+0x462>
		__ticks = 1;
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e0 59       	subi	r30, 0x90	; 144
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	80 83       	st	Z, r24
    1e24:	e0 c0       	rjmp	.+448    	; 0x1fe6 <lcd_init+0x622>
	else if (__tmp > 255)
    1e26:	fe 01       	movw	r30, r28
    1e28:	ef 58       	subi	r30, 0x8F	; 143
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	60 81       	ld	r22, Z
    1e2e:	71 81       	ldd	r23, Z+1	; 0x01
    1e30:	82 81       	ldd	r24, Z+2	; 0x02
    1e32:	93 81       	ldd	r25, Z+3	; 0x03
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	4f e7       	ldi	r20, 0x7F	; 127
    1e3a:	53 e4       	ldi	r21, 0x43	; 67
    1e3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e40:	18 16       	cp	r1, r24
    1e42:	0c f0       	brlt	.+2      	; 0x1e46 <lcd_init+0x482>
    1e44:	c0 c0       	rjmp	.+384    	; 0x1fc6 <lcd_init+0x602>
	{
		_delay_ms(__us / 1000.0);
    1e46:	fe 01       	movw	r30, r28
    1e48:	eb 58       	subi	r30, 0x8B	; 139
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	60 81       	ld	r22, Z
    1e4e:	71 81       	ldd	r23, Z+1	; 0x01
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a e7       	ldi	r20, 0x7A	; 122
    1e5a:	54 e4       	ldi	r21, 0x44	; 68
    1e5c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	fe 01       	movw	r30, r28
    1e66:	e4 59       	subi	r30, 0x94	; 148
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 83       	st	Z, r24
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	a2 83       	std	Z+2, r26	; 0x02
    1e70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	8e 01       	movw	r16, r28
    1e74:	08 59       	subi	r16, 0x98	; 152
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e4 59       	subi	r30, 0x94	; 148
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a ef       	ldi	r20, 0xFA	; 250
    1e8c:	54 e4       	ldi	r21, 0x44	; 68
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	f8 01       	movw	r30, r16
    1e98:	80 83       	st	Z, r24
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	a2 83       	std	Z+2, r26	; 0x02
    1e9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e8 59       	subi	r30, 0x98	; 152
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	44 f4       	brge	.+16     	; 0x1ece <lcd_init+0x50a>
		__ticks = 1;
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ea 59       	subi	r30, 0x9A	; 154
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	80 83       	st	Z, r24
    1ecc:	64 c0       	rjmp	.+200    	; 0x1f96 <lcd_init+0x5d2>
	else if (__tmp > 65535)
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e8 59       	subi	r30, 0x98	; 152
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	3f ef       	ldi	r19, 0xFF	; 255
    1ee0:	4f e7       	ldi	r20, 0x7F	; 127
    1ee2:	57 e4       	ldi	r21, 0x47	; 71
    1ee4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee8:	18 16       	cp	r1, r24
    1eea:	0c f0       	brlt	.+2      	; 0x1eee <lcd_init+0x52a>
    1eec:	43 c0       	rjmp	.+134    	; 0x1f74 <lcd_init+0x5b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e4 59       	subi	r30, 0x94	; 148
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e2       	ldi	r20, 0x20	; 32
    1f02:	51 e4       	ldi	r21, 0x41	; 65
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	8e 01       	movw	r16, r28
    1f0e:	0a 59       	subi	r16, 0x9A	; 154
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	f8 01       	movw	r30, r16
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	80 83       	st	Z, r24
    1f24:	1f c0       	rjmp	.+62     	; 0x1f64 <lcd_init+0x5a0>
    1f26:	fe 01       	movw	r30, r28
    1f28:	ec 59       	subi	r30, 0x9C	; 156
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f34:	fe 01       	movw	r30, r28
    1f36:	ec 59       	subi	r30, 0x9C	; 156
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	80 81       	ld	r24, Z
    1f3c:	91 81       	ldd	r25, Z+1	; 0x01
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <lcd_init+0x57a>
    1f42:	fe 01       	movw	r30, r28
    1f44:	ec 59       	subi	r30, 0x9C	; 156
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4c:	de 01       	movw	r26, r28
    1f4e:	aa 59       	subi	r26, 0x9A	; 154
    1f50:	bf 4f       	sbci	r27, 0xFF	; 255
    1f52:	fe 01       	movw	r30, r28
    1f54:	ea 59       	subi	r30, 0x9A	; 154
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	11 96       	adiw	r26, 0x01	; 1
    1f60:	9c 93       	st	X, r25
    1f62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f64:	fe 01       	movw	r30, r28
    1f66:	ea 59       	subi	r30, 0x9A	; 154
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	d1 f6       	brne	.-76     	; 0x1f26 <lcd_init+0x562>
    1f72:	4b c0       	rjmp	.+150    	; 0x200a <lcd_init+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f74:	8e 01       	movw	r16, r28
    1f76:	0a 59       	subi	r16, 0x9A	; 154
    1f78:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e8 59       	subi	r30, 0x98	; 152
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	f8 01       	movw	r30, r16
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
    1f96:	de 01       	movw	r26, r28
    1f98:	ae 59       	subi	r26, 0x9E	; 158
    1f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	ea 59       	subi	r30, 0x9A	; 154
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	91 81       	ldd	r25, Z+1	; 0x01
    1fa6:	11 96       	adiw	r26, 0x01	; 1
    1fa8:	9c 93       	st	X, r25
    1faa:	8e 93       	st	-X, r24
    1fac:	fe 01       	movw	r30, r28
    1fae:	ee 59       	subi	r30, 0x9E	; 158
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <lcd_init+0x5f2>
    1fba:	fe 01       	movw	r30, r28
    1fbc:	ee 59       	subi	r30, 0x9E	; 158
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
    1fc4:	22 c0       	rjmp	.+68     	; 0x200a <lcd_init+0x646>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fc6:	8e 01       	movw	r16, r28
    1fc8:	00 59       	subi	r16, 0x90	; 144
    1fca:	1f 4f       	sbci	r17, 0xFF	; 255
    1fcc:	fe 01       	movw	r30, r28
    1fce:	ef 58       	subi	r30, 0x8F	; 143
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	60 81       	ld	r22, Z
    1fd4:	71 81       	ldd	r23, Z+1	; 0x01
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	93 81       	ldd	r25, Z+3	; 0x03
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	f8 01       	movw	r30, r16
    1fe4:	80 83       	st	Z, r24
    1fe6:	de 01       	movw	r26, r28
    1fe8:	af 59       	subi	r26, 0x9F	; 159
    1fea:	bf 4f       	sbci	r27, 0xFF	; 255
    1fec:	fe 01       	movw	r30, r28
    1fee:	e0 59       	subi	r30, 0x90	; 144
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ef 59       	subi	r30, 0x9F	; 159
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	8a 95       	dec	r24
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <lcd_init+0x63a>
    2002:	fe 01       	movw	r30, r28
    2004:	ef 59       	subi	r30, 0x9F	; 159
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 83       	st	Z, r24
	_delay_us(50);
	lcd_command(0x32);
    200a:	82 e3       	ldi	r24, 0x32	; 50
    200c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_command>
    2010:	fe 01       	movw	r30, r28
    2012:	e3 5a       	subi	r30, 0xA3	; 163
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	a8 e4       	ldi	r26, 0x48	; 72
    201c:	b2 e4       	ldi	r27, 0x42	; 66
    201e:	80 83       	st	Z, r24
    2020:	91 83       	std	Z+1, r25	; 0x01
    2022:	a2 83       	std	Z+2, r26	; 0x02
    2024:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2026:	8e 01       	movw	r16, r28
    2028:	07 5a       	subi	r16, 0xA7	; 167
    202a:	1f 4f       	sbci	r17, 0xFF	; 255
    202c:	fe 01       	movw	r30, r28
    202e:	e3 5a       	subi	r30, 0xA3	; 163
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	2b ea       	ldi	r18, 0xAB	; 171
    203c:	3a ea       	ldi	r19, 0xAA	; 170
    203e:	4a e2       	ldi	r20, 0x2A	; 42
    2040:	50 e4       	ldi	r21, 0x40	; 64
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	f8 01       	movw	r30, r16
    204c:	80 83       	st	Z, r24
    204e:	91 83       	std	Z+1, r25	; 0x01
    2050:	a2 83       	std	Z+2, r26	; 0x02
    2052:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2054:	fe 01       	movw	r30, r28
    2056:	e7 5a       	subi	r30, 0xA7	; 167
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	34 f4       	brge	.+12     	; 0x207e <lcd_init+0x6ba>
		__ticks = 1;
    2072:	fe 01       	movw	r30, r28
    2074:	e8 5a       	subi	r30, 0xA8	; 168
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	80 83       	st	Z, r24
    207c:	e0 c0       	rjmp	.+448    	; 0x223e <lcd_init+0x87a>
	else if (__tmp > 255)
    207e:	fe 01       	movw	r30, r28
    2080:	e7 5a       	subi	r30, 0xA7	; 167
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4f e7       	ldi	r20, 0x7F	; 127
    2092:	53 e4       	ldi	r21, 0x43	; 67
    2094:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2098:	18 16       	cp	r1, r24
    209a:	0c f0       	brlt	.+2      	; 0x209e <lcd_init+0x6da>
    209c:	c0 c0       	rjmp	.+384    	; 0x221e <lcd_init+0x85a>
	{
		_delay_ms(__us / 1000.0);
    209e:	fe 01       	movw	r30, r28
    20a0:	e3 5a       	subi	r30, 0xA3	; 163
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	60 81       	ld	r22, Z
    20a6:	71 81       	ldd	r23, Z+1	; 0x01
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a e7       	ldi	r20, 0x7A	; 122
    20b2:	54 e4       	ldi	r21, 0x44	; 68
    20b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	fe 01       	movw	r30, r28
    20be:	ec 5a       	subi	r30, 0xAC	; 172
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 83       	st	Z, r24
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	a2 83       	std	Z+2, r26	; 0x02
    20c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ca:	8e 01       	movw	r16, r28
    20cc:	00 5b       	subi	r16, 0xB0	; 176
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	fe 01       	movw	r30, r28
    20d2:	ec 5a       	subi	r30, 0xAC	; 172
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	4a ef       	ldi	r20, 0xFA	; 250
    20e4:	54 e4       	ldi	r21, 0x44	; 68
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	f8 01       	movw	r30, r16
    20f0:	80 83       	st	Z, r24
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	a2 83       	std	Z+2, r26	; 0x02
    20f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20f8:	fe 01       	movw	r30, r28
    20fa:	e0 5b       	subi	r30, 0xB0	; 176
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	60 81       	ld	r22, Z
    2100:	71 81       	ldd	r23, Z+1	; 0x01
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e8       	ldi	r20, 0x80	; 128
    210c:	5f e3       	ldi	r21, 0x3F	; 63
    210e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2112:	88 23       	and	r24, r24
    2114:	44 f4       	brge	.+16     	; 0x2126 <lcd_init+0x762>
		__ticks = 1;
    2116:	fe 01       	movw	r30, r28
    2118:	e2 5b       	subi	r30, 0xB2	; 178
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	80 83       	st	Z, r24
    2124:	64 c0       	rjmp	.+200    	; 0x21ee <lcd_init+0x82a>
	else if (__tmp > 65535)
    2126:	fe 01       	movw	r30, r28
    2128:	e0 5b       	subi	r30, 0xB0	; 176
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	60 81       	ld	r22, Z
    212e:	71 81       	ldd	r23, Z+1	; 0x01
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	0c f0       	brlt	.+2      	; 0x2146 <lcd_init+0x782>
    2144:	43 c0       	rjmp	.+134    	; 0x21cc <lcd_init+0x808>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	fe 01       	movw	r30, r28
    2148:	ec 5a       	subi	r30, 0xAC	; 172
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	8e 01       	movw	r16, r28
    2166:	02 5b       	subi	r16, 0xB2	; 178
    2168:	1f 4f       	sbci	r17, 0xFF	; 255
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	f8 01       	movw	r30, r16
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	80 83       	st	Z, r24
    217c:	1f c0       	rjmp	.+62     	; 0x21bc <lcd_init+0x7f8>
    217e:	fe 01       	movw	r30, r28
    2180:	e4 5b       	subi	r30, 0xB4	; 180
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	88 ec       	ldi	r24, 0xC8	; 200
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    218c:	fe 01       	movw	r30, r28
    218e:	e4 5b       	subi	r30, 0xB4	; 180
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 81       	ld	r24, Z
    2194:	91 81       	ldd	r25, Z+1	; 0x01
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <lcd_init+0x7d2>
    219a:	fe 01       	movw	r30, r28
    219c:	e4 5b       	subi	r30, 0xB4	; 180
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a4:	de 01       	movw	r26, r28
    21a6:	a2 5b       	subi	r26, 0xB2	; 178
    21a8:	bf 4f       	sbci	r27, 0xFF	; 255
    21aa:	fe 01       	movw	r30, r28
    21ac:	e2 5b       	subi	r30, 0xB2	; 178
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	11 96       	adiw	r26, 0x01	; 1
    21b8:	9c 93       	st	X, r25
    21ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21bc:	fe 01       	movw	r30, r28
    21be:	e2 5b       	subi	r30, 0xB2	; 178
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	d1 f6       	brne	.-76     	; 0x217e <lcd_init+0x7ba>
    21ca:	4b c0       	rjmp	.+150    	; 0x2262 <lcd_init+0x89e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21cc:	8e 01       	movw	r16, r28
    21ce:	02 5b       	subi	r16, 0xB2	; 178
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	fe 01       	movw	r30, r28
    21d4:	e0 5b       	subi	r30, 0xB0	; 176
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	f8 01       	movw	r30, r16
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	80 83       	st	Z, r24
    21ee:	de 01       	movw	r26, r28
    21f0:	a6 5b       	subi	r26, 0xB6	; 182
    21f2:	bf 4f       	sbci	r27, 0xFF	; 255
    21f4:	fe 01       	movw	r30, r28
    21f6:	e2 5b       	subi	r30, 0xB2	; 178
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
    21fe:	11 96       	adiw	r26, 0x01	; 1
    2200:	9c 93       	st	X, r25
    2202:	8e 93       	st	-X, r24
    2204:	fe 01       	movw	r30, r28
    2206:	e6 5b       	subi	r30, 0xB6	; 182
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 81       	ld	r24, Z
    220c:	91 81       	ldd	r25, Z+1	; 0x01
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <lcd_init+0x84a>
    2212:	fe 01       	movw	r30, r28
    2214:	e6 5b       	subi	r30, 0xB6	; 182
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
    221c:	22 c0       	rjmp	.+68     	; 0x2262 <lcd_init+0x89e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    221e:	8e 01       	movw	r16, r28
    2220:	08 5a       	subi	r16, 0xA8	; 168
    2222:	1f 4f       	sbci	r17, 0xFF	; 255
    2224:	fe 01       	movw	r30, r28
    2226:	e7 5a       	subi	r30, 0xA7	; 167
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	93 81       	ldd	r25, Z+3	; 0x03
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	f8 01       	movw	r30, r16
    223c:	80 83       	st	Z, r24
    223e:	de 01       	movw	r26, r28
    2240:	a7 5b       	subi	r26, 0xB7	; 183
    2242:	bf 4f       	sbci	r27, 0xFF	; 255
    2244:	fe 01       	movw	r30, r28
    2246:	e8 5a       	subi	r30, 0xA8	; 168
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    224e:	fe 01       	movw	r30, r28
    2250:	e7 5b       	subi	r30, 0xB7	; 183
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	8a 95       	dec	r24
    2258:	f1 f7       	brne	.-4      	; 0x2256 <lcd_init+0x892>
    225a:	fe 01       	movw	r30, r28
    225c:	e7 5b       	subi	r30, 0xB7	; 183
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 83       	st	Z, r24
	_delay_us(50);
	lcd_command(0x28);
    2262:	88 e2       	ldi	r24, 0x28	; 40
    2264:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_command>
    2268:	fe 01       	movw	r30, r28
    226a:	eb 5b       	subi	r30, 0xBB	; 187
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	a8 e4       	ldi	r26, 0x48	; 72
    2274:	b2 e4       	ldi	r27, 0x42	; 66
    2276:	80 83       	st	Z, r24
    2278:	91 83       	std	Z+1, r25	; 0x01
    227a:	a2 83       	std	Z+2, r26	; 0x02
    227c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    227e:	8e 01       	movw	r16, r28
    2280:	0f 5b       	subi	r16, 0xBF	; 191
    2282:	1f 4f       	sbci	r17, 0xFF	; 255
    2284:	fe 01       	movw	r30, r28
    2286:	eb 5b       	subi	r30, 0xBB	; 187
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	60 81       	ld	r22, Z
    228c:	71 81       	ldd	r23, Z+1	; 0x01
    228e:	82 81       	ldd	r24, Z+2	; 0x02
    2290:	93 81       	ldd	r25, Z+3	; 0x03
    2292:	2b ea       	ldi	r18, 0xAB	; 171
    2294:	3a ea       	ldi	r19, 0xAA	; 170
    2296:	4a e2       	ldi	r20, 0x2A	; 42
    2298:	50 e4       	ldi	r21, 0x40	; 64
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	f8 01       	movw	r30, r16
    22a4:	80 83       	st	Z, r24
    22a6:	91 83       	std	Z+1, r25	; 0x01
    22a8:	a2 83       	std	Z+2, r26	; 0x02
    22aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22ac:	fe 01       	movw	r30, r28
    22ae:	ef 5b       	subi	r30, 0xBF	; 191
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	60 81       	ld	r22, Z
    22b4:	71 81       	ldd	r23, Z+1	; 0x01
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	93 81       	ldd	r25, Z+3	; 0x03
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	34 f4       	brge	.+12     	; 0x22d6 <lcd_init+0x912>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	fe 01       	movw	r30, r28
    22ce:	e0 5c       	subi	r30, 0xC0	; 192
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 83       	st	Z, r24
    22d4:	9d c0       	rjmp	.+314    	; 0x2410 <lcd_init+0xa4c>
	else if (__tmp > 255)
    22d6:	fe 01       	movw	r30, r28
    22d8:	ef 5b       	subi	r30, 0xBF	; 191
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	93 81       	ldd	r25, Z+3	; 0x03
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	53 e4       	ldi	r21, 0x43	; 67
    22ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	0c f0       	brlt	.+2      	; 0x22f6 <lcd_init+0x932>
    22f4:	7e c0       	rjmp	.+252    	; 0x23f2 <lcd_init+0xa2e>
	{
		_delay_ms(__us / 1000.0);
    22f6:	fe 01       	movw	r30, r28
    22f8:	eb 5b       	subi	r30, 0xBB	; 187
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a e7       	ldi	r20, 0x7A	; 122
    230a:	54 e4       	ldi	r21, 0x44	; 68
    230c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8c af       	std	Y+60, r24	; 0x3c
    2316:	9d af       	std	Y+61, r25	; 0x3d
    2318:	ae af       	std	Y+62, r26	; 0x3e
    231a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231c:	6c ad       	ldd	r22, Y+60	; 0x3c
    231e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2320:	8e ad       	ldd	r24, Y+62	; 0x3e
    2322:	9f ad       	ldd	r25, Y+63	; 0x3f
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4a ef       	ldi	r20, 0xFA	; 250
    232a:	54 e4       	ldi	r21, 0x44	; 68
    232c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	88 af       	std	Y+56, r24	; 0x38
    2336:	99 af       	std	Y+57, r25	; 0x39
    2338:	aa af       	std	Y+58, r26	; 0x3a
    233a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    233c:	68 ad       	ldd	r22, Y+56	; 0x38
    233e:	79 ad       	ldd	r23, Y+57	; 0x39
    2340:	8a ad       	ldd	r24, Y+58	; 0x3a
    2342:	9b ad       	ldd	r25, Y+59	; 0x3b
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e8       	ldi	r20, 0x80	; 128
    234a:	5f e3       	ldi	r21, 0x3F	; 63
    234c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2350:	88 23       	and	r24, r24
    2352:	2c f4       	brge	.+10     	; 0x235e <lcd_init+0x99a>
		__ticks = 1;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	9f ab       	std	Y+55, r25	; 0x37
    235a:	8e ab       	std	Y+54, r24	; 0x36
    235c:	3f c0       	rjmp	.+126    	; 0x23dc <lcd_init+0xa18>
	else if (__tmp > 65535)
    235e:	68 ad       	ldd	r22, Y+56	; 0x38
    2360:	79 ad       	ldd	r23, Y+57	; 0x39
    2362:	8a ad       	ldd	r24, Y+58	; 0x3a
    2364:	9b ad       	ldd	r25, Y+59	; 0x3b
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	3f ef       	ldi	r19, 0xFF	; 255
    236a:	4f e7       	ldi	r20, 0x7F	; 127
    236c:	57 e4       	ldi	r21, 0x47	; 71
    236e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2372:	18 16       	cp	r1, r24
    2374:	4c f5       	brge	.+82     	; 0x23c8 <lcd_init+0xa04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2376:	6c ad       	ldd	r22, Y+60	; 0x3c
    2378:	7d ad       	ldd	r23, Y+61	; 0x3d
    237a:	8e ad       	ldd	r24, Y+62	; 0x3e
    237c:	9f ad       	ldd	r25, Y+63	; 0x3f
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e2       	ldi	r20, 0x20	; 32
    2384:	51 e4       	ldi	r21, 0x41	; 65
    2386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	bc 01       	movw	r22, r24
    2390:	cd 01       	movw	r24, r26
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9f ab       	std	Y+55, r25	; 0x37
    239c:	8e ab       	std	Y+54, r24	; 0x36
    239e:	0f c0       	rjmp	.+30     	; 0x23be <lcd_init+0x9fa>
    23a0:	88 ec       	ldi	r24, 0xC8	; 200
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9d ab       	std	Y+53, r25	; 0x35
    23a6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23a8:	8c a9       	ldd	r24, Y+52	; 0x34
    23aa:	9d a9       	ldd	r25, Y+53	; 0x35
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <lcd_init+0x9e8>
    23b0:	9d ab       	std	Y+53, r25	; 0x35
    23b2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b4:	8e a9       	ldd	r24, Y+54	; 0x36
    23b6:	9f a9       	ldd	r25, Y+55	; 0x37
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	9f ab       	std	Y+55, r25	; 0x37
    23bc:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23be:	8e a9       	ldd	r24, Y+54	; 0x36
    23c0:	9f a9       	ldd	r25, Y+55	; 0x37
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	69 f7       	brne	.-38     	; 0x23a0 <lcd_init+0x9dc>
    23c6:	2d c0       	rjmp	.+90     	; 0x2422 <lcd_init+0xa5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c8:	68 ad       	ldd	r22, Y+56	; 0x38
    23ca:	79 ad       	ldd	r23, Y+57	; 0x39
    23cc:	8a ad       	ldd	r24, Y+58	; 0x3a
    23ce:	9b ad       	ldd	r25, Y+59	; 0x3b
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9f ab       	std	Y+55, r25	; 0x37
    23da:	8e ab       	std	Y+54, r24	; 0x36
    23dc:	8e a9       	ldd	r24, Y+54	; 0x36
    23de:	9f a9       	ldd	r25, Y+55	; 0x37
    23e0:	9b ab       	std	Y+51, r25	; 0x33
    23e2:	8a ab       	std	Y+50, r24	; 0x32
    23e4:	8a a9       	ldd	r24, Y+50	; 0x32
    23e6:	9b a9       	ldd	r25, Y+51	; 0x33
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <lcd_init+0xa24>
    23ec:	9b ab       	std	Y+51, r25	; 0x33
    23ee:	8a ab       	std	Y+50, r24	; 0x32
    23f0:	18 c0       	rjmp	.+48     	; 0x2422 <lcd_init+0xa5e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23f2:	fe 01       	movw	r30, r28
    23f4:	ef 5b       	subi	r30, 0xBF	; 191
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	60 81       	ld	r22, Z
    23fa:	71 81       	ldd	r23, Z+1	; 0x01
    23fc:	82 81       	ldd	r24, Z+2	; 0x02
    23fe:	93 81       	ldd	r25, Z+3	; 0x03
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	fe 01       	movw	r30, r28
    240a:	e0 5c       	subi	r30, 0xC0	; 192
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	80 83       	st	Z, r24
    2410:	fe 01       	movw	r30, r28
    2412:	e0 5c       	subi	r30, 0xC0	; 192
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	80 81       	ld	r24, Z
    2418:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    241a:	89 a9       	ldd	r24, Y+49	; 0x31
    241c:	8a 95       	dec	r24
    241e:	f1 f7       	brne	.-4      	; 0x241c <lcd_init+0xa58>
    2420:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	lcd_command(0x0E);
    2422:	8e e0       	ldi	r24, 0x0E	; 14
    2424:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_command>
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	a8 e4       	ldi	r26, 0x48	; 72
    242e:	b2 e4       	ldi	r27, 0x42	; 66
    2430:	8d a7       	std	Y+45, r24	; 0x2d
    2432:	9e a7       	std	Y+46, r25	; 0x2e
    2434:	af a7       	std	Y+47, r26	; 0x2f
    2436:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2438:	6d a5       	ldd	r22, Y+45	; 0x2d
    243a:	7e a5       	ldd	r23, Y+46	; 0x2e
    243c:	8f a5       	ldd	r24, Y+47	; 0x2f
    243e:	98 a9       	ldd	r25, Y+48	; 0x30
    2440:	2b ea       	ldi	r18, 0xAB	; 171
    2442:	3a ea       	ldi	r19, 0xAA	; 170
    2444:	4a e2       	ldi	r20, 0x2A	; 42
    2446:	50 e4       	ldi	r21, 0x40	; 64
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	89 a7       	std	Y+41, r24	; 0x29
    2452:	9a a7       	std	Y+42, r25	; 0x2a
    2454:	ab a7       	std	Y+43, r26	; 0x2b
    2456:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2458:	69 a5       	ldd	r22, Y+41	; 0x29
    245a:	7a a5       	ldd	r23, Y+42	; 0x2a
    245c:	8b a5       	ldd	r24, Y+43	; 0x2b
    245e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e8       	ldi	r20, 0x80	; 128
    2466:	5f e3       	ldi	r21, 0x3F	; 63
    2468:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    246c:	88 23       	and	r24, r24
    246e:	1c f4       	brge	.+6      	; 0x2476 <lcd_init+0xab2>
		__ticks = 1;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	88 a7       	std	Y+40, r24	; 0x28
    2474:	91 c0       	rjmp	.+290    	; 0x2598 <lcd_init+0xbd4>
	else if (__tmp > 255)
    2476:	69 a5       	ldd	r22, Y+41	; 0x29
    2478:	7a a5       	ldd	r23, Y+42	; 0x2a
    247a:	8b a5       	ldd	r24, Y+43	; 0x2b
    247c:	9c a5       	ldd	r25, Y+44	; 0x2c
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	53 e4       	ldi	r21, 0x43	; 67
    2486:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	0c f0       	brlt	.+2      	; 0x2490 <lcd_init+0xacc>
    248e:	7b c0       	rjmp	.+246    	; 0x2586 <lcd_init+0xbc2>
	{
		_delay_ms(__us / 1000.0);
    2490:	6d a5       	ldd	r22, Y+45	; 0x2d
    2492:	7e a5       	ldd	r23, Y+46	; 0x2e
    2494:	8f a5       	ldd	r24, Y+47	; 0x2f
    2496:	98 a9       	ldd	r25, Y+48	; 0x30
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	4a e7       	ldi	r20, 0x7A	; 122
    249e:	54 e4       	ldi	r21, 0x44	; 68
    24a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	8c a3       	std	Y+36, r24	; 0x24
    24aa:	9d a3       	std	Y+37, r25	; 0x25
    24ac:	ae a3       	std	Y+38, r26	; 0x26
    24ae:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b0:	6c a1       	ldd	r22, Y+36	; 0x24
    24b2:	7d a1       	ldd	r23, Y+37	; 0x25
    24b4:	8e a1       	ldd	r24, Y+38	; 0x26
    24b6:	9f a1       	ldd	r25, Y+39	; 0x27
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	4a ef       	ldi	r20, 0xFA	; 250
    24be:	54 e4       	ldi	r21, 0x44	; 68
    24c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	88 a3       	std	Y+32, r24	; 0x20
    24ca:	99 a3       	std	Y+33, r25	; 0x21
    24cc:	aa a3       	std	Y+34, r26	; 0x22
    24ce:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    24d0:	68 a1       	ldd	r22, Y+32	; 0x20
    24d2:	79 a1       	ldd	r23, Y+33	; 0x21
    24d4:	8a a1       	ldd	r24, Y+34	; 0x22
    24d6:	9b a1       	ldd	r25, Y+35	; 0x23
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e8       	ldi	r20, 0x80	; 128
    24de:	5f e3       	ldi	r21, 0x3F	; 63
    24e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e4:	88 23       	and	r24, r24
    24e6:	2c f4       	brge	.+10     	; 0x24f2 <lcd_init+0xb2e>
		__ticks = 1;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	9f 8f       	std	Y+31, r25	; 0x1f
    24ee:	8e 8f       	std	Y+30, r24	; 0x1e
    24f0:	3f c0       	rjmp	.+126    	; 0x2570 <lcd_init+0xbac>
	else if (__tmp > 65535)
    24f2:	68 a1       	ldd	r22, Y+32	; 0x20
    24f4:	79 a1       	ldd	r23, Y+33	; 0x21
    24f6:	8a a1       	ldd	r24, Y+34	; 0x22
    24f8:	9b a1       	ldd	r25, Y+35	; 0x23
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	3f ef       	ldi	r19, 0xFF	; 255
    24fe:	4f e7       	ldi	r20, 0x7F	; 127
    2500:	57 e4       	ldi	r21, 0x47	; 71
    2502:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2506:	18 16       	cp	r1, r24
    2508:	4c f5       	brge	.+82     	; 0x255c <lcd_init+0xb98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250a:	6c a1       	ldd	r22, Y+36	; 0x24
    250c:	7d a1       	ldd	r23, Y+37	; 0x25
    250e:	8e a1       	ldd	r24, Y+38	; 0x26
    2510:	9f a1       	ldd	r25, Y+39	; 0x27
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e2       	ldi	r20, 0x20	; 32
    2518:	51 e4       	ldi	r21, 0x41	; 65
    251a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	bc 01       	movw	r22, r24
    2524:	cd 01       	movw	r24, r26
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	9f 8f       	std	Y+31, r25	; 0x1f
    2530:	8e 8f       	std	Y+30, r24	; 0x1e
    2532:	0f c0       	rjmp	.+30     	; 0x2552 <lcd_init+0xb8e>
    2534:	88 ec       	ldi	r24, 0xC8	; 200
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9d 8f       	std	Y+29, r25	; 0x1d
    253a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    253c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    253e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <lcd_init+0xb7c>
    2544:	9d 8f       	std	Y+29, r25	; 0x1d
    2546:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2548:	8e 8d       	ldd	r24, Y+30	; 0x1e
    254a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	9f 8f       	std	Y+31, r25	; 0x1f
    2550:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2552:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2554:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	69 f7       	brne	.-38     	; 0x2534 <lcd_init+0xb70>
    255a:	24 c0       	rjmp	.+72     	; 0x25a4 <lcd_init+0xbe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255c:	68 a1       	ldd	r22, Y+32	; 0x20
    255e:	79 a1       	ldd	r23, Y+33	; 0x21
    2560:	8a a1       	ldd	r24, Y+34	; 0x22
    2562:	9b a1       	ldd	r25, Y+35	; 0x23
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	9f 8f       	std	Y+31, r25	; 0x1f
    256e:	8e 8f       	std	Y+30, r24	; 0x1e
    2570:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2572:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2574:	9b 8f       	std	Y+27, r25	; 0x1b
    2576:	8a 8f       	std	Y+26, r24	; 0x1a
    2578:	8a 8d       	ldd	r24, Y+26	; 0x1a
    257a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	f1 f7       	brne	.-4      	; 0x257c <lcd_init+0xbb8>
    2580:	9b 8f       	std	Y+27, r25	; 0x1b
    2582:	8a 8f       	std	Y+26, r24	; 0x1a
    2584:	0f c0       	rjmp	.+30     	; 0x25a4 <lcd_init+0xbe0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2586:	69 a5       	ldd	r22, Y+41	; 0x29
    2588:	7a a5       	ldd	r23, Y+42	; 0x2a
    258a:	8b a5       	ldd	r24, Y+43	; 0x2b
    258c:	9c a5       	ldd	r25, Y+44	; 0x2c
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	88 a7       	std	Y+40, r24	; 0x28
    2598:	88 a5       	ldd	r24, Y+40	; 0x28
    259a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    259c:	89 8d       	ldd	r24, Y+25	; 0x19
    259e:	8a 95       	dec	r24
    25a0:	f1 f7       	brne	.-4      	; 0x259e <lcd_init+0xbda>
    25a2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	lcd_command(0x01);
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_command>
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	aa ef       	ldi	r26, 0xFA	; 250
    25b0:	b4 e4       	ldi	r27, 0x44	; 68
    25b2:	8d 8b       	std	Y+21, r24	; 0x15
    25b4:	9e 8b       	std	Y+22, r25	; 0x16
    25b6:	af 8b       	std	Y+23, r26	; 0x17
    25b8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25ba:	6d 89       	ldd	r22, Y+21	; 0x15
    25bc:	7e 89       	ldd	r23, Y+22	; 0x16
    25be:	8f 89       	ldd	r24, Y+23	; 0x17
    25c0:	98 8d       	ldd	r25, Y+24	; 0x18
    25c2:	2b ea       	ldi	r18, 0xAB	; 171
    25c4:	3a ea       	ldi	r19, 0xAA	; 170
    25c6:	4a e2       	ldi	r20, 0x2A	; 42
    25c8:	50 e4       	ldi	r21, 0x40	; 64
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	89 8b       	std	Y+17, r24	; 0x11
    25d4:	9a 8b       	std	Y+18, r25	; 0x12
    25d6:	ab 8b       	std	Y+19, r26	; 0x13
    25d8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25da:	69 89       	ldd	r22, Y+17	; 0x11
    25dc:	7a 89       	ldd	r23, Y+18	; 0x12
    25de:	8b 89       	ldd	r24, Y+19	; 0x13
    25e0:	9c 89       	ldd	r25, Y+20	; 0x14
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e8       	ldi	r20, 0x80	; 128
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	1c f4       	brge	.+6      	; 0x25f8 <lcd_init+0xc34>
		__ticks = 1;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	88 8b       	std	Y+16, r24	; 0x10
    25f6:	91 c0       	rjmp	.+290    	; 0x271a <lcd_init+0xd56>
	else if (__tmp > 255)
    25f8:	69 89       	ldd	r22, Y+17	; 0x11
    25fa:	7a 89       	ldd	r23, Y+18	; 0x12
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4f e7       	ldi	r20, 0x7F	; 127
    2606:	53 e4       	ldi	r21, 0x43	; 67
    2608:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    260c:	18 16       	cp	r1, r24
    260e:	0c f0       	brlt	.+2      	; 0x2612 <lcd_init+0xc4e>
    2610:	7b c0       	rjmp	.+246    	; 0x2708 <lcd_init+0xd44>
	{
		_delay_ms(__us / 1000.0);
    2612:	6d 89       	ldd	r22, Y+21	; 0x15
    2614:	7e 89       	ldd	r23, Y+22	; 0x16
    2616:	8f 89       	ldd	r24, Y+23	; 0x17
    2618:	98 8d       	ldd	r25, Y+24	; 0x18
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	4a e7       	ldi	r20, 0x7A	; 122
    2620:	54 e4       	ldi	r21, 0x44	; 68
    2622:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	8c 87       	std	Y+12, r24	; 0x0c
    262c:	9d 87       	std	Y+13, r25	; 0x0d
    262e:	ae 87       	std	Y+14, r26	; 0x0e
    2630:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2632:	6c 85       	ldd	r22, Y+12	; 0x0c
    2634:	7d 85       	ldd	r23, Y+13	; 0x0d
    2636:	8e 85       	ldd	r24, Y+14	; 0x0e
    2638:	9f 85       	ldd	r25, Y+15	; 0x0f
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	4a ef       	ldi	r20, 0xFA	; 250
    2640:	54 e4       	ldi	r21, 0x44	; 68
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	88 87       	std	Y+8, r24	; 0x08
    264c:	99 87       	std	Y+9, r25	; 0x09
    264e:	aa 87       	std	Y+10, r26	; 0x0a
    2650:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2652:	68 85       	ldd	r22, Y+8	; 0x08
    2654:	79 85       	ldd	r23, Y+9	; 0x09
    2656:	8a 85       	ldd	r24, Y+10	; 0x0a
    2658:	9b 85       	ldd	r25, Y+11	; 0x0b
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e8       	ldi	r20, 0x80	; 128
    2660:	5f e3       	ldi	r21, 0x3F	; 63
    2662:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2666:	88 23       	and	r24, r24
    2668:	2c f4       	brge	.+10     	; 0x2674 <lcd_init+0xcb0>
		__ticks = 1;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9f 83       	std	Y+7, r25	; 0x07
    2670:	8e 83       	std	Y+6, r24	; 0x06
    2672:	3f c0       	rjmp	.+126    	; 0x26f2 <lcd_init+0xd2e>
	else if (__tmp > 65535)
    2674:	68 85       	ldd	r22, Y+8	; 0x08
    2676:	79 85       	ldd	r23, Y+9	; 0x09
    2678:	8a 85       	ldd	r24, Y+10	; 0x0a
    267a:	9b 85       	ldd	r25, Y+11	; 0x0b
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	4c f5       	brge	.+82     	; 0x26de <lcd_init+0xd1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	6c 85       	ldd	r22, Y+12	; 0x0c
    268e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2690:	8e 85       	ldd	r24, Y+14	; 0x0e
    2692:	9f 85       	ldd	r25, Y+15	; 0x0f
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e2       	ldi	r20, 0x20	; 32
    269a:	51 e4       	ldi	r21, 0x41	; 65
    269c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	9f 83       	std	Y+7, r25	; 0x07
    26b2:	8e 83       	std	Y+6, r24	; 0x06
    26b4:	0f c0       	rjmp	.+30     	; 0x26d4 <lcd_init+0xd10>
    26b6:	88 ec       	ldi	r24, 0xC8	; 200
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9d 83       	std	Y+5, r25	; 0x05
    26bc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26be:	8c 81       	ldd	r24, Y+4	; 0x04
    26c0:	9d 81       	ldd	r25, Y+5	; 0x05
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <lcd_init+0xcfe>
    26c6:	9d 83       	std	Y+5, r25	; 0x05
    26c8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ca:	8e 81       	ldd	r24, Y+6	; 0x06
    26cc:	9f 81       	ldd	r25, Y+7	; 0x07
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	9f 83       	std	Y+7, r25	; 0x07
    26d2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d4:	8e 81       	ldd	r24, Y+6	; 0x06
    26d6:	9f 81       	ldd	r25, Y+7	; 0x07
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	69 f7       	brne	.-38     	; 0x26b6 <lcd_init+0xcf2>
    26dc:	24 c0       	rjmp	.+72     	; 0x2726 <lcd_init+0xd62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26de:	68 85       	ldd	r22, Y+8	; 0x08
    26e0:	79 85       	ldd	r23, Y+9	; 0x09
    26e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    26e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9f 83       	std	Y+7, r25	; 0x07
    26f0:	8e 83       	std	Y+6, r24	; 0x06
    26f2:	8e 81       	ldd	r24, Y+6	; 0x06
    26f4:	9f 81       	ldd	r25, Y+7	; 0x07
    26f6:	9b 83       	std	Y+3, r25	; 0x03
    26f8:	8a 83       	std	Y+2, r24	; 0x02
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	9b 81       	ldd	r25, Y+3	; 0x03
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <lcd_init+0xd3a>
    2702:	9b 83       	std	Y+3, r25	; 0x03
    2704:	8a 83       	std	Y+2, r24	; 0x02
    2706:	0f c0       	rjmp	.+30     	; 0x2726 <lcd_init+0xd62>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2708:	69 89       	ldd	r22, Y+17	; 0x11
    270a:	7a 89       	ldd	r23, Y+18	; 0x12
    270c:	8b 89       	ldd	r24, Y+19	; 0x13
    270e:	9c 89       	ldd	r25, Y+20	; 0x14
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	88 8b       	std	Y+16, r24	; 0x10
    271a:	88 89       	ldd	r24, Y+16	; 0x10
    271c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	8a 95       	dec	r24
    2722:	f1 f7       	brne	.-4      	; 0x2720 <lcd_init+0xd5c>
    2724:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	lcd_command(0x06);
    2726:	86 e0       	ldi	r24, 0x06	; 6
    2728:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_command>
}
    272c:	c1 56       	subi	r28, 0x61	; 97
    272e:	df 4f       	sbci	r29, 0xFF	; 255
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	1f 91       	pop	r17
    2740:	0f 91       	pop	r16
    2742:	08 95       	ret

00002744 <lcd_goto_xy>:
//function to locate the position.
//lcd_goto_xy(row,columm);
//line 1 of lcd=row 1. ,line2 of lcd=row2
//columm 1 of lcd =columm 1., columm 16 of lcd =columm 16.

void lcd_goto_xy(unsigned char row,unsigned char columm){
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	6e 97       	sbiw	r28, 0x1e	; 30
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	8d 8f       	std	Y+29, r24	; 0x1d
    275a:	6e 8f       	std	Y+30, r22	; 0x1e
	unsigned char fristcharadr[]={0x80,0xC0,0x90,0xD0};
    275c:	80 e8       	ldi	r24, 0x80	; 128
    275e:	89 8f       	std	Y+25, r24	; 0x19
    2760:	80 ec       	ldi	r24, 0xC0	; 192
    2762:	8a 8f       	std	Y+26, r24	; 0x1a
    2764:	80 e9       	ldi	r24, 0x90	; 144
    2766:	8b 8f       	std	Y+27, r24	; 0x1b
    2768:	80 ed       	ldi	r24, 0xD0	; 208
    276a:	8c 8f       	std	Y+28, r24	; 0x1c
		lcd_command(fristcharadr[row-1]+(columm-1));
    276c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    276e:	88 2f       	mov	r24, r24
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 01       	movw	r18, r24
    2774:	21 50       	subi	r18, 0x01	; 1
    2776:	30 40       	sbci	r19, 0x00	; 0
    2778:	ce 01       	movw	r24, r28
    277a:	49 96       	adiw	r24, 0x19	; 25
    277c:	fc 01       	movw	r30, r24
    277e:	e2 0f       	add	r30, r18
    2780:	f3 1f       	adc	r31, r19
    2782:	90 81       	ld	r25, Z
    2784:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2786:	89 0f       	add	r24, r25
    2788:	81 50       	subi	r24, 0x01	; 1
    278a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_command>
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	a8 ec       	ldi	r26, 0xC8	; 200
    2794:	b2 e4       	ldi	r27, 0x42	; 66
    2796:	8d 8b       	std	Y+21, r24	; 0x15
    2798:	9e 8b       	std	Y+22, r25	; 0x16
    279a:	af 8b       	std	Y+23, r26	; 0x17
    279c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    279e:	6d 89       	ldd	r22, Y+21	; 0x15
    27a0:	7e 89       	ldd	r23, Y+22	; 0x16
    27a2:	8f 89       	ldd	r24, Y+23	; 0x17
    27a4:	98 8d       	ldd	r25, Y+24	; 0x18
    27a6:	2b ea       	ldi	r18, 0xAB	; 171
    27a8:	3a ea       	ldi	r19, 0xAA	; 170
    27aa:	4a e2       	ldi	r20, 0x2A	; 42
    27ac:	50 e4       	ldi	r21, 0x40	; 64
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	89 8b       	std	Y+17, r24	; 0x11
    27b8:	9a 8b       	std	Y+18, r25	; 0x12
    27ba:	ab 8b       	std	Y+19, r26	; 0x13
    27bc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27be:	69 89       	ldd	r22, Y+17	; 0x11
    27c0:	7a 89       	ldd	r23, Y+18	; 0x12
    27c2:	8b 89       	ldd	r24, Y+19	; 0x13
    27c4:	9c 89       	ldd	r25, Y+20	; 0x14
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e8       	ldi	r20, 0x80	; 128
    27cc:	5f e3       	ldi	r21, 0x3F	; 63
    27ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27d2:	88 23       	and	r24, r24
    27d4:	1c f4       	brge	.+6      	; 0x27dc <lcd_goto_xy+0x98>
		__ticks = 1;
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	88 8b       	std	Y+16, r24	; 0x10
    27da:	91 c0       	rjmp	.+290    	; 0x28fe <lcd_goto_xy+0x1ba>
	else if (__tmp > 255)
    27dc:	69 89       	ldd	r22, Y+17	; 0x11
    27de:	7a 89       	ldd	r23, Y+18	; 0x12
    27e0:	8b 89       	ldd	r24, Y+19	; 0x13
    27e2:	9c 89       	ldd	r25, Y+20	; 0x14
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	4f e7       	ldi	r20, 0x7F	; 127
    27ea:	53 e4       	ldi	r21, 0x43	; 67
    27ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27f0:	18 16       	cp	r1, r24
    27f2:	0c f0       	brlt	.+2      	; 0x27f6 <lcd_goto_xy+0xb2>
    27f4:	7b c0       	rjmp	.+246    	; 0x28ec <lcd_goto_xy+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    27f6:	6d 89       	ldd	r22, Y+21	; 0x15
    27f8:	7e 89       	ldd	r23, Y+22	; 0x16
    27fa:	8f 89       	ldd	r24, Y+23	; 0x17
    27fc:	98 8d       	ldd	r25, Y+24	; 0x18
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	4a e7       	ldi	r20, 0x7A	; 122
    2804:	54 e4       	ldi	r21, 0x44	; 68
    2806:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	8c 87       	std	Y+12, r24	; 0x0c
    2810:	9d 87       	std	Y+13, r25	; 0x0d
    2812:	ae 87       	std	Y+14, r26	; 0x0e
    2814:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2816:	6c 85       	ldd	r22, Y+12	; 0x0c
    2818:	7d 85       	ldd	r23, Y+13	; 0x0d
    281a:	8e 85       	ldd	r24, Y+14	; 0x0e
    281c:	9f 85       	ldd	r25, Y+15	; 0x0f
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	4a ef       	ldi	r20, 0xFA	; 250
    2824:	54 e4       	ldi	r21, 0x44	; 68
    2826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	88 87       	std	Y+8, r24	; 0x08
    2830:	99 87       	std	Y+9, r25	; 0x09
    2832:	aa 87       	std	Y+10, r26	; 0x0a
    2834:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2836:	68 85       	ldd	r22, Y+8	; 0x08
    2838:	79 85       	ldd	r23, Y+9	; 0x09
    283a:	8a 85       	ldd	r24, Y+10	; 0x0a
    283c:	9b 85       	ldd	r25, Y+11	; 0x0b
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e8       	ldi	r20, 0x80	; 128
    2844:	5f e3       	ldi	r21, 0x3F	; 63
    2846:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    284a:	88 23       	and	r24, r24
    284c:	2c f4       	brge	.+10     	; 0x2858 <lcd_goto_xy+0x114>
		__ticks = 1;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9f 83       	std	Y+7, r25	; 0x07
    2854:	8e 83       	std	Y+6, r24	; 0x06
    2856:	3f c0       	rjmp	.+126    	; 0x28d6 <lcd_goto_xy+0x192>
	else if (__tmp > 65535)
    2858:	68 85       	ldd	r22, Y+8	; 0x08
    285a:	79 85       	ldd	r23, Y+9	; 0x09
    285c:	8a 85       	ldd	r24, Y+10	; 0x0a
    285e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	3f ef       	ldi	r19, 0xFF	; 255
    2864:	4f e7       	ldi	r20, 0x7F	; 127
    2866:	57 e4       	ldi	r21, 0x47	; 71
    2868:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286c:	18 16       	cp	r1, r24
    286e:	4c f5       	brge	.+82     	; 0x28c2 <lcd_goto_xy+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2870:	6c 85       	ldd	r22, Y+12	; 0x0c
    2872:	7d 85       	ldd	r23, Y+13	; 0x0d
    2874:	8e 85       	ldd	r24, Y+14	; 0x0e
    2876:	9f 85       	ldd	r25, Y+15	; 0x0f
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9f 83       	std	Y+7, r25	; 0x07
    2896:	8e 83       	std	Y+6, r24	; 0x06
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <lcd_goto_xy+0x174>
    289a:	88 ec       	ldi	r24, 0xC8	; 200
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9d 83       	std	Y+5, r25	; 0x05
    28a0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28a2:	8c 81       	ldd	r24, Y+4	; 0x04
    28a4:	9d 81       	ldd	r25, Y+5	; 0x05
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <lcd_goto_xy+0x162>
    28aa:	9d 83       	std	Y+5, r25	; 0x05
    28ac:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	8e 81       	ldd	r24, Y+6	; 0x06
    28b0:	9f 81       	ldd	r25, Y+7	; 0x07
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	9f 83       	std	Y+7, r25	; 0x07
    28b6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ba:	9f 81       	ldd	r25, Y+7	; 0x07
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	69 f7       	brne	.-38     	; 0x289a <lcd_goto_xy+0x156>
    28c0:	24 c0       	rjmp	.+72     	; 0x290a <lcd_goto_xy+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c2:	68 85       	ldd	r22, Y+8	; 0x08
    28c4:	79 85       	ldd	r23, Y+9	; 0x09
    28c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    28c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	9f 83       	std	Y+7, r25	; 0x07
    28d4:	8e 83       	std	Y+6, r24	; 0x06
    28d6:	8e 81       	ldd	r24, Y+6	; 0x06
    28d8:	9f 81       	ldd	r25, Y+7	; 0x07
    28da:	9b 83       	std	Y+3, r25	; 0x03
    28dc:	8a 83       	std	Y+2, r24	; 0x02
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <lcd_goto_xy+0x19e>
    28e6:	9b 83       	std	Y+3, r25	; 0x03
    28e8:	8a 83       	std	Y+2, r24	; 0x02
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <lcd_goto_xy+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28ec:	69 89       	ldd	r22, Y+17	; 0x11
    28ee:	7a 89       	ldd	r23, Y+18	; 0x12
    28f0:	8b 89       	ldd	r24, Y+19	; 0x13
    28f2:	9c 89       	ldd	r25, Y+20	; 0x14
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	88 8b       	std	Y+16, r24	; 0x10
    28fe:	88 89       	ldd	r24, Y+16	; 0x10
    2900:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	8a 95       	dec	r24
    2906:	f1 f7       	brne	.-4      	; 0x2904 <lcd_goto_xy+0x1c0>
    2908:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
	}
    290a:	6e 96       	adiw	r28, 0x1e	; 30
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <lcd_print>:
//***********************************************************************************************************
//function to put what u need.
// lcd_print("hallo");
 void lcd_print(char *text){
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	00 d0       	rcall	.+0      	; 0x2922 <lcd_print+0x6>
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
    2926:	9a 83       	std	Y+2, r25	; 0x02
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	0b c0       	rjmp	.+22     	; 0x2942 <lcd_print+0x26>
	while(*text>0){
		lcd_data(*text++);
    292c:	e9 81       	ldd	r30, Y+1	; 0x01
    292e:	fa 81       	ldd	r31, Y+2	; 0x02
    2930:	20 81       	ld	r18, Z
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	9a 81       	ldd	r25, Y+2	; 0x02
    2936:	01 96       	adiw	r24, 0x01	; 1
    2938:	9a 83       	std	Y+2, r25	; 0x02
    293a:	89 83       	std	Y+1, r24	; 0x01
    293c:	82 2f       	mov	r24, r18
    293e:	0e 94 1f 0a 	call	0x143e	; 0x143e <lcd_data>
	}
//***********************************************************************************************************
//function to put what u need.
// lcd_print("hallo");
 void lcd_print(char *text){
	while(*text>0){
    2942:	e9 81       	ldd	r30, Y+1	; 0x01
    2944:	fa 81       	ldd	r31, Y+2	; 0x02
    2946:	80 81       	ld	r24, Z
    2948:	88 23       	and	r24, r24
    294a:	81 f7       	brne	.-32     	; 0x292c <lcd_print+0x10>
		lcd_data(*text++);
	}
}
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <lcd_CLEAR>:

//************************************************************************************************************
//function to clear lcd. 
//lcd_CLEAR();.
void lcd_CLEAR(){
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	2e 97       	sbiw	r28, 0x0e	; 14
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
	lcd_command(0x01);
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_command>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a0 e0       	ldi	r26, 0x00	; 0
    2976:	b0 e4       	ldi	r27, 0x40	; 64
    2978:	8b 87       	std	Y+11, r24	; 0x0b
    297a:	9c 87       	std	Y+12, r25	; 0x0c
    297c:	ad 87       	std	Y+13, r26	; 0x0d
    297e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2980:	6b 85       	ldd	r22, Y+11	; 0x0b
    2982:	7c 85       	ldd	r23, Y+12	; 0x0c
    2984:	8d 85       	ldd	r24, Y+13	; 0x0d
    2986:	9e 85       	ldd	r25, Y+14	; 0x0e
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4a ef       	ldi	r20, 0xFA	; 250
    298e:	54 e4       	ldi	r21, 0x44	; 68
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8f 83       	std	Y+7, r24	; 0x07
    299a:	98 87       	std	Y+8, r25	; 0x08
    299c:	a9 87       	std	Y+9, r26	; 0x09
    299e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29a0:	6f 81       	ldd	r22, Y+7	; 0x07
    29a2:	78 85       	ldd	r23, Y+8	; 0x08
    29a4:	89 85       	ldd	r24, Y+9	; 0x09
    29a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	2c f4       	brge	.+10     	; 0x29c2 <lcd_CLEAR+0x6c>
		__ticks = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	9e 83       	std	Y+6, r25	; 0x06
    29be:	8d 83       	std	Y+5, r24	; 0x05
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <lcd_CLEAR+0xea>
	else if (__tmp > 65535)
    29c2:	6f 81       	ldd	r22, Y+7	; 0x07
    29c4:	78 85       	ldd	r23, Y+8	; 0x08
    29c6:	89 85       	ldd	r24, Y+9	; 0x09
    29c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	4c f5       	brge	.+82     	; 0x2a2c <lcd_CLEAR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29da:	6b 85       	ldd	r22, Y+11	; 0x0b
    29dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29de:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	51 e4       	ldi	r21, 0x41	; 65
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <lcd_CLEAR+0xcc>
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <lcd_CLEAR+0xba>
    2a14:	9c 83       	std	Y+4, r25	; 0x04
    2a16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	9e 83       	std	Y+6, r25	; 0x06
    2a20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	9e 81       	ldd	r25, Y+6	; 0x06
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	69 f7       	brne	.-38     	; 0x2a04 <lcd_CLEAR+0xae>
    2a2a:	14 c0       	rjmp	.+40     	; 0x2a54 <lcd_CLEAR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2e:	78 85       	ldd	r23, Y+8	; 0x08
    2a30:	89 85       	ldd	r24, Y+9	; 0x09
    2a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9e 83       	std	Y+6, r25	; 0x06
    2a3e:	8d 83       	std	Y+5, r24	; 0x05
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <lcd_CLEAR+0xf6>
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);}
    2a54:	2e 96       	adiw	r28, 0x0e	; 14
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <lcd_curcor_off>:
//*************************************************************************************************************
//function to cancel the cursor.
//lcd_curcor_off();
void lcd_curcor_off(){
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	68 97       	sbiw	r28, 0x18	; 24
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
	lcd_command(0x0c);
    2a7a:	8c e0       	ldi	r24, 0x0C	; 12
    2a7c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_command>
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	a8 ec       	ldi	r26, 0xC8	; 200
    2a86:	b2 e4       	ldi	r27, 0x42	; 66
    2a88:	8d 8b       	std	Y+21, r24	; 0x15
    2a8a:	9e 8b       	std	Y+22, r25	; 0x16
    2a8c:	af 8b       	std	Y+23, r26	; 0x17
    2a8e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a90:	6d 89       	ldd	r22, Y+21	; 0x15
    2a92:	7e 89       	ldd	r23, Y+22	; 0x16
    2a94:	8f 89       	ldd	r24, Y+23	; 0x17
    2a96:	98 8d       	ldd	r25, Y+24	; 0x18
    2a98:	2b ea       	ldi	r18, 0xAB	; 171
    2a9a:	3a ea       	ldi	r19, 0xAA	; 170
    2a9c:	4a e2       	ldi	r20, 0x2A	; 42
    2a9e:	50 e4       	ldi	r21, 0x40	; 64
    2aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	89 8b       	std	Y+17, r24	; 0x11
    2aaa:	9a 8b       	std	Y+18, r25	; 0x12
    2aac:	ab 8b       	std	Y+19, r26	; 0x13
    2aae:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ab0:	69 89       	ldd	r22, Y+17	; 0x11
    2ab2:	7a 89       	ldd	r23, Y+18	; 0x12
    2ab4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	40 e8       	ldi	r20, 0x80	; 128
    2abe:	5f e3       	ldi	r21, 0x3F	; 63
    2ac0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ac4:	88 23       	and	r24, r24
    2ac6:	1c f4       	brge	.+6      	; 0x2ace <lcd_curcor_off+0x68>
		__ticks = 1;
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	88 8b       	std	Y+16, r24	; 0x10
    2acc:	91 c0       	rjmp	.+290    	; 0x2bf0 <lcd_curcor_off+0x18a>
	else if (__tmp > 255)
    2ace:	69 89       	ldd	r22, Y+17	; 0x11
    2ad0:	7a 89       	ldd	r23, Y+18	; 0x12
    2ad2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	4f e7       	ldi	r20, 0x7F	; 127
    2adc:	53 e4       	ldi	r21, 0x43	; 67
    2ade:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ae2:	18 16       	cp	r1, r24
    2ae4:	0c f0       	brlt	.+2      	; 0x2ae8 <lcd_curcor_off+0x82>
    2ae6:	7b c0       	rjmp	.+246    	; 0x2bde <lcd_curcor_off+0x178>
	{
		_delay_ms(__us / 1000.0);
    2ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    2aea:	7e 89       	ldd	r23, Y+22	; 0x16
    2aec:	8f 89       	ldd	r24, Y+23	; 0x17
    2aee:	98 8d       	ldd	r25, Y+24	; 0x18
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	4a e7       	ldi	r20, 0x7A	; 122
    2af6:	54 e4       	ldi	r21, 0x44	; 68
    2af8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	8c 87       	std	Y+12, r24	; 0x0c
    2b02:	9d 87       	std	Y+13, r25	; 0x0d
    2b04:	ae 87       	std	Y+14, r26	; 0x0e
    2b06:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b08:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b0a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	4a ef       	ldi	r20, 0xFA	; 250
    2b16:	54 e4       	ldi	r21, 0x44	; 68
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	88 87       	std	Y+8, r24	; 0x08
    2b22:	99 87       	std	Y+9, r25	; 0x09
    2b24:	aa 87       	std	Y+10, r26	; 0x0a
    2b26:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b28:	68 85       	ldd	r22, Y+8	; 0x08
    2b2a:	79 85       	ldd	r23, Y+9	; 0x09
    2b2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e8       	ldi	r20, 0x80	; 128
    2b36:	5f e3       	ldi	r21, 0x3F	; 63
    2b38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b3c:	88 23       	and	r24, r24
    2b3e:	2c f4       	brge	.+10     	; 0x2b4a <lcd_curcor_off+0xe4>
		__ticks = 1;
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	9f 83       	std	Y+7, r25	; 0x07
    2b46:	8e 83       	std	Y+6, r24	; 0x06
    2b48:	3f c0       	rjmp	.+126    	; 0x2bc8 <lcd_curcor_off+0x162>
	else if (__tmp > 65535)
    2b4a:	68 85       	ldd	r22, Y+8	; 0x08
    2b4c:	79 85       	ldd	r23, Y+9	; 0x09
    2b4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b50:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	3f ef       	ldi	r19, 0xFF	; 255
    2b56:	4f e7       	ldi	r20, 0x7F	; 127
    2b58:	57 e4       	ldi	r21, 0x47	; 71
    2b5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b5e:	18 16       	cp	r1, r24
    2b60:	4c f5       	brge	.+82     	; 0x2bb4 <lcd_curcor_off+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b62:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b64:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b66:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b68:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e2       	ldi	r20, 0x20	; 32
    2b70:	51 e4       	ldi	r21, 0x41	; 65
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	bc 01       	movw	r22, r24
    2b7c:	cd 01       	movw	r24, r26
    2b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	9f 83       	std	Y+7, r25	; 0x07
    2b88:	8e 83       	std	Y+6, r24	; 0x06
    2b8a:	0f c0       	rjmp	.+30     	; 0x2baa <lcd_curcor_off+0x144>
    2b8c:	88 ec       	ldi	r24, 0xC8	; 200
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9d 83       	std	Y+5, r25	; 0x05
    2b92:	8c 83       	std	Y+4, r24	; 0x04
    2b94:	8c 81       	ldd	r24, Y+4	; 0x04
    2b96:	9d 81       	ldd	r25, Y+5	; 0x05
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <lcd_curcor_off+0x132>
    2b9c:	9d 83       	std	Y+5, r25	; 0x05
    2b9e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	9f 83       	std	Y+7, r25	; 0x07
    2ba8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2baa:	8e 81       	ldd	r24, Y+6	; 0x06
    2bac:	9f 81       	ldd	r25, Y+7	; 0x07
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	69 f7       	brne	.-38     	; 0x2b8c <lcd_curcor_off+0x126>
    2bb2:	24 c0       	rjmp	.+72     	; 0x2bfc <lcd_curcor_off+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb4:	68 85       	ldd	r22, Y+8	; 0x08
    2bb6:	79 85       	ldd	r23, Y+9	; 0x09
    2bb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bba:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9f 83       	std	Y+7, r25	; 0x07
    2bc6:	8e 83       	std	Y+6, r24	; 0x06
    2bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bca:	9f 81       	ldd	r25, Y+7	; 0x07
    2bcc:	9b 83       	std	Y+3, r25	; 0x03
    2bce:	8a 83       	std	Y+2, r24	; 0x02
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <lcd_curcor_off+0x16e>
    2bd8:	9b 83       	std	Y+3, r25	; 0x03
    2bda:	8a 83       	std	Y+2, r24	; 0x02
    2bdc:	0f c0       	rjmp	.+30     	; 0x2bfc <lcd_curcor_off+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bde:	69 89       	ldd	r22, Y+17	; 0x11
    2be0:	7a 89       	ldd	r23, Y+18	; 0x12
    2be2:	8b 89       	ldd	r24, Y+19	; 0x13
    2be4:	9c 89       	ldd	r25, Y+20	; 0x14
    2be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	88 8b       	std	Y+16, r24	; 0x10
    2bf0:	88 89       	ldd	r24, Y+16	; 0x10
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	8a 95       	dec	r24
    2bf8:	f1 f7       	brne	.-4      	; 0x2bf6 <lcd_curcor_off+0x190>
    2bfa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    2bfc:	68 96       	adiw	r28, 0x18	; 24
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <main>:





int main(void){
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
lcd_init();
    2c16:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <lcd_init>
I2C_Init();
    2c1a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <I2C_Init>
	while(1){
	watch_display();
    2c1e:	0e 94 66 19 	call	0x32cc	; 0x32cc <watch_display>
    2c22:	fd cf       	rjmp	.-6      	; 0x2c1e <main+0x10>

00002c24 <Request>:



}
void Request()				/* Microcontroller send start pulse/request */
{
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	2e 97       	sbiw	r28, 0x0e	; 14
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
	DDRD |= (1<<DHT11_PIN);
    2c38:	a1 e3       	ldi	r26, 0x31	; 49
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e1 e3       	ldi	r30, 0x31	; 49
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	81 60       	ori	r24, 0x01	; 1
    2c44:	8c 93       	st	X, r24
	PORTD &= ~(1<<DHT11_PIN);	/* set to low pin */
    2c46:	a2 e3       	ldi	r26, 0x32	; 50
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	e2 e3       	ldi	r30, 0x32	; 50
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
    2c50:	8e 7f       	andi	r24, 0xFE	; 254
    2c52:	8c 93       	st	X, r24
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	a0 ea       	ldi	r26, 0xA0	; 160
    2c5a:	b1 e4       	ldi	r27, 0x41	; 65
    2c5c:	8b 87       	std	Y+11, r24	; 0x0b
    2c5e:	9c 87       	std	Y+12, r25	; 0x0c
    2c60:	ad 87       	std	Y+13, r26	; 0x0d
    2c62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	4a ef       	ldi	r20, 0xFA	; 250
    2c72:	54 e4       	ldi	r21, 0x44	; 68
    2c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	8f 83       	std	Y+7, r24	; 0x07
    2c7e:	98 87       	std	Y+8, r25	; 0x08
    2c80:	a9 87       	std	Y+9, r26	; 0x09
    2c82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c84:	6f 81       	ldd	r22, Y+7	; 0x07
    2c86:	78 85       	ldd	r23, Y+8	; 0x08
    2c88:	89 85       	ldd	r24, Y+9	; 0x09
    2c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e8       	ldi	r20, 0x80	; 128
    2c92:	5f e3       	ldi	r21, 0x3F	; 63
    2c94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c98:	88 23       	and	r24, r24
    2c9a:	2c f4       	brge	.+10     	; 0x2ca6 <Request+0x82>
		__ticks = 1;
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	8d 83       	std	Y+5, r24	; 0x05
    2ca4:	3f c0       	rjmp	.+126    	; 0x2d24 <Request+0x100>
	else if (__tmp > 65535)
    2ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca8:	78 85       	ldd	r23, Y+8	; 0x08
    2caa:	89 85       	ldd	r24, Y+9	; 0x09
    2cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	3f ef       	ldi	r19, 0xFF	; 255
    2cb2:	4f e7       	ldi	r20, 0x7F	; 127
    2cb4:	57 e4       	ldi	r21, 0x47	; 71
    2cb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cba:	18 16       	cp	r1, r24
    2cbc:	4c f5       	brge	.+82     	; 0x2d10 <Request+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e2       	ldi	r20, 0x20	; 32
    2ccc:	51 e4       	ldi	r21, 0x41	; 65
    2cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	9e 83       	std	Y+6, r25	; 0x06
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
    2ce6:	0f c0       	rjmp	.+30     	; 0x2d06 <Request+0xe2>
    2ce8:	88 ec       	ldi	r24, 0xC8	; 200
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	9c 83       	std	Y+4, r25	; 0x04
    2cee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	f1 f7       	brne	.-4      	; 0x2cf4 <Request+0xd0>
    2cf8:	9c 83       	std	Y+4, r25	; 0x04
    2cfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	9e 83       	std	Y+6, r25	; 0x06
    2d04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d06:	8d 81       	ldd	r24, Y+5	; 0x05
    2d08:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	69 f7       	brne	.-38     	; 0x2ce8 <Request+0xc4>
    2d0e:	14 c0       	rjmp	.+40     	; 0x2d38 <Request+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d10:	6f 81       	ldd	r22, Y+7	; 0x07
    2d12:	78 85       	ldd	r23, Y+8	; 0x08
    2d14:	89 85       	ldd	r24, Y+9	; 0x09
    2d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	8d 81       	ldd	r24, Y+5	; 0x05
    2d26:	9e 81       	ldd	r25, Y+6	; 0x06
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	89 83       	std	Y+1, r24	; 0x01
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	f1 f7       	brne	.-4      	; 0x2d30 <Request+0x10c>
    2d34:	9a 83       	std	Y+2, r25	; 0x02
    2d36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);			/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);	/* set to high pin */
    2d38:	a2 e3       	ldi	r26, 0x32	; 50
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	e2 e3       	ldi	r30, 0x32	; 50
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	81 60       	ori	r24, 0x01	; 1
    2d44:	8c 93       	st	X, r24
}
    2d46:	2e 96       	adiw	r28, 0x0e	; 14
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <Response>:
void Response()				/* receive response from DHT11 */
{
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~(1<<DHT11_PIN);
    2d60:	a1 e3       	ldi	r26, 0x31	; 49
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e1 e3       	ldi	r30, 0x31	; 49
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	8e 7f       	andi	r24, 0xFE	; 254
    2d6c:	8c 93       	st	X, r24
	while(PIND & (1<<DHT11_PIN));
    2d6e:	e0 e3       	ldi	r30, 0x30	; 48
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	88 2f       	mov	r24, r24
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	81 70       	andi	r24, 0x01	; 1
    2d7a:	90 70       	andi	r25, 0x00	; 0
    2d7c:	88 23       	and	r24, r24
    2d7e:	b9 f7       	brne	.-18     	; 0x2d6e <Response+0x16>
	while((PIND & (1<<DHT11_PIN))==0);
    2d80:	e0 e3       	ldi	r30, 0x30	; 48
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	88 2f       	mov	r24, r24
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	81 70       	andi	r24, 0x01	; 1
    2d8c:	90 70       	andi	r25, 0x00	; 0
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	b9 f3       	breq	.-18     	; 0x2d80 <Response+0x28>
	while(PIND & (1<<DHT11_PIN));
    2d92:	e0 e3       	ldi	r30, 0x30	; 48
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	88 2f       	mov	r24, r24
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	81 70       	andi	r24, 0x01	; 1
    2d9e:	90 70       	andi	r25, 0x00	; 0
    2da0:	88 23       	and	r24, r24
    2da2:	b9 f7       	brne	.-18     	; 0x2d92 <Response+0x3a>
}
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <Receive_data>:
uint8_t Receive_data()			/* receive data */
{
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	6a 97       	sbiw	r28, 0x1a	; 26
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
	for (int q=0; q<8; q++)
    2dbe:	1a 8e       	std	Y+26, r1	; 0x1a
    2dc0:	19 8e       	std	Y+25, r1	; 0x19
    2dc2:	f2 c0       	rjmp	.+484    	; 0x2fa8 <Receive_data+0x1fe>
	{
		while((PIND & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
    2dc4:	e0 e3       	ldi	r30, 0x30	; 48
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	88 2f       	mov	r24, r24
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	81 70       	andi	r24, 0x01	; 1
    2dd0:	90 70       	andi	r25, 0x00	; 0
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	b9 f3       	breq	.-18     	; 0x2dc4 <Receive_data+0x1a>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	a0 ef       	ldi	r26, 0xF0	; 240
    2ddc:	b1 e4       	ldi	r27, 0x41	; 65
    2dde:	8d 8b       	std	Y+21, r24	; 0x15
    2de0:	9e 8b       	std	Y+22, r25	; 0x16
    2de2:	af 8b       	std	Y+23, r26	; 0x17
    2de4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2de6:	6d 89       	ldd	r22, Y+21	; 0x15
    2de8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dea:	8f 89       	ldd	r24, Y+23	; 0x17
    2dec:	98 8d       	ldd	r25, Y+24	; 0x18
    2dee:	2b ea       	ldi	r18, 0xAB	; 171
    2df0:	3a ea       	ldi	r19, 0xAA	; 170
    2df2:	4a e2       	ldi	r20, 0x2A	; 42
    2df4:	50 e4       	ldi	r21, 0x40	; 64
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	89 8b       	std	Y+17, r24	; 0x11
    2e00:	9a 8b       	std	Y+18, r25	; 0x12
    2e02:	ab 8b       	std	Y+19, r26	; 0x13
    2e04:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e06:	69 89       	ldd	r22, Y+17	; 0x11
    2e08:	7a 89       	ldd	r23, Y+18	; 0x12
    2e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e8       	ldi	r20, 0x80	; 128
    2e14:	5f e3       	ldi	r21, 0x3F	; 63
    2e16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e1a:	88 23       	and	r24, r24
    2e1c:	1c f4       	brge	.+6      	; 0x2e24 <Receive_data+0x7a>
		__ticks = 1;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	88 8b       	std	Y+16, r24	; 0x10
    2e22:	91 c0       	rjmp	.+290    	; 0x2f46 <Receive_data+0x19c>
	else if (__tmp > 255)
    2e24:	69 89       	ldd	r22, Y+17	; 0x11
    2e26:	7a 89       	ldd	r23, Y+18	; 0x12
    2e28:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	4f e7       	ldi	r20, 0x7F	; 127
    2e32:	53 e4       	ldi	r21, 0x43	; 67
    2e34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e38:	18 16       	cp	r1, r24
    2e3a:	0c f0       	brlt	.+2      	; 0x2e3e <Receive_data+0x94>
    2e3c:	7b c0       	rjmp	.+246    	; 0x2f34 <Receive_data+0x18a>
	{
		_delay_ms(__us / 1000.0);
    2e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e40:	7e 89       	ldd	r23, Y+22	; 0x16
    2e42:	8f 89       	ldd	r24, Y+23	; 0x17
    2e44:	98 8d       	ldd	r25, Y+24	; 0x18
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	4a e7       	ldi	r20, 0x7A	; 122
    2e4c:	54 e4       	ldi	r21, 0x44	; 68
    2e4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	8c 87       	std	Y+12, r24	; 0x0c
    2e58:	9d 87       	std	Y+13, r25	; 0x0d
    2e5a:	ae 87       	std	Y+14, r26	; 0x0e
    2e5c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e60:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e62:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e64:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	4a ef       	ldi	r20, 0xFA	; 250
    2e6c:	54 e4       	ldi	r21, 0x44	; 68
    2e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	88 87       	std	Y+8, r24	; 0x08
    2e78:	99 87       	std	Y+9, r25	; 0x09
    2e7a:	aa 87       	std	Y+10, r26	; 0x0a
    2e7c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e7e:	68 85       	ldd	r22, Y+8	; 0x08
    2e80:	79 85       	ldd	r23, Y+9	; 0x09
    2e82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e84:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e8       	ldi	r20, 0x80	; 128
    2e8c:	5f e3       	ldi	r21, 0x3F	; 63
    2e8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e92:	88 23       	and	r24, r24
    2e94:	2c f4       	brge	.+10     	; 0x2ea0 <Receive_data+0xf6>
		__ticks = 1;
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	9f 83       	std	Y+7, r25	; 0x07
    2e9c:	8e 83       	std	Y+6, r24	; 0x06
    2e9e:	3f c0       	rjmp	.+126    	; 0x2f1e <Receive_data+0x174>
	else if (__tmp > 65535)
    2ea0:	68 85       	ldd	r22, Y+8	; 0x08
    2ea2:	79 85       	ldd	r23, Y+9	; 0x09
    2ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	3f ef       	ldi	r19, 0xFF	; 255
    2eac:	4f e7       	ldi	r20, 0x7F	; 127
    2eae:	57 e4       	ldi	r21, 0x47	; 71
    2eb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eb4:	18 16       	cp	r1, r24
    2eb6:	4c f5       	brge	.+82     	; 0x2f0a <Receive_data+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2eba:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ebc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ebe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e2       	ldi	r20, 0x20	; 32
    2ec6:	51 e4       	ldi	r21, 0x41	; 65
    2ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	bc 01       	movw	r22, r24
    2ed2:	cd 01       	movw	r24, r26
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9f 83       	std	Y+7, r25	; 0x07
    2ede:	8e 83       	std	Y+6, r24	; 0x06
    2ee0:	0f c0       	rjmp	.+30     	; 0x2f00 <Receive_data+0x156>
    2ee2:	88 ec       	ldi	r24, 0xC8	; 200
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	9d 83       	std	Y+5, r25	; 0x05
    2ee8:	8c 83       	std	Y+4, r24	; 0x04
    2eea:	8c 81       	ldd	r24, Y+4	; 0x04
    2eec:	9d 81       	ldd	r25, Y+5	; 0x05
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	f1 f7       	brne	.-4      	; 0x2eee <Receive_data+0x144>
    2ef2:	9d 83       	std	Y+5, r25	; 0x05
    2ef4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef8:	9f 81       	ldd	r25, Y+7	; 0x07
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	9f 83       	std	Y+7, r25	; 0x07
    2efe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f00:	8e 81       	ldd	r24, Y+6	; 0x06
    2f02:	9f 81       	ldd	r25, Y+7	; 0x07
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	69 f7       	brne	.-38     	; 0x2ee2 <Receive_data+0x138>
    2f08:	24 c0       	rjmp	.+72     	; 0x2f52 <Receive_data+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0a:	68 85       	ldd	r22, Y+8	; 0x08
    2f0c:	79 85       	ldd	r23, Y+9	; 0x09
    2f0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f10:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	9f 83       	std	Y+7, r25	; 0x07
    2f1c:	8e 83       	std	Y+6, r24	; 0x06
    2f1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f20:	9f 81       	ldd	r25, Y+7	; 0x07
    2f22:	9b 83       	std	Y+3, r25	; 0x03
    2f24:	8a 83       	std	Y+2, r24	; 0x02
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <Receive_data+0x180>
    2f2e:	9b 83       	std	Y+3, r25	; 0x03
    2f30:	8a 83       	std	Y+2, r24	; 0x02
    2f32:	0f c0       	rjmp	.+30     	; 0x2f52 <Receive_data+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f34:	69 89       	ldd	r22, Y+17	; 0x11
    2f36:	7a 89       	ldd	r23, Y+18	; 0x12
    2f38:	8b 89       	ldd	r24, Y+19	; 0x13
    2f3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	88 8b       	std	Y+16, r24	; 0x10
    2f46:	88 89       	ldd	r24, Y+16	; 0x10
    2f48:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	8a 95       	dec	r24
    2f4e:	f1 f7       	brne	.-4      	; 0x2f4c <Receive_data+0x1a2>
    2f50:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))/* if high pulse is greater than 30ms */
    2f52:	e0 e3       	ldi	r30, 0x30	; 48
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	88 2f       	mov	r24, r24
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	81 70       	andi	r24, 0x01	; 1
    2f5e:	90 70       	andi	r25, 0x00	; 0
    2f60:	88 23       	and	r24, r24
    2f62:	59 f0       	breq	.+22     	; 0x2f7a <Receive_data+0x1d0>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
    2f64:	80 91 fc 00 	lds	r24, 0x00FC
    2f68:	99 27       	eor	r25, r25
    2f6a:	87 fd       	sbrc	r24, 7
    2f6c:	90 95       	com	r25
    2f6e:	88 0f       	add	r24, r24
    2f70:	99 1f       	adc	r25, r25
    2f72:	81 60       	ori	r24, 0x01	; 1
    2f74:	80 93 fc 00 	sts	0x00FC, r24
    2f78:	09 c0       	rjmp	.+18     	; 0x2f8c <Receive_data+0x1e2>
		else			/* otherwise its logic LOW */
		c = (c<<1);
    2f7a:	80 91 fc 00 	lds	r24, 0x00FC
    2f7e:	99 27       	eor	r25, r25
    2f80:	87 fd       	sbrc	r24, 7
    2f82:	90 95       	com	r25
    2f84:	88 0f       	add	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	80 93 fc 00 	sts	0x00FC, r24
		while(PIND & (1<<DHT11_PIN));
    2f8c:	e0 e3       	ldi	r30, 0x30	; 48
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	88 2f       	mov	r24, r24
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	81 70       	andi	r24, 0x01	; 1
    2f98:	90 70       	andi	r25, 0x00	; 0
    2f9a:	88 23       	and	r24, r24
    2f9c:	b9 f7       	brne	.-18     	; 0x2f8c <Receive_data+0x1e2>
	while((PIND & (1<<DHT11_PIN))==0);
	while(PIND & (1<<DHT11_PIN));
}
uint8_t Receive_data()			/* receive data */
{
	for (int q=0; q<8; q++)
    2f9e:	89 8d       	ldd	r24, Y+25	; 0x19
    2fa0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fa2:	01 96       	adiw	r24, 0x01	; 1
    2fa4:	9a 8f       	std	Y+26, r25	; 0x1a
    2fa6:	89 8f       	std	Y+25, r24	; 0x19
    2fa8:	89 8d       	ldd	r24, Y+25	; 0x19
    2faa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fac:	88 30       	cpi	r24, 0x08	; 8
    2fae:	91 05       	cpc	r25, r1
    2fb0:	0c f4       	brge	.+2      	; 0x2fb4 <Receive_data+0x20a>
    2fb2:	08 cf       	rjmp	.-496    	; 0x2dc4 <Receive_data+0x1a>
		c = (c<<1)|(0x01);	/* then its logic HIGH */
		else			/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
    2fb4:	80 91 fc 00 	lds	r24, 0x00FC
}
    2fb8:	6a 96       	adiw	r28, 0x1a	; 26
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	08 95       	ret

00002fca <T_H_display>:
void T_H_display(){
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	60 97       	sbiw	r28, 0x10	; 16
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
	int CheckSum;

	Request();
    2fde:	0e 94 12 16 	call	0x2c24	; 0x2c24 <Request>
			Response();
    2fe2:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <Response>
			I_RH=Receive_data();	/* store first eight bit in I_RH */
    2fe6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <Receive_data>
    2fea:	80 93 20 01 	sts	0x0120, r24
			D_RH=Receive_data();	/* store next eight bit in D_RH */
    2fee:	0e 94 d5 16 	call	0x2daa	; 0x2daa <Receive_data>
    2ff2:	80 93 1b 01 	sts	0x011B, r24
			I_Temp=Receive_data();	/* store next eight bit in I_Temp */
    2ff6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <Receive_data>
    2ffa:	80 93 1f 01 	sts	0x011F, r24
			D_Temp=Receive_data();	/* store next eight bit in D_Temp */
    2ffe:	0e 94 d5 16 	call	0x2daa	; 0x2daa <Receive_data>
    3002:	80 93 22 01 	sts	0x0122, r24
			CheckSum=Receive_data();/* store next eight bit in CheckSum */
    3006:	0e 94 d5 16 	call	0x2daa	; 0x2daa <Receive_data>
    300a:	88 2f       	mov	r24, r24
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	98 8b       	std	Y+16, r25	; 0x10
    3010:	8f 87       	std	Y+15, r24	; 0x0f
			itoa(I_RH,rh,10);
    3012:	80 91 20 01 	lds	r24, 0x0120
    3016:	99 27       	eor	r25, r25
    3018:	87 fd       	sbrc	r24, 7
    301a:	90 95       	com	r25
    301c:	29 e0       	ldi	r18, 0x09	; 9
    301e:	31 e0       	ldi	r19, 0x01	; 1
    3020:	b9 01       	movw	r22, r18
    3022:	4a e0       	ldi	r20, 0x0A	; 10
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <itoa>
			lcd_print("humidity=");
    302a:	88 ea       	ldi	r24, 0xA8	; 168
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	0e 94 8e 14 	call	0x291c	; 0x291c <lcd_print>
			lcd_goto_xy(1,10);
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	6a e0       	ldi	r22, 0x0A	; 10
    3036:	0e 94 a2 13 	call	0x2744	; 0x2744 <lcd_goto_xy>
			lcd_print(rh);
    303a:	89 e0       	ldi	r24, 0x09	; 9
    303c:	91 e0       	ldi	r25, 0x01	; 1
    303e:	0e 94 8e 14 	call	0x291c	; 0x291c <lcd_print>
			lcd_goto_xy(2,1);
    3042:	82 e0       	ldi	r24, 0x02	; 2
    3044:	61 e0       	ldi	r22, 0x01	; 1
    3046:	0e 94 a2 13 	call	0x2744	; 0x2744 <lcd_goto_xy>
			lcd_print("temperate=");
    304a:	82 eb       	ldi	r24, 0xB2	; 178
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	0e 94 8e 14 	call	0x291c	; 0x291c <lcd_print>
			lcd_goto_xy(2,11);
    3052:	82 e0       	ldi	r24, 0x02	; 2
    3054:	6b e0       	ldi	r22, 0x0B	; 11
    3056:	0e 94 a2 13 	call	0x2744	; 0x2744 <lcd_goto_xy>
			itoa(I_Temp,temp,10);
    305a:	80 91 1f 01 	lds	r24, 0x011F
    305e:	99 27       	eor	r25, r25
    3060:	87 fd       	sbrc	r24, 7
    3062:	90 95       	com	r25
    3064:	22 e0       	ldi	r18, 0x02	; 2
    3066:	31 e0       	ldi	r19, 0x01	; 1
    3068:	b9 01       	movw	r22, r18
    306a:	4a e0       	ldi	r20, 0x0A	; 10
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <itoa>
			lcd_print(temp);
    3072:	82 e0       	ldi	r24, 0x02	; 2
    3074:	91 e0       	ldi	r25, 0x01	; 1
    3076:	0e 94 8e 14 	call	0x291c	; 0x291c <lcd_print>
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	aa ef       	ldi	r26, 0xFA	; 250
    3080:	b3 e4       	ldi	r27, 0x43	; 67
    3082:	8b 87       	std	Y+11, r24	; 0x0b
    3084:	9c 87       	std	Y+12, r25	; 0x0c
    3086:	ad 87       	std	Y+13, r26	; 0x0d
    3088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    308a:	6b 85       	ldd	r22, Y+11	; 0x0b
    308c:	7c 85       	ldd	r23, Y+12	; 0x0c
    308e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3090:	9e 85       	ldd	r25, Y+14	; 0x0e
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	4a ef       	ldi	r20, 0xFA	; 250
    3098:	54 e4       	ldi	r21, 0x44	; 68
    309a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	8f 83       	std	Y+7, r24	; 0x07
    30a4:	98 87       	std	Y+8, r25	; 0x08
    30a6:	a9 87       	std	Y+9, r26	; 0x09
    30a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30aa:	6f 81       	ldd	r22, Y+7	; 0x07
    30ac:	78 85       	ldd	r23, Y+8	; 0x08
    30ae:	89 85       	ldd	r24, Y+9	; 0x09
    30b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e8       	ldi	r20, 0x80	; 128
    30b8:	5f e3       	ldi	r21, 0x3F	; 63
    30ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30be:	88 23       	and	r24, r24
    30c0:	2c f4       	brge	.+10     	; 0x30cc <T_H_display+0x102>
		__ticks = 1;
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	9e 83       	std	Y+6, r25	; 0x06
    30c8:	8d 83       	std	Y+5, r24	; 0x05
    30ca:	3f c0       	rjmp	.+126    	; 0x314a <T_H_display+0x180>
	else if (__tmp > 65535)
    30cc:	6f 81       	ldd	r22, Y+7	; 0x07
    30ce:	78 85       	ldd	r23, Y+8	; 0x08
    30d0:	89 85       	ldd	r24, Y+9	; 0x09
    30d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	3f ef       	ldi	r19, 0xFF	; 255
    30d8:	4f e7       	ldi	r20, 0x7F	; 127
    30da:	57 e4       	ldi	r21, 0x47	; 71
    30dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30e0:	18 16       	cp	r1, r24
    30e2:	4c f5       	brge	.+82     	; 0x3136 <T_H_display+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e2       	ldi	r20, 0x20	; 32
    30f2:	51 e4       	ldi	r21, 0x41	; 65
    30f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	bc 01       	movw	r22, r24
    30fe:	cd 01       	movw	r24, r26
    3100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	9e 83       	std	Y+6, r25	; 0x06
    310a:	8d 83       	std	Y+5, r24	; 0x05
    310c:	0f c0       	rjmp	.+30     	; 0x312c <T_H_display+0x162>
    310e:	88 ec       	ldi	r24, 0xC8	; 200
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	9c 83       	std	Y+4, r25	; 0x04
    3114:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3116:	8b 81       	ldd	r24, Y+3	; 0x03
    3118:	9c 81       	ldd	r25, Y+4	; 0x04
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	f1 f7       	brne	.-4      	; 0x311a <T_H_display+0x150>
    311e:	9c 83       	std	Y+4, r25	; 0x04
    3120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3122:	8d 81       	ldd	r24, Y+5	; 0x05
    3124:	9e 81       	ldd	r25, Y+6	; 0x06
    3126:	01 97       	sbiw	r24, 0x01	; 1
    3128:	9e 83       	std	Y+6, r25	; 0x06
    312a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312c:	8d 81       	ldd	r24, Y+5	; 0x05
    312e:	9e 81       	ldd	r25, Y+6	; 0x06
    3130:	00 97       	sbiw	r24, 0x00	; 0
    3132:	69 f7       	brne	.-38     	; 0x310e <T_H_display+0x144>
    3134:	14 c0       	rjmp	.+40     	; 0x315e <T_H_display+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3136:	6f 81       	ldd	r22, Y+7	; 0x07
    3138:	78 85       	ldd	r23, Y+8	; 0x08
    313a:	89 85       	ldd	r24, Y+9	; 0x09
    313c:	9a 85       	ldd	r25, Y+10	; 0x0a
    313e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	9e 83       	std	Y+6, r25	; 0x06
    3148:	8d 83       	std	Y+5, r24	; 0x05
    314a:	8d 81       	ldd	r24, Y+5	; 0x05
    314c:	9e 81       	ldd	r25, Y+6	; 0x06
    314e:	9a 83       	std	Y+2, r25	; 0x02
    3150:	89 83       	std	Y+1, r24	; 0x01
    3152:	89 81       	ldd	r24, Y+1	; 0x01
    3154:	9a 81       	ldd	r25, Y+2	; 0x02
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <T_H_display+0x18c>
    315a:	9a 83       	std	Y+2, r25	; 0x02
    315c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			lcd_CLEAR();
    315e:	0e 94 ab 14 	call	0x2956	; 0x2956 <lcd_CLEAR>
}
    3162:	60 96       	adiw	r28, 0x10	; 16
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	de bf       	out	0x3e, r29	; 62
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	cd bf       	out	0x3d, r28	; 61
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	08 95       	ret

00003174 <RTC_Read_Clock>:

void RTC_Read_Clock(char read_clock_address)
{
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	0f 92       	push	r0
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
    317e:	89 83       	std	Y+1, r24	; 0x01
	I2C_Start(Device_Write_address);/* Start I2C communication with RTC */
    3180:	80 ed       	ldi	r24, 0xD0	; 208
    3182:	0e 94 73 06 	call	0xce6	; 0xce6 <I2C_Start>
	I2C_Write(read_clock_address);	/* Write address to read */
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	0e 94 f5 06 	call	0xdea	; 0xdea <I2C_Write>
	I2C_Repeated_Start(Device_Read_address);/* Repeated start with device read address */
    318c:	81 ed       	ldi	r24, 0xD1	; 209
    318e:	0e 94 b4 06 	call	0xd68	; 0xd68 <I2C_Repeated_Start>

	second = I2C_Read_Ack();	/* Read second */
    3192:	0e 94 22 07 	call	0xe44	; 0xe44 <I2C_Read_Ack>
    3196:	80 93 07 01 	sts	0x0107, r24
	minute = I2C_Read_Ack();	/* Read minute */
    319a:	0e 94 22 07 	call	0xe44	; 0xe44 <I2C_Read_Ack>
    319e:	80 93 08 01 	sts	0x0108, r24
	hour = I2C_Read_Nack();		/* Read hour with Nack */
    31a2:	0e 94 35 07 	call	0xe6a	; 0xe6a <I2C_Read_Nack>
    31a6:	80 93 11 01 	sts	0x0111, r24
	I2C_Stop();			/* Stop i2C communication */
    31aa:	0e 94 48 07 	call	0xe90	; 0xe90 <I2C_Stop>
}
    31ae:	0f 90       	pop	r0
    31b0:	cf 91       	pop	r28
    31b2:	df 91       	pop	r29
    31b4:	08 95       	ret

000031b6 <RTC_Clock_Write>:
/* function for clock */

void RTC_Clock_Write(char _hour, char _minute, char _second,char timeformat)
{
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	00 d0       	rcall	.+0      	; 0x31bc <RTC_Clock_Write+0x6>
    31bc:	00 d0       	rcall	.+0      	; 0x31be <RTC_Clock_Write+0x8>
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	89 83       	std	Y+1, r24	; 0x01
    31c4:	6a 83       	std	Y+2, r22	; 0x02
    31c6:	4b 83       	std	Y+3, r20	; 0x03
    31c8:	2c 83       	std	Y+4, r18	; 0x04
	_hour=timeformat|_hour;               // ox00 for 24 ,0x40 for AM ,0x60 for PM
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	9c 81       	ldd	r25, Y+4	; 0x04
    31ce:	89 2b       	or	r24, r25
    31d0:	89 83       	std	Y+1, r24	; 0x01
	I2C_Start(Device_Write_address);/* Start I2C communication with RTC */
    31d2:	80 ed       	ldi	r24, 0xD0	; 208
    31d4:	0e 94 73 06 	call	0xce6	; 0xce6 <I2C_Start>
	I2C_Write(0x00);			/* Write 0 address for second */
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	0e 94 f5 06 	call	0xdea	; 0xdea <I2C_Write>
	I2C_Write(_second);		/* Write second on 00 location */
    31de:	8b 81       	ldd	r24, Y+3	; 0x03
    31e0:	0e 94 f5 06 	call	0xdea	; 0xdea <I2C_Write>
	I2C_Write(_minute);		/* Write minute on 01(auto increment) location */
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
    31e6:	0e 94 f5 06 	call	0xdea	; 0xdea <I2C_Write>
	I2C_Write(_hour);		/* Write hour on 02 location */
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	0e 94 f5 06 	call	0xdea	; 0xdea <I2C_Write>
	I2C_Stop();			/* Stop I2C communication */
    31f0:	0e 94 48 07 	call	0xe90	; 0xe90 <I2C_Stop>
}
    31f4:	0f 90       	pop	r0
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	08 95       	ret

00003202 <RTC_Calendar_Write>:
/* function for calendar */
void RTC_Calendar_Write(char _day, char _date, char _month, char _year)
{
    3202:	df 93       	push	r29
    3204:	cf 93       	push	r28
    3206:	00 d0       	rcall	.+0      	; 0x3208 <RTC_Calendar_Write+0x6>
    3208:	00 d0       	rcall	.+0      	; 0x320a <RTC_Calendar_Write+0x8>
    320a:	cd b7       	in	r28, 0x3d	; 61
    320c:	de b7       	in	r29, 0x3e	; 62
    320e:	89 83       	std	Y+1, r24	; 0x01
    3210:	6a 83       	std	Y+2, r22	; 0x02
    3212:	4b 83       	std	Y+3, r20	; 0x03
    3214:	2c 83       	std	Y+4, r18	; 0x04
	I2C_Start(Device_Write_address);/* Start I2C communication with RTC */
    3216:	80 ed       	ldi	r24, 0xD0	; 208
    3218:	0e 94 73 06 	call	0xce6	; 0xce6 <I2C_Start>
	I2C_Write(0x03);			/* Write 3 address for day */
    321c:	83 e0       	ldi	r24, 0x03	; 3
    321e:	0e 94 f5 06 	call	0xdea	; 0xdea <I2C_Write>
	I2C_Write(_day);		/* Write day on 03 location */
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	0e 94 f5 06 	call	0xdea	; 0xdea <I2C_Write>
	I2C_Write(_date);		/* Write date on 04 location */
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	0e 94 f5 06 	call	0xdea	; 0xdea <I2C_Write>
	I2C_Write(_month);		/* Write month on 05 location */
    322e:	8b 81       	ldd	r24, Y+3	; 0x03
    3230:	0e 94 f5 06 	call	0xdea	; 0xdea <I2C_Write>
	I2C_Write(_year);		/* Write year on 06 location */
    3234:	8c 81       	ldd	r24, Y+4	; 0x04
    3236:	0e 94 f5 06 	call	0xdea	; 0xdea <I2C_Write>
	I2C_Stop();			/* Stop I2C communication */
    323a:	0e 94 48 07 	call	0xe90	; 0xe90 <I2C_Stop>
}
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	08 95       	ret

0000324c <RTC_Read_Calendar>:

void RTC_Read_Calendar(char read_calendar_address)
{
    324c:	df 93       	push	r29
    324e:	cf 93       	push	r28
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	89 83       	std	Y+1, r24	; 0x01
	I2C_Start(Device_Write_address);
    3258:	80 ed       	ldi	r24, 0xD0	; 208
    325a:	0e 94 73 06 	call	0xce6	; 0xce6 <I2C_Start>
	I2C_Write(read_calendar_address);
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	0e 94 f5 06 	call	0xdea	; 0xdea <I2C_Write>
	I2C_Repeated_Start(Device_Read_address);
    3264:	81 ed       	ldi	r24, 0xD1	; 209
    3266:	0e 94 b4 06 	call	0xd68	; 0xd68 <I2C_Repeated_Start>

	day = I2C_Read_Ack();		/* Read day */
    326a:	0e 94 22 07 	call	0xe44	; 0xe44 <I2C_Read_Ack>
    326e:	80 93 21 01 	sts	0x0121, r24
	date = I2C_Read_Ack();		/* Read date */
    3272:	0e 94 22 07 	call	0xe44	; 0xe44 <I2C_Read_Ack>
    3276:	80 93 23 01 	sts	0x0123, r24
	month = I2C_Read_Ack();		/* Read month */
    327a:	0e 94 22 07 	call	0xe44	; 0xe44 <I2C_Read_Ack>
    327e:	80 93 01 01 	sts	0x0101, r24
	year = I2C_Read_Nack();		/* Read the year with Nack */
    3282:	0e 94 35 07 	call	0xe6a	; 0xe6a <I2C_Read_Nack>
    3286:	80 93 1e 01 	sts	0x011E, r24
	I2C_Stop();			/* Stop i2C communication */
    328a:	0e 94 48 07 	call	0xe90	; 0xe90 <I2C_Stop>
}
    328e:	0f 90       	pop	r0
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	08 95       	ret

00003296 <LSB>:
unsigned char LSB(unsigned char X){
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	0f 92       	push	r0
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	89 83       	std	Y+1, r24	; 0x01
	return((X&0X0F) +'0');
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	8f 70       	andi	r24, 0x0F	; 15
    32a6:	80 5d       	subi	r24, 0xD0	; 208
}
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <MSB>:
unsigned char MSB(unsigned char x){
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	0f 92       	push	r0
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	89 83       	std	Y+1, r24	; 0x01
	return((x>>4) +'0' );
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
    32be:	82 95       	swap	r24
    32c0:	8f 70       	andi	r24, 0x0F	; 15
    32c2:	80 5d       	subi	r24, 0xD0	; 208
}
    32c4:	0f 90       	pop	r0
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <watch_display>:
/*void watch_set(){
	RTC_Clock_Write();
	RTC_Calendar_Write();
}
*/
void watch_display(){
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
    32d4:	2e 97       	sbiw	r28, 0x0e	; 14
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	f8 94       	cli
    32da:	de bf       	out	0x3e, r29	; 62
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	cd bf       	out	0x3d, r28	; 61
	RTC_Read_Clock(0x00);
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	0e 94 ba 18 	call	0x3174	; 0x3174 <RTC_Read_Clock>
		  time[0]=MSB(hour&0b00011111);
    32e6:	80 91 11 01 	lds	r24, 0x0111
    32ea:	8f 71       	andi	r24, 0x1F	; 31
    32ec:	0e 94 58 19 	call	0x32b0	; 0x32b0 <MSB>
    32f0:	80 93 12 01 	sts	0x0112, r24
		  time[1]=LSB(hour);
    32f4:	80 91 11 01 	lds	r24, 0x0111
    32f8:	0e 94 4b 19 	call	0x3296	; 0x3296 <LSB>
    32fc:	80 93 13 01 	sts	0x0113, r24
			  if ((hour&(1<<5)))
    3300:	80 91 11 01 	lds	r24, 0x0111
    3304:	88 2f       	mov	r24, r24
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	80 72       	andi	r24, 0x20	; 32
    330a:	90 70       	andi	r25, 0x00	; 0
    330c:	00 97       	sbiw	r24, 0x00	; 0
    330e:	49 f0       	breq	.+18     	; 0x3322 <watch_display+0x56>
			{ lcd_goto_xy(1,15);
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	6f e0       	ldi	r22, 0x0F	; 15
    3314:	0e 94 a2 13 	call	0x2744	; 0x2744 <lcd_goto_xy>
			lcd_print("PM");}
    3318:	8d eb       	ldi	r24, 0xBD	; 189
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	0e 94 8e 14 	call	0x291c	; 0x291c <lcd_print>
    3320:	10 c0       	rjmp	.+32     	; 0x3342 <watch_display+0x76>
	        else if (!(hour&(1<<5)))
    3322:	80 91 11 01 	lds	r24, 0x0111
    3326:	88 2f       	mov	r24, r24
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	80 72       	andi	r24, 0x20	; 32
    332c:	90 70       	andi	r25, 0x00	; 0
    332e:	00 97       	sbiw	r24, 0x00	; 0
    3330:	41 f4       	brne	.+16     	; 0x3342 <watch_display+0x76>
			{
			lcd_goto_xy(1,15);
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	6f e0       	ldi	r22, 0x0F	; 15
    3336:	0e 94 a2 13 	call	0x2744	; 0x2744 <lcd_goto_xy>
			lcd_print("AM");}
    333a:	80 ec       	ldi	r24, 0xC0	; 192
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	0e 94 8e 14 	call	0x291c	; 0x291c <lcd_print>
		  time[2]=':';
    3342:	8a e3       	ldi	r24, 0x3A	; 58
    3344:	80 93 14 01 	sts	0x0114, r24
		  time[3]=MSB(minute);
    3348:	80 91 08 01 	lds	r24, 0x0108
    334c:	0e 94 58 19 	call	0x32b0	; 0x32b0 <MSB>
    3350:	80 93 15 01 	sts	0x0115, r24
		  time[4]=LSB(minute);
    3354:	80 91 08 01 	lds	r24, 0x0108
    3358:	0e 94 4b 19 	call	0x3296	; 0x3296 <LSB>
    335c:	80 93 16 01 	sts	0x0116, r24
		  time[5]=':';
    3360:	8a e3       	ldi	r24, 0x3A	; 58
    3362:	80 93 17 01 	sts	0x0117, r24
		  time[6]=MSB(second);
    3366:	80 91 07 01 	lds	r24, 0x0107
    336a:	0e 94 58 19 	call	0x32b0	; 0x32b0 <MSB>
    336e:	80 93 18 01 	sts	0x0118, r24
		  time[7]=LSB(second);
    3372:	80 91 07 01 	lds	r24, 0x0107
    3376:	0e 94 4b 19 	call	0x3296	; 0x3296 <LSB>
    337a:	80 93 19 01 	sts	0x0119, r24
		  lcd_goto_xy(1,1);
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	61 e0       	ldi	r22, 0x01	; 1
    3382:	0e 94 a2 13 	call	0x2744	; 0x2744 <lcd_goto_xy>
		  lcd_print("TIME:");
    3386:	83 ec       	ldi	r24, 0xC3	; 195
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 8e 14 	call	0x291c	; 0x291c <lcd_print>
		    lcd_goto_xy(1,6);
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	66 e0       	ldi	r22, 0x06	; 6
    3392:	0e 94 a2 13 	call	0x2744	; 0x2744 <lcd_goto_xy>
			lcd_print(time);
    3396:	82 e1       	ldi	r24, 0x12	; 18
    3398:	91 e0       	ldi	r25, 0x01	; 1
    339a:	0e 94 8e 14 	call	0x291c	; 0x291c <lcd_print>
			RTC_Read_Calendar(0x03);
    339e:	83 e0       	ldi	r24, 0x03	; 3
    33a0:	0e 94 26 19 	call	0x324c	; 0x324c <RTC_Read_Calendar>
			  d=day;
    33a4:	80 91 21 01 	lds	r24, 0x0121
    33a8:	88 2f       	mov	r24, r24
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	90 93 1d 01 	sts	0x011D, r25
    33b0:	80 93 1c 01 	sts	0x011C, r24
			  lcd_goto_xy(2,1);
    33b4:	82 e0       	ldi	r24, 0x02	; 2
    33b6:	61 e0       	ldi	r22, 0x01	; 1
    33b8:	0e 94 a2 13 	call	0x2744	; 0x2744 <lcd_goto_xy>
			  lcd_print(days[d-1]);
    33bc:	80 91 1c 01 	lds	r24, 0x011C
    33c0:	90 91 1d 01 	lds	r25, 0x011D
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	88 0f       	add	r24, r24
    33c8:	99 1f       	adc	r25, r25
    33ca:	fc 01       	movw	r30, r24
    33cc:	e5 51       	subi	r30, 0x15	; 21
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	80 81       	ld	r24, Z
    33d2:	91 81       	ldd	r25, Z+1	; 0x01
    33d4:	0e 94 8e 14 	call	0x291c	; 0x291c <lcd_print>
			  dat[0]=MSB(date);
    33d8:	80 91 23 01 	lds	r24, 0x0123
    33dc:	0e 94 58 19 	call	0x32b0	; 0x32b0 <MSB>
    33e0:	80 93 fd 00 	sts	0x00FD, r24
			  dat[1]=LSB(date);
    33e4:	80 91 23 01 	lds	r24, 0x0123
    33e8:	0e 94 4b 19 	call	0x3296	; 0x3296 <LSB>
    33ec:	80 93 fe 00 	sts	0x00FE, r24
			  dat[2]=' ';
    33f0:	80 e2       	ldi	r24, 0x20	; 32
    33f2:	80 93 ff 00 	sts	0x00FF, r24
			  nod[0]=MSB(month);
    33f6:	80 91 01 01 	lds	r24, 0x0101
    33fa:	0e 94 58 19 	call	0x32b0	; 0x32b0 <MSB>
    33fe:	80 93 0e 01 	sts	0x010E, r24
			  nod[1]=LSB(month);
    3402:	80 91 01 01 	lds	r24, 0x0101
    3406:	0e 94 4b 19 	call	0x3296	; 0x3296 <LSB>
    340a:	80 93 0f 01 	sts	0x010F, r24
			 m=atoi(nod);
    340e:	8e e0       	ldi	r24, 0x0E	; 14
    3410:	91 e0       	ldi	r25, 0x01	; 1
    3412:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <atoi>
    3416:	90 93 25 01 	sts	0x0125, r25
    341a:	80 93 24 01 	sts	0x0124, r24
			  lcd_goto_xy(2,5);
    341e:	82 e0       	ldi	r24, 0x02	; 2
    3420:	65 e0       	ldi	r22, 0x05	; 5
    3422:	0e 94 a2 13 	call	0x2744	; 0x2744 <lcd_goto_xy>
			  lcd_print(dat);
    3426:	8d ef       	ldi	r24, 0xFD	; 253
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	0e 94 8e 14 	call	0x291c	; 0x291c <lcd_print>
			  lcd_goto_xy(2,8);
    342e:	82 e0       	ldi	r24, 0x02	; 2
    3430:	68 e0       	ldi	r22, 0x08	; 8
    3432:	0e 94 a2 13 	call	0x2744	; 0x2744 <lcd_goto_xy>
			  lcd_print(monthe[m-1]);
    3436:	80 91 24 01 	lds	r24, 0x0124
    343a:	90 91 25 01 	lds	r25, 0x0125
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	88 0f       	add	r24, r24
    3442:	99 1f       	adc	r25, r25
    3444:	fc 01       	movw	r30, r24
    3446:	ef 52       	subi	r30, 0x2F	; 47
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	80 81       	ld	r24, Z
    344c:	91 81       	ldd	r25, Z+1	; 0x01
    344e:	0e 94 8e 14 	call	0x291c	; 0x291c <lcd_print>
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	a8 e4       	ldi	r26, 0x48	; 72
    3458:	b3 e4       	ldi	r27, 0x43	; 67
    345a:	8b 87       	std	Y+11, r24	; 0x0b
    345c:	9c 87       	std	Y+12, r25	; 0x0c
    345e:	ad 87       	std	Y+13, r26	; 0x0d
    3460:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3462:	6b 85       	ldd	r22, Y+11	; 0x0b
    3464:	7c 85       	ldd	r23, Y+12	; 0x0c
    3466:	8d 85       	ldd	r24, Y+13	; 0x0d
    3468:	9e 85       	ldd	r25, Y+14	; 0x0e
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	4a ef       	ldi	r20, 0xFA	; 250
    3470:	54 e4       	ldi	r21, 0x44	; 68
    3472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	8f 83       	std	Y+7, r24	; 0x07
    347c:	98 87       	std	Y+8, r25	; 0x08
    347e:	a9 87       	std	Y+9, r26	; 0x09
    3480:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3482:	6f 81       	ldd	r22, Y+7	; 0x07
    3484:	78 85       	ldd	r23, Y+8	; 0x08
    3486:	89 85       	ldd	r24, Y+9	; 0x09
    3488:	9a 85       	ldd	r25, Y+10	; 0x0a
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	40 e8       	ldi	r20, 0x80	; 128
    3490:	5f e3       	ldi	r21, 0x3F	; 63
    3492:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3496:	88 23       	and	r24, r24
    3498:	2c f4       	brge	.+10     	; 0x34a4 <watch_display+0x1d8>
		__ticks = 1;
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	9e 83       	std	Y+6, r25	; 0x06
    34a0:	8d 83       	std	Y+5, r24	; 0x05
    34a2:	3f c0       	rjmp	.+126    	; 0x3522 <watch_display+0x256>
	else if (__tmp > 65535)
    34a4:	6f 81       	ldd	r22, Y+7	; 0x07
    34a6:	78 85       	ldd	r23, Y+8	; 0x08
    34a8:	89 85       	ldd	r24, Y+9	; 0x09
    34aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	3f ef       	ldi	r19, 0xFF	; 255
    34b0:	4f e7       	ldi	r20, 0x7F	; 127
    34b2:	57 e4       	ldi	r21, 0x47	; 71
    34b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34b8:	18 16       	cp	r1, r24
    34ba:	4c f5       	brge	.+82     	; 0x350e <watch_display+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    34be:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	40 e2       	ldi	r20, 0x20	; 32
    34ca:	51 e4       	ldi	r21, 0x41	; 65
    34cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	bc 01       	movw	r22, r24
    34d6:	cd 01       	movw	r24, r26
    34d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	9e 83       	std	Y+6, r25	; 0x06
    34e2:	8d 83       	std	Y+5, r24	; 0x05
    34e4:	0f c0       	rjmp	.+30     	; 0x3504 <watch_display+0x238>
    34e6:	88 ec       	ldi	r24, 0xC8	; 200
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	9c 83       	std	Y+4, r25	; 0x04
    34ec:	8b 83       	std	Y+3, r24	; 0x03
    34ee:	8b 81       	ldd	r24, Y+3	; 0x03
    34f0:	9c 81       	ldd	r25, Y+4	; 0x04
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <watch_display+0x226>
    34f6:	9c 83       	std	Y+4, r25	; 0x04
    34f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fa:	8d 81       	ldd	r24, Y+5	; 0x05
    34fc:	9e 81       	ldd	r25, Y+6	; 0x06
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	9e 83       	std	Y+6, r25	; 0x06
    3502:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3504:	8d 81       	ldd	r24, Y+5	; 0x05
    3506:	9e 81       	ldd	r25, Y+6	; 0x06
    3508:	00 97       	sbiw	r24, 0x00	; 0
    350a:	69 f7       	brne	.-38     	; 0x34e6 <watch_display+0x21a>
    350c:	14 c0       	rjmp	.+40     	; 0x3536 <watch_display+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    350e:	6f 81       	ldd	r22, Y+7	; 0x07
    3510:	78 85       	ldd	r23, Y+8	; 0x08
    3512:	89 85       	ldd	r24, Y+9	; 0x09
    3514:	9a 85       	ldd	r25, Y+10	; 0x0a
    3516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351a:	dc 01       	movw	r26, r24
    351c:	cb 01       	movw	r24, r22
    351e:	9e 83       	std	Y+6, r25	; 0x06
    3520:	8d 83       	std	Y+5, r24	; 0x05
    3522:	8d 81       	ldd	r24, Y+5	; 0x05
    3524:	9e 81       	ldd	r25, Y+6	; 0x06
    3526:	9a 83       	std	Y+2, r25	; 0x02
    3528:	89 83       	std	Y+1, r24	; 0x01
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	9a 81       	ldd	r25, Y+2	; 0x02
    352e:	01 97       	sbiw	r24, 0x01	; 1
    3530:	f1 f7       	brne	.-4      	; 0x352e <watch_display+0x262>
    3532:	9a 83       	std	Y+2, r25	; 0x02
    3534:	89 83       	std	Y+1, r24	; 0x01
			  _delay_ms(200);
			  lcd_CLEAR();
    3536:	0e 94 ab 14 	call	0x2956	; 0x2956 <lcd_CLEAR>
}
    353a:	2e 96       	adiw	r28, 0x0e	; 14
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	cd bf       	out	0x3d, r28	; 61
    3546:	cf 91       	pop	r28
    3548:	df 91       	pop	r29
    354a:	08 95       	ret

0000354c <__prologue_saves__>:
    354c:	2f 92       	push	r2
    354e:	3f 92       	push	r3
    3550:	4f 92       	push	r4
    3552:	5f 92       	push	r5
    3554:	6f 92       	push	r6
    3556:	7f 92       	push	r7
    3558:	8f 92       	push	r8
    355a:	9f 92       	push	r9
    355c:	af 92       	push	r10
    355e:	bf 92       	push	r11
    3560:	cf 92       	push	r12
    3562:	df 92       	push	r13
    3564:	ef 92       	push	r14
    3566:	ff 92       	push	r15
    3568:	0f 93       	push	r16
    356a:	1f 93       	push	r17
    356c:	cf 93       	push	r28
    356e:	df 93       	push	r29
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	ca 1b       	sub	r28, r26
    3576:	db 0b       	sbc	r29, r27
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	09 94       	ijmp

00003584 <__epilogue_restores__>:
    3584:	2a 88       	ldd	r2, Y+18	; 0x12
    3586:	39 88       	ldd	r3, Y+17	; 0x11
    3588:	48 88       	ldd	r4, Y+16	; 0x10
    358a:	5f 84       	ldd	r5, Y+15	; 0x0f
    358c:	6e 84       	ldd	r6, Y+14	; 0x0e
    358e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3590:	8c 84       	ldd	r8, Y+12	; 0x0c
    3592:	9b 84       	ldd	r9, Y+11	; 0x0b
    3594:	aa 84       	ldd	r10, Y+10	; 0x0a
    3596:	b9 84       	ldd	r11, Y+9	; 0x09
    3598:	c8 84       	ldd	r12, Y+8	; 0x08
    359a:	df 80       	ldd	r13, Y+7	; 0x07
    359c:	ee 80       	ldd	r14, Y+6	; 0x06
    359e:	fd 80       	ldd	r15, Y+5	; 0x05
    35a0:	0c 81       	ldd	r16, Y+4	; 0x04
    35a2:	1b 81       	ldd	r17, Y+3	; 0x03
    35a4:	aa 81       	ldd	r26, Y+2	; 0x02
    35a6:	b9 81       	ldd	r27, Y+1	; 0x01
    35a8:	ce 0f       	add	r28, r30
    35aa:	d1 1d       	adc	r29, r1
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	f8 94       	cli
    35b0:	de bf       	out	0x3e, r29	; 62
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	cd bf       	out	0x3d, r28	; 61
    35b6:	ed 01       	movw	r28, r26
    35b8:	08 95       	ret

000035ba <atoi>:
    35ba:	fc 01       	movw	r30, r24
    35bc:	88 27       	eor	r24, r24
    35be:	99 27       	eor	r25, r25
    35c0:	e8 94       	clt
    35c2:	21 91       	ld	r18, Z+
    35c4:	20 32       	cpi	r18, 0x20	; 32
    35c6:	e9 f3       	breq	.-6      	; 0x35c2 <atoi+0x8>
    35c8:	29 30       	cpi	r18, 0x09	; 9
    35ca:	10 f0       	brcs	.+4      	; 0x35d0 <atoi+0x16>
    35cc:	2e 30       	cpi	r18, 0x0E	; 14
    35ce:	c8 f3       	brcs	.-14     	; 0x35c2 <atoi+0x8>
    35d0:	2b 32       	cpi	r18, 0x2B	; 43
    35d2:	41 f0       	breq	.+16     	; 0x35e4 <atoi+0x2a>
    35d4:	2d 32       	cpi	r18, 0x2D	; 45
    35d6:	39 f4       	brne	.+14     	; 0x35e6 <atoi+0x2c>
    35d8:	68 94       	set
    35da:	04 c0       	rjmp	.+8      	; 0x35e4 <atoi+0x2a>
    35dc:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__mulhi_const_10>
    35e0:	82 0f       	add	r24, r18
    35e2:	91 1d       	adc	r25, r1
    35e4:	21 91       	ld	r18, Z+
    35e6:	20 53       	subi	r18, 0x30	; 48
    35e8:	2a 30       	cpi	r18, 0x0A	; 10
    35ea:	c0 f3       	brcs	.-16     	; 0x35dc <atoi+0x22>
    35ec:	1e f4       	brtc	.+6      	; 0x35f4 <atoi+0x3a>
    35ee:	90 95       	com	r25
    35f0:	81 95       	neg	r24
    35f2:	9f 4f       	sbci	r25, 0xFF	; 255
    35f4:	08 95       	ret

000035f6 <itoa>:
    35f6:	fb 01       	movw	r30, r22
    35f8:	9f 01       	movw	r18, r30
    35fa:	e8 94       	clt
    35fc:	42 30       	cpi	r20, 0x02	; 2
    35fe:	c4 f0       	brlt	.+48     	; 0x3630 <itoa+0x3a>
    3600:	45 32       	cpi	r20, 0x25	; 37
    3602:	b4 f4       	brge	.+44     	; 0x3630 <itoa+0x3a>
    3604:	4a 30       	cpi	r20, 0x0A	; 10
    3606:	29 f4       	brne	.+10     	; 0x3612 <itoa+0x1c>
    3608:	97 fb       	bst	r25, 7
    360a:	1e f4       	brtc	.+6      	; 0x3612 <itoa+0x1c>
    360c:	90 95       	com	r25
    360e:	81 95       	neg	r24
    3610:	9f 4f       	sbci	r25, 0xFF	; 255
    3612:	64 2f       	mov	r22, r20
    3614:	77 27       	eor	r23, r23
    3616:	0e 94 34 1b 	call	0x3668	; 0x3668 <__udivmodhi4>
    361a:	80 5d       	subi	r24, 0xD0	; 208
    361c:	8a 33       	cpi	r24, 0x3A	; 58
    361e:	0c f0       	brlt	.+2      	; 0x3622 <itoa+0x2c>
    3620:	89 5d       	subi	r24, 0xD9	; 217
    3622:	81 93       	st	Z+, r24
    3624:	cb 01       	movw	r24, r22
    3626:	00 97       	sbiw	r24, 0x00	; 0
    3628:	a1 f7       	brne	.-24     	; 0x3612 <itoa+0x1c>
    362a:	16 f4       	brtc	.+4      	; 0x3630 <itoa+0x3a>
    362c:	5d e2       	ldi	r21, 0x2D	; 45
    362e:	51 93       	st	Z+, r21
    3630:	10 82       	st	Z, r1
    3632:	c9 01       	movw	r24, r18
    3634:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <strrev>

00003638 <__mulhi_const_10>:
    3638:	7a e0       	ldi	r23, 0x0A	; 10
    363a:	97 9f       	mul	r25, r23
    363c:	90 2d       	mov	r25, r0
    363e:	87 9f       	mul	r24, r23
    3640:	80 2d       	mov	r24, r0
    3642:	91 0d       	add	r25, r1
    3644:	11 24       	eor	r1, r1
    3646:	08 95       	ret

00003648 <strrev>:
    3648:	dc 01       	movw	r26, r24
    364a:	fc 01       	movw	r30, r24
    364c:	67 2f       	mov	r22, r23
    364e:	71 91       	ld	r23, Z+
    3650:	77 23       	and	r23, r23
    3652:	e1 f7       	brne	.-8      	; 0x364c <strrev+0x4>
    3654:	32 97       	sbiw	r30, 0x02	; 2
    3656:	04 c0       	rjmp	.+8      	; 0x3660 <strrev+0x18>
    3658:	7c 91       	ld	r23, X
    365a:	6d 93       	st	X+, r22
    365c:	70 83       	st	Z, r23
    365e:	62 91       	ld	r22, -Z
    3660:	ae 17       	cp	r26, r30
    3662:	bf 07       	cpc	r27, r31
    3664:	c8 f3       	brcs	.-14     	; 0x3658 <strrev+0x10>
    3666:	08 95       	ret

00003668 <__udivmodhi4>:
    3668:	aa 1b       	sub	r26, r26
    366a:	bb 1b       	sub	r27, r27
    366c:	51 e1       	ldi	r21, 0x11	; 17
    366e:	07 c0       	rjmp	.+14     	; 0x367e <__udivmodhi4_ep>

00003670 <__udivmodhi4_loop>:
    3670:	aa 1f       	adc	r26, r26
    3672:	bb 1f       	adc	r27, r27
    3674:	a6 17       	cp	r26, r22
    3676:	b7 07       	cpc	r27, r23
    3678:	10 f0       	brcs	.+4      	; 0x367e <__udivmodhi4_ep>
    367a:	a6 1b       	sub	r26, r22
    367c:	b7 0b       	sbc	r27, r23

0000367e <__udivmodhi4_ep>:
    367e:	88 1f       	adc	r24, r24
    3680:	99 1f       	adc	r25, r25
    3682:	5a 95       	dec	r21
    3684:	a9 f7       	brne	.-22     	; 0x3670 <__udivmodhi4_loop>
    3686:	80 95       	com	r24
    3688:	90 95       	com	r25
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	08 95       	ret

00003690 <_exit>:
    3690:	f8 94       	cli

00003692 <__stop_program>:
    3692:	ff cf       	rjmp	.-2      	; 0x3692 <__stop_program>
