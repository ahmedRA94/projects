
sevrocontrollby_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002536  000025ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800068  00800068  000025d2  2**0
                  ALLOC
  3 .stab         00001644  00000000  00000000  000025d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000085b  00000000  00000000  00003c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004473  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000045b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004723  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000636c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007257  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008004  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000083f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008bbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ad 36       	cpi	r26, 0x6D	; 109
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e3       	ldi	r30, 0x36	; 54
      78:	f5 e2       	ldi	r31, 0x25	; 37
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 00 12 	call	0x2400	; 0x2400 <main>
      8a:	0c 94 99 12 	jmp	0x2532	; 0x2532 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_Init>:
//x = F_CPU/F_ADC
#include "ADC LIB.h"
//*****************************************************************************************************************************************************************
//function to initialize ADC
void ADC_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	 //PART A as input
	DDRA =0x00;
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	10 82       	st	Z, r1
	// AREF = AVcc
	ADMUX = (1<<REFS0);
     b54:	e7 e2       	ldi	r30, 0x27	; 39
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 e4       	ldi	r24, 0x40	; 64
     b5a:	80 83       	st	Z, r24
	
	// ADC Enable and prescaler of 
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(prescaler<<7);
     b5c:	a6 e2       	ldi	r26, 0x26	; 38
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e6 e2       	ldi	r30, 0x26	; 38
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	28 2f       	mov	r18, r24
     b68:	80 91 68 00 	lds	r24, 0x0068
     b6c:	88 2f       	mov	r24, r24
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	96 95       	lsr	r25
     b72:	98 2f       	mov	r25, r24
     b74:	88 27       	eor	r24, r24
     b76:	97 95       	ror	r25
     b78:	87 95       	ror	r24
     b7a:	88 68       	ori	r24, 0x88	; 136
     b7c:	82 2b       	or	r24, r18
     b7e:	8c 93       	st	X, r24
	sei();
     b80:	78 94       	sei

}
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	08 95       	ret

00000b88 <adc_Read>:
//******************************************************************************************************************************************************************
//function to read adc value
// a=ADC_Read (channel num)
  unsigned int adc_Read(char ch)
 {
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	0f 92       	push	r0
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	89 83       	std	Y+1, r24	; 0x01
	 // select the corresponding channel 0~7
	 // ANDing with '7' will always keep the value
	 // of 'ch' between 0 and 7
	 ch &= 0b00000111;  // AND operation with 7
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	87 70       	andi	r24, 0x07	; 7
     b98:	89 83       	std	Y+1, r24	; 0x01
	 ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
     b9a:	a7 e2       	ldi	r26, 0x27	; 39
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e7 e2       	ldi	r30, 0x27	; 39
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	98 2f       	mov	r25, r24
     ba6:	98 7f       	andi	r25, 0xF8	; 248
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	89 2b       	or	r24, r25
     bac:	8c 93       	st	X, r24
	 // start single conversion
	 // write '1' to ADSC
	 ADCSRA |= (1<<ADSC);
     bae:	a6 e2       	ldi	r26, 0x26	; 38
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e6 e2       	ldi	r30, 0x26	; 38
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	80 64       	ori	r24, 0x40	; 64
     bba:	8c 93       	st	X, r24
	 return (theTenBitResults);
     bbc:	80 91 69 00 	lds	r24, 0x0069
     bc0:	90 91 6a 00 	lds	r25, 0x006A
 }
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <__vector_14>:
 //***************************************************************************************************************************************************************************
ISR(ADC_vect)
{
     bcc:	1f 92       	push	r1
     bce:	0f 92       	push	r0
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	2f 93       	push	r18
     bd8:	3f 93       	push	r19
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
     bde:	af 93       	push	r26
     be0:	bf 93       	push	r27
     be2:	ef 93       	push	r30
     be4:	ff 93       	push	r31
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	00 d0       	rcall	.+0      	; 0xbec <__vector_14+0x20>
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
	int theLowADC = ADCL;
     bf0:	e4 e2       	ldi	r30, 0x24	; 36
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	9a 83       	std	Y+2, r25	; 0x02
     bfc:	89 83       	std	Y+1, r24	; 0x01
	theTenBitResults = ADCH<<8|theLowADC;
     bfe:	e5 e2       	ldi	r30, 0x25	; 37
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	38 2f       	mov	r19, r24
     c0a:	22 27       	eor	r18, r18
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	9a 81       	ldd	r25, Y+2	; 0x02
     c10:	82 2b       	or	r24, r18
     c12:	93 2b       	or	r25, r19
     c14:	90 93 6a 00 	sts	0x006A, r25
     c18:	80 93 69 00 	sts	0x0069, r24
	ADCSRA |= 1<<ADSC;
     c1c:	a6 e2       	ldi	r26, 0x26	; 38
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e6 e2       	ldi	r30, 0x26	; 38
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	80 64       	ori	r24, 0x40	; 64
     c28:	8c 93       	st	X, r24
} 
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	ff 91       	pop	r31
     c34:	ef 91       	pop	r30
     c36:	bf 91       	pop	r27
     c38:	af 91       	pop	r26
     c3a:	9f 91       	pop	r25
     c3c:	8f 91       	pop	r24
     c3e:	3f 91       	pop	r19
     c40:	2f 91       	pop	r18
     c42:	0f 90       	pop	r0
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	0f 90       	pop	r0
     c48:	1f 90       	pop	r1
     c4a:	18 95       	reti

00000c4c <keypad_init>:

#include"keypad.h"

void keypad_init(){
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	0f 92       	push	r0
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
keypad_DDR|=0X0F;
     c56:	a7 e3       	ldi	r26, 0x37	; 55
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e7 e3       	ldi	r30, 0x37	; 55
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	8f 60       	ori	r24, 0x0F	; 15
     c62:	8c 93       	st	X, r24
keypad_PORT|=0XFF;
     c64:	e8 e3       	ldi	r30, 0x38	; 56
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	e8 e3       	ldi	r30, 0x38	; 56
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	80 83       	st	Z, r24
 }
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <keypad_press>:
 unsigned int keypad_press(){
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	c2 5e       	subi	r28, 0xE2	; 226
     c88:	d0 40       	sbci	r29, 0x00	; 0
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
	 unsigned int key;
keypad_PORT=0XFE;
     c94:	e8 e3       	ldi	r30, 0x38	; 56
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	8e ef       	ldi	r24, 0xFE	; 254
     c9a:	80 83       	st	Z, r24
if (!(keypad_PIN &(1<<4))){
     c9c:	e6 e3       	ldi	r30, 0x36	; 54
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	88 2f       	mov	r24, r24
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	80 71       	andi	r24, 0x10	; 16
     ca8:	90 70       	andi	r25, 0x00	; 0
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	09 f0       	breq	.+2      	; 0xcb0 <keypad_press+0x36>
     cae:	c5 c0       	rjmp	.+394    	; 0xe3a <keypad_press+0x1c0>
     cb0:	fe 01       	movw	r30, r28
     cb2:	e3 52       	subi	r30, 0x23	; 35
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a0 e0       	ldi	r26, 0x00	; 0
     cbc:	b0 e4       	ldi	r27, 0x40	; 64
     cbe:	80 83       	st	Z, r24
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	a2 83       	std	Z+2, r26	; 0x02
     cc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc6:	8e 01       	movw	r16, r28
     cc8:	07 52       	subi	r16, 0x27	; 39
     cca:	1f 4f       	sbci	r17, 0xFF	; 255
     ccc:	fe 01       	movw	r30, r28
     cce:	e3 52       	subi	r30, 0x23	; 35
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	60 81       	ld	r22, Z
     cd4:	71 81       	ldd	r23, Z+1	; 0x01
     cd6:	82 81       	ldd	r24, Z+2	; 0x02
     cd8:	93 81       	ldd	r25, Z+3	; 0x03
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	4a e7       	ldi	r20, 0x7A	; 122
     ce0:	53 e4       	ldi	r21, 0x43	; 67
     ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	f8 01       	movw	r30, r16
     cec:	80 83       	st	Z, r24
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	a2 83       	std	Z+2, r26	; 0x02
     cf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cf4:	fe 01       	movw	r30, r28
     cf6:	e7 52       	subi	r30, 0x27	; 39
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	60 81       	ld	r22, Z
     cfc:	71 81       	ldd	r23, Z+1	; 0x01
     cfe:	82 81       	ldd	r24, Z+2	; 0x02
     d00:	93 81       	ldd	r25, Z+3	; 0x03
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e8       	ldi	r20, 0x80	; 128
     d08:	5f e3       	ldi	r21, 0x3F	; 63
     d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d0e:	88 23       	and	r24, r24
     d10:	44 f4       	brge	.+16     	; 0xd22 <keypad_press+0xa8>
		__ticks = 1;
     d12:	fe 01       	movw	r30, r28
     d14:	e9 52       	subi	r30, 0x29	; 41
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	91 83       	std	Z+1, r25	; 0x01
     d1e:	80 83       	st	Z, r24
     d20:	64 c0       	rjmp	.+200    	; 0xdea <keypad_press+0x170>
	else if (__tmp > 65535)
     d22:	fe 01       	movw	r30, r28
     d24:	e7 52       	subi	r30, 0x27	; 39
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	60 81       	ld	r22, Z
     d2a:	71 81       	ldd	r23, Z+1	; 0x01
     d2c:	82 81       	ldd	r24, Z+2	; 0x02
     d2e:	93 81       	ldd	r25, Z+3	; 0x03
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	3f ef       	ldi	r19, 0xFF	; 255
     d34:	4f e7       	ldi	r20, 0x7F	; 127
     d36:	57 e4       	ldi	r21, 0x47	; 71
     d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d3c:	18 16       	cp	r1, r24
     d3e:	0c f0       	brlt	.+2      	; 0xd42 <keypad_press+0xc8>
     d40:	43 c0       	rjmp	.+134    	; 0xdc8 <keypad_press+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d42:	fe 01       	movw	r30, r28
     d44:	e3 52       	subi	r30, 0x23	; 35
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e2       	ldi	r20, 0x20	; 32
     d56:	51 e4       	ldi	r21, 0x41	; 65
     d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	8e 01       	movw	r16, r28
     d62:	09 52       	subi	r16, 0x29	; 41
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	bc 01       	movw	r22, r24
     d68:	cd 01       	movw	r24, r26
     d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	f8 01       	movw	r30, r16
     d74:	91 83       	std	Z+1, r25	; 0x01
     d76:	80 83       	st	Z, r24
     d78:	1f c0       	rjmp	.+62     	; 0xdb8 <keypad_press+0x13e>
     d7a:	fe 01       	movw	r30, r28
     d7c:	eb 52       	subi	r30, 0x2B	; 43
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	89 e1       	ldi	r24, 0x19	; 25
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	91 83       	std	Z+1, r25	; 0x01
     d86:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d88:	fe 01       	movw	r30, r28
     d8a:	eb 52       	subi	r30, 0x2B	; 43
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <keypad_press+0x118>
     d96:	fe 01       	movw	r30, r28
     d98:	eb 52       	subi	r30, 0x2B	; 43
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da0:	de 01       	movw	r26, r28
     da2:	a9 52       	subi	r26, 0x29	; 41
     da4:	bf 4f       	sbci	r27, 0xFF	; 255
     da6:	fe 01       	movw	r30, r28
     da8:	e9 52       	subi	r30, 0x29	; 41
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	11 96       	adiw	r26, 0x01	; 1
     db4:	9c 93       	st	X, r25
     db6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db8:	fe 01       	movw	r30, r28
     dba:	e9 52       	subi	r30, 0x29	; 41
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	d1 f6       	brne	.-76     	; 0xd7a <keypad_press+0x100>
     dc6:	28 c0       	rjmp	.+80     	; 0xe18 <keypad_press+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc8:	8e 01       	movw	r16, r28
     dca:	09 52       	subi	r16, 0x29	; 41
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	fe 01       	movw	r30, r28
     dd0:	e7 52       	subi	r30, 0x27	; 39
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	60 81       	ld	r22, Z
     dd6:	71 81       	ldd	r23, Z+1	; 0x01
     dd8:	82 81       	ldd	r24, Z+2	; 0x02
     dda:	93 81       	ldd	r25, Z+3	; 0x03
     ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	f8 01       	movw	r30, r16
     de6:	91 83       	std	Z+1, r25	; 0x01
     de8:	80 83       	st	Z, r24
     dea:	de 01       	movw	r26, r28
     dec:	ad 52       	subi	r26, 0x2D	; 45
     dee:	bf 4f       	sbci	r27, 0xFF	; 255
     df0:	fe 01       	movw	r30, r28
     df2:	e9 52       	subi	r30, 0x29	; 41
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	80 81       	ld	r24, Z
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	11 96       	adiw	r26, 0x01	; 1
     dfc:	9c 93       	st	X, r25
     dfe:	8e 93       	st	-X, r24
     e00:	fe 01       	movw	r30, r28
     e02:	ed 52       	subi	r30, 0x2D	; 45
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	80 81       	ld	r24, Z
     e08:	91 81       	ldd	r25, Z+1	; 0x01
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <keypad_press+0x190>
     e0e:	fe 01       	movw	r30, r28
     e10:	ed 52       	subi	r30, 0x2D	; 45
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	80 83       	st	Z, r24
_delay_ms(2);
while(!(keypad_PIN &(1<<4)));
     e18:	e6 e3       	ldi	r30, 0x36	; 54
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	80 71       	andi	r24, 0x10	; 16
     e24:	90 70       	andi	r25, 0x00	; 0
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	b9 f3       	breq	.-18     	; 0xe18 <keypad_press+0x19e>
key=1;
     e2a:	fe 01       	movw	r30, r28
     e2c:	ef 51       	subi	r30, 0x1F	; 31
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24
     e38:	64 c2       	rjmp	.+1224   	; 0x1302 <keypad_press+0x688>
}
else if (!(keypad_PIN &(1<<5))){
     e3a:	e6 e3       	ldi	r30, 0x36	; 54
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	80 72       	andi	r24, 0x20	; 32
     e46:	90 70       	andi	r25, 0x00	; 0
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	09 f0       	breq	.+2      	; 0xe4e <keypad_press+0x1d4>
     e4c:	c5 c0       	rjmp	.+394    	; 0xfd8 <keypad_press+0x35e>
     e4e:	fe 01       	movw	r30, r28
     e50:	e1 53       	subi	r30, 0x31	; 49
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	a0 e0       	ldi	r26, 0x00	; 0
     e5a:	b0 e4       	ldi	r27, 0x40	; 64
     e5c:	80 83       	st	Z, r24
     e5e:	91 83       	std	Z+1, r25	; 0x01
     e60:	a2 83       	std	Z+2, r26	; 0x02
     e62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e64:	8e 01       	movw	r16, r28
     e66:	05 53       	subi	r16, 0x35	; 53
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	fe 01       	movw	r30, r28
     e6c:	e1 53       	subi	r30, 0x31	; 49
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	93 81       	ldd	r25, Z+3	; 0x03
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a e7       	ldi	r20, 0x7A	; 122
     e7e:	53 e4       	ldi	r21, 0x43	; 67
     e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	f8 01       	movw	r30, r16
     e8a:	80 83       	st	Z, r24
     e8c:	91 83       	std	Z+1, r25	; 0x01
     e8e:	a2 83       	std	Z+2, r26	; 0x02
     e90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e92:	fe 01       	movw	r30, r28
     e94:	e5 53       	subi	r30, 0x35	; 53
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e8       	ldi	r20, 0x80	; 128
     ea6:	5f e3       	ldi	r21, 0x3F	; 63
     ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eac:	88 23       	and	r24, r24
     eae:	44 f4       	brge	.+16     	; 0xec0 <keypad_press+0x246>
		__ticks = 1;
     eb0:	fe 01       	movw	r30, r28
     eb2:	e7 53       	subi	r30, 0x37	; 55
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	91 83       	std	Z+1, r25	; 0x01
     ebc:	80 83       	st	Z, r24
     ebe:	64 c0       	rjmp	.+200    	; 0xf88 <keypad_press+0x30e>
	else if (__tmp > 65535)
     ec0:	fe 01       	movw	r30, r28
     ec2:	e5 53       	subi	r30, 0x35	; 53
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	3f ef       	ldi	r19, 0xFF	; 255
     ed2:	4f e7       	ldi	r20, 0x7F	; 127
     ed4:	57 e4       	ldi	r21, 0x47	; 71
     ed6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eda:	18 16       	cp	r1, r24
     edc:	0c f0       	brlt	.+2      	; 0xee0 <keypad_press+0x266>
     ede:	43 c0       	rjmp	.+134    	; 0xf66 <keypad_press+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee0:	fe 01       	movw	r30, r28
     ee2:	e1 53       	subi	r30, 0x31	; 49
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	60 81       	ld	r22, Z
     ee8:	71 81       	ldd	r23, Z+1	; 0x01
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e2       	ldi	r20, 0x20	; 32
     ef4:	51 e4       	ldi	r21, 0x41	; 65
     ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	8e 01       	movw	r16, r28
     f00:	07 53       	subi	r16, 0x37	; 55
     f02:	1f 4f       	sbci	r17, 0xFF	; 255
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	f8 01       	movw	r30, r16
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	80 83       	st	Z, r24
     f16:	1f c0       	rjmp	.+62     	; 0xf56 <keypad_press+0x2dc>
     f18:	fe 01       	movw	r30, r28
     f1a:	e9 53       	subi	r30, 0x39	; 57
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	89 e1       	ldi	r24, 0x19	; 25
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	80 83       	st	Z, r24
     f26:	fe 01       	movw	r30, r28
     f28:	e9 53       	subi	r30, 0x39	; 57
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	80 81       	ld	r24, Z
     f2e:	91 81       	ldd	r25, Z+1	; 0x01
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <keypad_press+0x2b6>
     f34:	fe 01       	movw	r30, r28
     f36:	e9 53       	subi	r30, 0x39	; 57
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3e:	de 01       	movw	r26, r28
     f40:	a7 53       	subi	r26, 0x37	; 55
     f42:	bf 4f       	sbci	r27, 0xFF	; 255
     f44:	fe 01       	movw	r30, r28
     f46:	e7 53       	subi	r30, 0x37	; 55
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	80 81       	ld	r24, Z
     f4c:	91 81       	ldd	r25, Z+1	; 0x01
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	11 96       	adiw	r26, 0x01	; 1
     f52:	9c 93       	st	X, r25
     f54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f56:	fe 01       	movw	r30, r28
     f58:	e7 53       	subi	r30, 0x37	; 55
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	d1 f6       	brne	.-76     	; 0xf18 <keypad_press+0x29e>
     f64:	28 c0       	rjmp	.+80     	; 0xfb6 <keypad_press+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f66:	8e 01       	movw	r16, r28
     f68:	07 53       	subi	r16, 0x37	; 55
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	fe 01       	movw	r30, r28
     f6e:	e5 53       	subi	r30, 0x35	; 53
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	60 81       	ld	r22, Z
     f74:	71 81       	ldd	r23, Z+1	; 0x01
     f76:	82 81       	ldd	r24, Z+2	; 0x02
     f78:	93 81       	ldd	r25, Z+3	; 0x03
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	f8 01       	movw	r30, r16
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	80 83       	st	Z, r24
     f88:	de 01       	movw	r26, r28
     f8a:	ab 53       	subi	r26, 0x3B	; 59
     f8c:	bf 4f       	sbci	r27, 0xFF	; 255
     f8e:	fe 01       	movw	r30, r28
     f90:	e7 53       	subi	r30, 0x37	; 55
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	11 96       	adiw	r26, 0x01	; 1
     f9a:	9c 93       	st	X, r25
     f9c:	8e 93       	st	-X, r24
     f9e:	fe 01       	movw	r30, r28
     fa0:	eb 53       	subi	r30, 0x3B	; 59
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <keypad_press+0x32e>
     fac:	fe 01       	movw	r30, r28
     fae:	eb 53       	subi	r30, 0x3B	; 59
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<5)));
     fb6:	e6 e3       	ldi	r30, 0x36	; 54
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	80 72       	andi	r24, 0x20	; 32
     fc2:	90 70       	andi	r25, 0x00	; 0
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	b9 f3       	breq	.-18     	; 0xfb6 <keypad_press+0x33c>
	key=2;
     fc8:	fe 01       	movw	r30, r28
     fca:	ef 51       	subi	r30, 0x1F	; 31
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
     fd6:	95 c1       	rjmp	.+810    	; 0x1302 <keypad_press+0x688>
	}
else if (!(keypad_PIN &(1<<6))){
     fd8:	e6 e3       	ldi	r30, 0x36	; 54
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	80 74       	andi	r24, 0x40	; 64
     fe4:	90 70       	andi	r25, 0x00	; 0
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	09 f0       	breq	.+2      	; 0xfec <keypad_press+0x372>
     fea:	c5 c0       	rjmp	.+394    	; 0x1176 <keypad_press+0x4fc>
     fec:	fe 01       	movw	r30, r28
     fee:	ef 53       	subi	r30, 0x3F	; 63
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a0 e0       	ldi	r26, 0x00	; 0
     ff8:	b0 e4       	ldi	r27, 0x40	; 64
     ffa:	80 83       	st	Z, r24
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	a2 83       	std	Z+2, r26	; 0x02
    1000:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1002:	8e 01       	movw	r16, r28
    1004:	03 54       	subi	r16, 0x43	; 67
    1006:	1f 4f       	sbci	r17, 0xFF	; 255
    1008:	fe 01       	movw	r30, r28
    100a:	ef 53       	subi	r30, 0x3F	; 63
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	60 81       	ld	r22, Z
    1010:	71 81       	ldd	r23, Z+1	; 0x01
    1012:	82 81       	ldd	r24, Z+2	; 0x02
    1014:	93 81       	ldd	r25, Z+3	; 0x03
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	4a e7       	ldi	r20, 0x7A	; 122
    101c:	53 e4       	ldi	r21, 0x43	; 67
    101e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	f8 01       	movw	r30, r16
    1028:	80 83       	st	Z, r24
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	a2 83       	std	Z+2, r26	; 0x02
    102e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1030:	fe 01       	movw	r30, r28
    1032:	e3 54       	subi	r30, 0x43	; 67
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	60 81       	ld	r22, Z
    1038:	71 81       	ldd	r23, Z+1	; 0x01
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e8       	ldi	r20, 0x80	; 128
    1044:	5f e3       	ldi	r21, 0x3F	; 63
    1046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    104a:	88 23       	and	r24, r24
    104c:	44 f4       	brge	.+16     	; 0x105e <keypad_press+0x3e4>
		__ticks = 1;
    104e:	fe 01       	movw	r30, r28
    1050:	e5 54       	subi	r30, 0x45	; 69
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	80 83       	st	Z, r24
    105c:	64 c0       	rjmp	.+200    	; 0x1126 <keypad_press+0x4ac>
	else if (__tmp > 65535)
    105e:	fe 01       	movw	r30, r28
    1060:	e3 54       	subi	r30, 0x43	; 67
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	60 81       	ld	r22, Z
    1066:	71 81       	ldd	r23, Z+1	; 0x01
    1068:	82 81       	ldd	r24, Z+2	; 0x02
    106a:	93 81       	ldd	r25, Z+3	; 0x03
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	3f ef       	ldi	r19, 0xFF	; 255
    1070:	4f e7       	ldi	r20, 0x7F	; 127
    1072:	57 e4       	ldi	r21, 0x47	; 71
    1074:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1078:	18 16       	cp	r1, r24
    107a:	0c f0       	brlt	.+2      	; 0x107e <keypad_press+0x404>
    107c:	43 c0       	rjmp	.+134    	; 0x1104 <keypad_press+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107e:	fe 01       	movw	r30, r28
    1080:	ef 53       	subi	r30, 0x3F	; 63
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e2       	ldi	r20, 0x20	; 32
    1092:	51 e4       	ldi	r21, 0x41	; 65
    1094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	8e 01       	movw	r16, r28
    109e:	05 54       	subi	r16, 0x45	; 69
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	f8 01       	movw	r30, r16
    10b0:	91 83       	std	Z+1, r25	; 0x01
    10b2:	80 83       	st	Z, r24
    10b4:	1f c0       	rjmp	.+62     	; 0x10f4 <keypad_press+0x47a>
    10b6:	fe 01       	movw	r30, r28
    10b8:	e7 54       	subi	r30, 0x47	; 71
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	89 e1       	ldi	r24, 0x19	; 25
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	80 83       	st	Z, r24
    10c4:	fe 01       	movw	r30, r28
    10c6:	e7 54       	subi	r30, 0x47	; 71
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	80 81       	ld	r24, Z
    10cc:	91 81       	ldd	r25, Z+1	; 0x01
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <keypad_press+0x454>
    10d2:	fe 01       	movw	r30, r28
    10d4:	e7 54       	subi	r30, 0x47	; 71
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	91 83       	std	Z+1, r25	; 0x01
    10da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10dc:	de 01       	movw	r26, r28
    10de:	a5 54       	subi	r26, 0x45	; 69
    10e0:	bf 4f       	sbci	r27, 0xFF	; 255
    10e2:	fe 01       	movw	r30, r28
    10e4:	e5 54       	subi	r30, 0x45	; 69
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	11 96       	adiw	r26, 0x01	; 1
    10f0:	9c 93       	st	X, r25
    10f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f4:	fe 01       	movw	r30, r28
    10f6:	e5 54       	subi	r30, 0x45	; 69
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	80 81       	ld	r24, Z
    10fc:	91 81       	ldd	r25, Z+1	; 0x01
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	d1 f6       	brne	.-76     	; 0x10b6 <keypad_press+0x43c>
    1102:	28 c0       	rjmp	.+80     	; 0x1154 <keypad_press+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1104:	8e 01       	movw	r16, r28
    1106:	05 54       	subi	r16, 0x45	; 69
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	fe 01       	movw	r30, r28
    110c:	e3 54       	subi	r30, 0x43	; 67
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	60 81       	ld	r22, Z
    1112:	71 81       	ldd	r23, Z+1	; 0x01
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	93 81       	ldd	r25, Z+3	; 0x03
    1118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	f8 01       	movw	r30, r16
    1122:	91 83       	std	Z+1, r25	; 0x01
    1124:	80 83       	st	Z, r24
    1126:	de 01       	movw	r26, r28
    1128:	a9 54       	subi	r26, 0x49	; 73
    112a:	bf 4f       	sbci	r27, 0xFF	; 255
    112c:	fe 01       	movw	r30, r28
    112e:	e5 54       	subi	r30, 0x45	; 69
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	11 96       	adiw	r26, 0x01	; 1
    1138:	9c 93       	st	X, r25
    113a:	8e 93       	st	-X, r24
    113c:	fe 01       	movw	r30, r28
    113e:	e9 54       	subi	r30, 0x49	; 73
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	80 81       	ld	r24, Z
    1144:	91 81       	ldd	r25, Z+1	; 0x01
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	f1 f7       	brne	.-4      	; 0x1146 <keypad_press+0x4cc>
    114a:	fe 01       	movw	r30, r28
    114c:	e9 54       	subi	r30, 0x49	; 73
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	91 83       	std	Z+1, r25	; 0x01
    1152:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<6)));
    1154:	e6 e3       	ldi	r30, 0x36	; 54
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	80 74       	andi	r24, 0x40	; 64
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	b9 f3       	breq	.-18     	; 0x1154 <keypad_press+0x4da>
	key=3;
    1166:	fe 01       	movw	r30, r28
    1168:	ef 51       	subi	r30, 0x1F	; 31
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	83 e0       	ldi	r24, 0x03	; 3
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	91 83       	std	Z+1, r25	; 0x01
    1172:	80 83       	st	Z, r24
    1174:	c6 c0       	rjmp	.+396    	; 0x1302 <keypad_press+0x688>
	}
else if (!(keypad_PIN &(1<<7))){
    1176:	e6 e3       	ldi	r30, 0x36	; 54
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	88 23       	and	r24, r24
    117e:	0c f4       	brge	.+2      	; 0x1182 <keypad_press+0x508>
    1180:	c0 c0       	rjmp	.+384    	; 0x1302 <keypad_press+0x688>
    1182:	fe 01       	movw	r30, r28
    1184:	ed 54       	subi	r30, 0x4D	; 77
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	a0 e0       	ldi	r26, 0x00	; 0
    118e:	b0 e4       	ldi	r27, 0x40	; 64
    1190:	80 83       	st	Z, r24
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	a2 83       	std	Z+2, r26	; 0x02
    1196:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1198:	8e 01       	movw	r16, r28
    119a:	01 55       	subi	r16, 0x51	; 81
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	fe 01       	movw	r30, r28
    11a0:	ed 54       	subi	r30, 0x4D	; 77
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	4a e7       	ldi	r20, 0x7A	; 122
    11b2:	53 e4       	ldi	r21, 0x43	; 67
    11b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	f8 01       	movw	r30, r16
    11be:	80 83       	st	Z, r24
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	a2 83       	std	Z+2, r26	; 0x02
    11c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11c6:	fe 01       	movw	r30, r28
    11c8:	e1 55       	subi	r30, 0x51	; 81
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	60 81       	ld	r22, Z
    11ce:	71 81       	ldd	r23, Z+1	; 0x01
    11d0:	82 81       	ldd	r24, Z+2	; 0x02
    11d2:	93 81       	ldd	r25, Z+3	; 0x03
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e8       	ldi	r20, 0x80	; 128
    11da:	5f e3       	ldi	r21, 0x3F	; 63
    11dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11e0:	88 23       	and	r24, r24
    11e2:	44 f4       	brge	.+16     	; 0x11f4 <keypad_press+0x57a>
		__ticks = 1;
    11e4:	fe 01       	movw	r30, r28
    11e6:	e3 55       	subi	r30, 0x53	; 83
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	80 83       	st	Z, r24
    11f2:	64 c0       	rjmp	.+200    	; 0x12bc <keypad_press+0x642>
	else if (__tmp > 65535)
    11f4:	fe 01       	movw	r30, r28
    11f6:	e1 55       	subi	r30, 0x51	; 81
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	60 81       	ld	r22, Z
    11fc:	71 81       	ldd	r23, Z+1	; 0x01
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	93 81       	ldd	r25, Z+3	; 0x03
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	3f ef       	ldi	r19, 0xFF	; 255
    1206:	4f e7       	ldi	r20, 0x7F	; 127
    1208:	57 e4       	ldi	r21, 0x47	; 71
    120a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    120e:	18 16       	cp	r1, r24
    1210:	0c f0       	brlt	.+2      	; 0x1214 <keypad_press+0x59a>
    1212:	43 c0       	rjmp	.+134    	; 0x129a <keypad_press+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1214:	fe 01       	movw	r30, r28
    1216:	ed 54       	subi	r30, 0x4D	; 77
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	60 81       	ld	r22, Z
    121c:	71 81       	ldd	r23, Z+1	; 0x01
    121e:	82 81       	ldd	r24, Z+2	; 0x02
    1220:	93 81       	ldd	r25, Z+3	; 0x03
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e2       	ldi	r20, 0x20	; 32
    1228:	51 e4       	ldi	r21, 0x41	; 65
    122a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8e 01       	movw	r16, r28
    1234:	03 55       	subi	r16, 0x53	; 83
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	f8 01       	movw	r30, r16
    1246:	91 83       	std	Z+1, r25	; 0x01
    1248:	80 83       	st	Z, r24
    124a:	1f c0       	rjmp	.+62     	; 0x128a <keypad_press+0x610>
    124c:	fe 01       	movw	r30, r28
    124e:	e5 55       	subi	r30, 0x55	; 85
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	89 e1       	ldi	r24, 0x19	; 25
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	91 83       	std	Z+1, r25	; 0x01
    1258:	80 83       	st	Z, r24
    125a:	fe 01       	movw	r30, r28
    125c:	e5 55       	subi	r30, 0x55	; 85
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	80 81       	ld	r24, Z
    1262:	91 81       	ldd	r25, Z+1	; 0x01
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <keypad_press+0x5ea>
    1268:	fe 01       	movw	r30, r28
    126a:	e5 55       	subi	r30, 0x55	; 85
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	91 83       	std	Z+1, r25	; 0x01
    1270:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1272:	de 01       	movw	r26, r28
    1274:	a3 55       	subi	r26, 0x53	; 83
    1276:	bf 4f       	sbci	r27, 0xFF	; 255
    1278:	fe 01       	movw	r30, r28
    127a:	e3 55       	subi	r30, 0x53	; 83
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	80 81       	ld	r24, Z
    1280:	91 81       	ldd	r25, Z+1	; 0x01
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	11 96       	adiw	r26, 0x01	; 1
    1286:	9c 93       	st	X, r25
    1288:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128a:	fe 01       	movw	r30, r28
    128c:	e3 55       	subi	r30, 0x53	; 83
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	d1 f6       	brne	.-76     	; 0x124c <keypad_press+0x5d2>
    1298:	28 c0       	rjmp	.+80     	; 0x12ea <keypad_press+0x670>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129a:	8e 01       	movw	r16, r28
    129c:	03 55       	subi	r16, 0x53	; 83
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	fe 01       	movw	r30, r28
    12a2:	e1 55       	subi	r30, 0x51	; 81
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	60 81       	ld	r22, Z
    12a8:	71 81       	ldd	r23, Z+1	; 0x01
    12aa:	82 81       	ldd	r24, Z+2	; 0x02
    12ac:	93 81       	ldd	r25, Z+3	; 0x03
    12ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	f8 01       	movw	r30, r16
    12b8:	91 83       	std	Z+1, r25	; 0x01
    12ba:	80 83       	st	Z, r24
    12bc:	de 01       	movw	r26, r28
    12be:	a7 55       	subi	r26, 0x57	; 87
    12c0:	bf 4f       	sbci	r27, 0xFF	; 255
    12c2:	fe 01       	movw	r30, r28
    12c4:	e3 55       	subi	r30, 0x53	; 83
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	11 96       	adiw	r26, 0x01	; 1
    12ce:	9c 93       	st	X, r25
    12d0:	8e 93       	st	-X, r24
    12d2:	fe 01       	movw	r30, r28
    12d4:	e7 55       	subi	r30, 0x57	; 87
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <keypad_press+0x662>
    12e0:	fe 01       	movw	r30, r28
    12e2:	e7 55       	subi	r30, 0x57	; 87
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	91 83       	std	Z+1, r25	; 0x01
    12e8:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<7)));
    12ea:	e6 e3       	ldi	r30, 0x36	; 54
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	88 23       	and	r24, r24
    12f2:	dc f7       	brge	.-10     	; 0x12ea <keypad_press+0x670>
	key=4;
    12f4:	fe 01       	movw	r30, r28
    12f6:	ef 51       	subi	r30, 0x1F	; 31
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	84 e0       	ldi	r24, 0x04	; 4
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	91 83       	std	Z+1, r25	; 0x01
    1300:	80 83       	st	Z, r24
	}
keypad_PORT=0XFD;
    1302:	e8 e3       	ldi	r30, 0x38	; 56
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8d ef       	ldi	r24, 0xFD	; 253
    1308:	80 83       	st	Z, r24
if (!(keypad_PIN &(1<<4))){
    130a:	e6 e3       	ldi	r30, 0x36	; 54
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	80 71       	andi	r24, 0x10	; 16
    1316:	90 70       	andi	r25, 0x00	; 0
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	09 f0       	breq	.+2      	; 0x131e <keypad_press+0x6a4>
    131c:	c5 c0       	rjmp	.+394    	; 0x14a8 <keypad_press+0x82e>
    131e:	fe 01       	movw	r30, r28
    1320:	eb 55       	subi	r30, 0x5B	; 91
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a0 e0       	ldi	r26, 0x00	; 0
    132a:	b0 e4       	ldi	r27, 0x40	; 64
    132c:	80 83       	st	Z, r24
    132e:	91 83       	std	Z+1, r25	; 0x01
    1330:	a2 83       	std	Z+2, r26	; 0x02
    1332:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1334:	8e 01       	movw	r16, r28
    1336:	0f 55       	subi	r16, 0x5F	; 95
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	fe 01       	movw	r30, r28
    133c:	eb 55       	subi	r30, 0x5B	; 91
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	4a e7       	ldi	r20, 0x7A	; 122
    134e:	53 e4       	ldi	r21, 0x43	; 67
    1350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	f8 01       	movw	r30, r16
    135a:	80 83       	st	Z, r24
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	a2 83       	std	Z+2, r26	; 0x02
    1360:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1362:	fe 01       	movw	r30, r28
    1364:	ef 55       	subi	r30, 0x5F	; 95
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	60 81       	ld	r22, Z
    136a:	71 81       	ldd	r23, Z+1	; 0x01
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e8       	ldi	r20, 0x80	; 128
    1376:	5f e3       	ldi	r21, 0x3F	; 63
    1378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    137c:	88 23       	and	r24, r24
    137e:	44 f4       	brge	.+16     	; 0x1390 <keypad_press+0x716>
		__ticks = 1;
    1380:	fe 01       	movw	r30, r28
    1382:	e1 56       	subi	r30, 0x61	; 97
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	91 83       	std	Z+1, r25	; 0x01
    138c:	80 83       	st	Z, r24
    138e:	64 c0       	rjmp	.+200    	; 0x1458 <keypad_press+0x7de>
	else if (__tmp > 65535)
    1390:	fe 01       	movw	r30, r28
    1392:	ef 55       	subi	r30, 0x5F	; 95
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	60 81       	ld	r22, Z
    1398:	71 81       	ldd	r23, Z+1	; 0x01
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	3f ef       	ldi	r19, 0xFF	; 255
    13a2:	4f e7       	ldi	r20, 0x7F	; 127
    13a4:	57 e4       	ldi	r21, 0x47	; 71
    13a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13aa:	18 16       	cp	r1, r24
    13ac:	0c f0       	brlt	.+2      	; 0x13b0 <keypad_press+0x736>
    13ae:	43 c0       	rjmp	.+134    	; 0x1436 <keypad_press+0x7bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b0:	fe 01       	movw	r30, r28
    13b2:	eb 55       	subi	r30, 0x5B	; 91
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	60 81       	ld	r22, Z
    13b8:	71 81       	ldd	r23, Z+1	; 0x01
    13ba:	82 81       	ldd	r24, Z+2	; 0x02
    13bc:	93 81       	ldd	r25, Z+3	; 0x03
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e2       	ldi	r20, 0x20	; 32
    13c4:	51 e4       	ldi	r21, 0x41	; 65
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	8e 01       	movw	r16, r28
    13d0:	01 56       	subi	r16, 0x61	; 97
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	f8 01       	movw	r30, r16
    13e2:	91 83       	std	Z+1, r25	; 0x01
    13e4:	80 83       	st	Z, r24
    13e6:	1f c0       	rjmp	.+62     	; 0x1426 <keypad_press+0x7ac>
    13e8:	fe 01       	movw	r30, r28
    13ea:	e3 56       	subi	r30, 0x63	; 99
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	89 e1       	ldi	r24, 0x19	; 25
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	91 83       	std	Z+1, r25	; 0x01
    13f4:	80 83       	st	Z, r24
    13f6:	fe 01       	movw	r30, r28
    13f8:	e3 56       	subi	r30, 0x63	; 99
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <keypad_press+0x786>
    1404:	fe 01       	movw	r30, r28
    1406:	e3 56       	subi	r30, 0x63	; 99
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140e:	de 01       	movw	r26, r28
    1410:	a1 56       	subi	r26, 0x61	; 97
    1412:	bf 4f       	sbci	r27, 0xFF	; 255
    1414:	fe 01       	movw	r30, r28
    1416:	e1 56       	subi	r30, 0x61	; 97
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	80 81       	ld	r24, Z
    141c:	91 81       	ldd	r25, Z+1	; 0x01
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	11 96       	adiw	r26, 0x01	; 1
    1422:	9c 93       	st	X, r25
    1424:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1426:	fe 01       	movw	r30, r28
    1428:	e1 56       	subi	r30, 0x61	; 97
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	d1 f6       	brne	.-76     	; 0x13e8 <keypad_press+0x76e>
    1434:	28 c0       	rjmp	.+80     	; 0x1486 <keypad_press+0x80c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1436:	8e 01       	movw	r16, r28
    1438:	01 56       	subi	r16, 0x61	; 97
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	fe 01       	movw	r30, r28
    143e:	ef 55       	subi	r30, 0x5F	; 95
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	f8 01       	movw	r30, r16
    1454:	91 83       	std	Z+1, r25	; 0x01
    1456:	80 83       	st	Z, r24
    1458:	de 01       	movw	r26, r28
    145a:	a5 56       	subi	r26, 0x65	; 101
    145c:	bf 4f       	sbci	r27, 0xFF	; 255
    145e:	fe 01       	movw	r30, r28
    1460:	e1 56       	subi	r30, 0x61	; 97
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	80 81       	ld	r24, Z
    1466:	91 81       	ldd	r25, Z+1	; 0x01
    1468:	11 96       	adiw	r26, 0x01	; 1
    146a:	9c 93       	st	X, r25
    146c:	8e 93       	st	-X, r24
    146e:	fe 01       	movw	r30, r28
    1470:	e5 56       	subi	r30, 0x65	; 101
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	80 81       	ld	r24, Z
    1476:	91 81       	ldd	r25, Z+1	; 0x01
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <keypad_press+0x7fe>
    147c:	fe 01       	movw	r30, r28
    147e:	e5 56       	subi	r30, 0x65	; 101
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	80 83       	st	Z, r24
_delay_ms(2);
while(!(keypad_PIN &(1<<4)));
    1486:	e6 e3       	ldi	r30, 0x36	; 54
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	80 71       	andi	r24, 0x10	; 16
    1492:	90 70       	andi	r25, 0x00	; 0
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	b9 f3       	breq	.-18     	; 0x1486 <keypad_press+0x80c>
key=5;
    1498:	fe 01       	movw	r30, r28
    149a:	ef 51       	subi	r30, 0x1F	; 31
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	85 e0       	ldi	r24, 0x05	; 5
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	80 83       	st	Z, r24
    14a6:	64 c2       	rjmp	.+1224   	; 0x1970 <keypad_press+0xcf6>
}
else if (!(keypad_PIN &(1<<5))){
    14a8:	e6 e3       	ldi	r30, 0x36	; 54
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	80 72       	andi	r24, 0x20	; 32
    14b4:	90 70       	andi	r25, 0x00	; 0
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	09 f0       	breq	.+2      	; 0x14bc <keypad_press+0x842>
    14ba:	c5 c0       	rjmp	.+394    	; 0x1646 <keypad_press+0x9cc>
    14bc:	fe 01       	movw	r30, r28
    14be:	e9 56       	subi	r30, 0x69	; 105
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a0 e0       	ldi	r26, 0x00	; 0
    14c8:	b0 e4       	ldi	r27, 0x40	; 64
    14ca:	80 83       	st	Z, r24
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	a2 83       	std	Z+2, r26	; 0x02
    14d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d2:	8e 01       	movw	r16, r28
    14d4:	0d 56       	subi	r16, 0x6D	; 109
    14d6:	1f 4f       	sbci	r17, 0xFF	; 255
    14d8:	fe 01       	movw	r30, r28
    14da:	e9 56       	subi	r30, 0x69	; 105
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	60 81       	ld	r22, Z
    14e0:	71 81       	ldd	r23, Z+1	; 0x01
    14e2:	82 81       	ldd	r24, Z+2	; 0x02
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a e7       	ldi	r20, 0x7A	; 122
    14ec:	53 e4       	ldi	r21, 0x43	; 67
    14ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	f8 01       	movw	r30, r16
    14f8:	80 83       	st	Z, r24
    14fa:	91 83       	std	Z+1, r25	; 0x01
    14fc:	a2 83       	std	Z+2, r26	; 0x02
    14fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1500:	fe 01       	movw	r30, r28
    1502:	ed 56       	subi	r30, 0x6D	; 109
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	60 81       	ld	r22, Z
    1508:	71 81       	ldd	r23, Z+1	; 0x01
    150a:	82 81       	ldd	r24, Z+2	; 0x02
    150c:	93 81       	ldd	r25, Z+3	; 0x03
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e8       	ldi	r20, 0x80	; 128
    1514:	5f e3       	ldi	r21, 0x3F	; 63
    1516:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    151a:	88 23       	and	r24, r24
    151c:	44 f4       	brge	.+16     	; 0x152e <keypad_press+0x8b4>
		__ticks = 1;
    151e:	fe 01       	movw	r30, r28
    1520:	ef 56       	subi	r30, 0x6F	; 111
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	80 83       	st	Z, r24
    152c:	64 c0       	rjmp	.+200    	; 0x15f6 <keypad_press+0x97c>
	else if (__tmp > 65535)
    152e:	fe 01       	movw	r30, r28
    1530:	ed 56       	subi	r30, 0x6D	; 109
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	3f ef       	ldi	r19, 0xFF	; 255
    1540:	4f e7       	ldi	r20, 0x7F	; 127
    1542:	57 e4       	ldi	r21, 0x47	; 71
    1544:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1548:	18 16       	cp	r1, r24
    154a:	0c f0       	brlt	.+2      	; 0x154e <keypad_press+0x8d4>
    154c:	43 c0       	rjmp	.+134    	; 0x15d4 <keypad_press+0x95a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154e:	fe 01       	movw	r30, r28
    1550:	e9 56       	subi	r30, 0x69	; 105
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	60 81       	ld	r22, Z
    1556:	71 81       	ldd	r23, Z+1	; 0x01
    1558:	82 81       	ldd	r24, Z+2	; 0x02
    155a:	93 81       	ldd	r25, Z+3	; 0x03
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e2       	ldi	r20, 0x20	; 32
    1562:	51 e4       	ldi	r21, 0x41	; 65
    1564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	8e 01       	movw	r16, r28
    156e:	0f 56       	subi	r16, 0x6F	; 111
    1570:	1f 4f       	sbci	r17, 0xFF	; 255
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	f8 01       	movw	r30, r16
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	80 83       	st	Z, r24
    1584:	1f c0       	rjmp	.+62     	; 0x15c4 <keypad_press+0x94a>
    1586:	fe 01       	movw	r30, r28
    1588:	e1 57       	subi	r30, 0x71	; 113
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	89 e1       	ldi	r24, 0x19	; 25
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	80 83       	st	Z, r24
    1594:	fe 01       	movw	r30, r28
    1596:	e1 57       	subi	r30, 0x71	; 113
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <keypad_press+0x924>
    15a2:	fe 01       	movw	r30, r28
    15a4:	e1 57       	subi	r30, 0x71	; 113
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ac:	de 01       	movw	r26, r28
    15ae:	af 56       	subi	r26, 0x6F	; 111
    15b0:	bf 4f       	sbci	r27, 0xFF	; 255
    15b2:	fe 01       	movw	r30, r28
    15b4:	ef 56       	subi	r30, 0x6F	; 111
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	80 81       	ld	r24, Z
    15ba:	91 81       	ldd	r25, Z+1	; 0x01
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	11 96       	adiw	r26, 0x01	; 1
    15c0:	9c 93       	st	X, r25
    15c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c4:	fe 01       	movw	r30, r28
    15c6:	ef 56       	subi	r30, 0x6F	; 111
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	d1 f6       	brne	.-76     	; 0x1586 <keypad_press+0x90c>
    15d2:	28 c0       	rjmp	.+80     	; 0x1624 <keypad_press+0x9aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d4:	8e 01       	movw	r16, r28
    15d6:	0f 56       	subi	r16, 0x6F	; 111
    15d8:	1f 4f       	sbci	r17, 0xFF	; 255
    15da:	fe 01       	movw	r30, r28
    15dc:	ed 56       	subi	r30, 0x6D	; 109
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	60 81       	ld	r22, Z
    15e2:	71 81       	ldd	r23, Z+1	; 0x01
    15e4:	82 81       	ldd	r24, Z+2	; 0x02
    15e6:	93 81       	ldd	r25, Z+3	; 0x03
    15e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	f8 01       	movw	r30, r16
    15f2:	91 83       	std	Z+1, r25	; 0x01
    15f4:	80 83       	st	Z, r24
    15f6:	de 01       	movw	r26, r28
    15f8:	a3 57       	subi	r26, 0x73	; 115
    15fa:	bf 4f       	sbci	r27, 0xFF	; 255
    15fc:	fe 01       	movw	r30, r28
    15fe:	ef 56       	subi	r30, 0x6F	; 111
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	11 96       	adiw	r26, 0x01	; 1
    1608:	9c 93       	st	X, r25
    160a:	8e 93       	st	-X, r24
    160c:	fe 01       	movw	r30, r28
    160e:	e3 57       	subi	r30, 0x73	; 115
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	80 81       	ld	r24, Z
    1614:	91 81       	ldd	r25, Z+1	; 0x01
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <keypad_press+0x99c>
    161a:	fe 01       	movw	r30, r28
    161c:	e3 57       	subi	r30, 0x73	; 115
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<5)));
    1624:	e6 e3       	ldi	r30, 0x36	; 54
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	80 72       	andi	r24, 0x20	; 32
    1630:	90 70       	andi	r25, 0x00	; 0
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	b9 f3       	breq	.-18     	; 0x1624 <keypad_press+0x9aa>
	key=6;
    1636:	fe 01       	movw	r30, r28
    1638:	ef 51       	subi	r30, 0x1F	; 31
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	86 e0       	ldi	r24, 0x06	; 6
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	91 83       	std	Z+1, r25	; 0x01
    1642:	80 83       	st	Z, r24
    1644:	95 c1       	rjmp	.+810    	; 0x1970 <keypad_press+0xcf6>
	}
else if (!(keypad_PIN &(1<<6))){
    1646:	e6 e3       	ldi	r30, 0x36	; 54
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	80 74       	andi	r24, 0x40	; 64
    1652:	90 70       	andi	r25, 0x00	; 0
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	09 f0       	breq	.+2      	; 0x165a <keypad_press+0x9e0>
    1658:	c5 c0       	rjmp	.+394    	; 0x17e4 <keypad_press+0xb6a>
    165a:	fe 01       	movw	r30, r28
    165c:	e7 57       	subi	r30, 0x77	; 119
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e4       	ldi	r27, 0x40	; 64
    1668:	80 83       	st	Z, r24
    166a:	91 83       	std	Z+1, r25	; 0x01
    166c:	a2 83       	std	Z+2, r26	; 0x02
    166e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1670:	8e 01       	movw	r16, r28
    1672:	0b 57       	subi	r16, 0x7B	; 123
    1674:	1f 4f       	sbci	r17, 0xFF	; 255
    1676:	fe 01       	movw	r30, r28
    1678:	e7 57       	subi	r30, 0x77	; 119
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	60 81       	ld	r22, Z
    167e:	71 81       	ldd	r23, Z+1	; 0x01
    1680:	82 81       	ldd	r24, Z+2	; 0x02
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	4a e7       	ldi	r20, 0x7A	; 122
    168a:	53 e4       	ldi	r21, 0x43	; 67
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	f8 01       	movw	r30, r16
    1696:	80 83       	st	Z, r24
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	a2 83       	std	Z+2, r26	; 0x02
    169c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    169e:	fe 01       	movw	r30, r28
    16a0:	eb 57       	subi	r30, 0x7B	; 123
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	60 81       	ld	r22, Z
    16a6:	71 81       	ldd	r23, Z+1	; 0x01
    16a8:	82 81       	ldd	r24, Z+2	; 0x02
    16aa:	93 81       	ldd	r25, Z+3	; 0x03
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e8       	ldi	r20, 0x80	; 128
    16b2:	5f e3       	ldi	r21, 0x3F	; 63
    16b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b8:	88 23       	and	r24, r24
    16ba:	44 f4       	brge	.+16     	; 0x16cc <keypad_press+0xa52>
		__ticks = 1;
    16bc:	fe 01       	movw	r30, r28
    16be:	ed 57       	subi	r30, 0x7D	; 125
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	91 83       	std	Z+1, r25	; 0x01
    16c8:	80 83       	st	Z, r24
    16ca:	64 c0       	rjmp	.+200    	; 0x1794 <keypad_press+0xb1a>
	else if (__tmp > 65535)
    16cc:	fe 01       	movw	r30, r28
    16ce:	eb 57       	subi	r30, 0x7B	; 123
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	4f e7       	ldi	r20, 0x7F	; 127
    16e0:	57 e4       	ldi	r21, 0x47	; 71
    16e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	0c f0       	brlt	.+2      	; 0x16ec <keypad_press+0xa72>
    16ea:	43 c0       	rjmp	.+134    	; 0x1772 <keypad_press+0xaf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ec:	fe 01       	movw	r30, r28
    16ee:	e7 57       	subi	r30, 0x77	; 119
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	8e 01       	movw	r16, r28
    170c:	0d 57       	subi	r16, 0x7D	; 125
    170e:	1f 4f       	sbci	r17, 0xFF	; 255
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	f8 01       	movw	r30, r16
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	80 83       	st	Z, r24
    1722:	1f c0       	rjmp	.+62     	; 0x1762 <keypad_press+0xae8>
    1724:	fe 01       	movw	r30, r28
    1726:	ef 57       	subi	r30, 0x7F	; 127
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	89 e1       	ldi	r24, 0x19	; 25
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	80 83       	st	Z, r24
    1732:	fe 01       	movw	r30, r28
    1734:	ef 57       	subi	r30, 0x7F	; 127
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <keypad_press+0xac2>
    1740:	fe 01       	movw	r30, r28
    1742:	ef 57       	subi	r30, 0x7F	; 127
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	91 83       	std	Z+1, r25	; 0x01
    1748:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174a:	de 01       	movw	r26, r28
    174c:	ad 57       	subi	r26, 0x7D	; 125
    174e:	bf 4f       	sbci	r27, 0xFF	; 255
    1750:	fe 01       	movw	r30, r28
    1752:	ed 57       	subi	r30, 0x7D	; 125
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	80 81       	ld	r24, Z
    1758:	91 81       	ldd	r25, Z+1	; 0x01
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	11 96       	adiw	r26, 0x01	; 1
    175e:	9c 93       	st	X, r25
    1760:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1762:	fe 01       	movw	r30, r28
    1764:	ed 57       	subi	r30, 0x7D	; 125
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	d1 f6       	brne	.-76     	; 0x1724 <keypad_press+0xaaa>
    1770:	28 c0       	rjmp	.+80     	; 0x17c2 <keypad_press+0xb48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1772:	8e 01       	movw	r16, r28
    1774:	0d 57       	subi	r16, 0x7D	; 125
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	fe 01       	movw	r30, r28
    177a:	eb 57       	subi	r30, 0x7B	; 123
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	60 81       	ld	r22, Z
    1780:	71 81       	ldd	r23, Z+1	; 0x01
    1782:	82 81       	ldd	r24, Z+2	; 0x02
    1784:	93 81       	ldd	r25, Z+3	; 0x03
    1786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	f8 01       	movw	r30, r16
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	80 83       	st	Z, r24
    1794:	de 01       	movw	r26, r28
    1796:	a1 58       	subi	r26, 0x81	; 129
    1798:	bf 4f       	sbci	r27, 0xFF	; 255
    179a:	fe 01       	movw	r30, r28
    179c:	ed 57       	subi	r30, 0x7D	; 125
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	80 81       	ld	r24, Z
    17a2:	91 81       	ldd	r25, Z+1	; 0x01
    17a4:	11 96       	adiw	r26, 0x01	; 1
    17a6:	9c 93       	st	X, r25
    17a8:	8e 93       	st	-X, r24
    17aa:	fe 01       	movw	r30, r28
    17ac:	e1 58       	subi	r30, 0x81	; 129
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 81       	ld	r24, Z
    17b2:	91 81       	ldd	r25, Z+1	; 0x01
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <keypad_press+0xb3a>
    17b8:	fe 01       	movw	r30, r28
    17ba:	e1 58       	subi	r30, 0x81	; 129
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<6)));
    17c2:	e6 e3       	ldi	r30, 0x36	; 54
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	80 74       	andi	r24, 0x40	; 64
    17ce:	90 70       	andi	r25, 0x00	; 0
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	b9 f3       	breq	.-18     	; 0x17c2 <keypad_press+0xb48>
	key=7;
    17d4:	fe 01       	movw	r30, r28
    17d6:	ef 51       	subi	r30, 0x1F	; 31
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	87 e0       	ldi	r24, 0x07	; 7
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
    17e2:	c6 c0       	rjmp	.+396    	; 0x1970 <keypad_press+0xcf6>
	}
else if (!(keypad_PIN &(1<<7))){
    17e4:	e6 e3       	ldi	r30, 0x36	; 54
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	88 23       	and	r24, r24
    17ec:	0c f4       	brge	.+2      	; 0x17f0 <keypad_press+0xb76>
    17ee:	c0 c0       	rjmp	.+384    	; 0x1970 <keypad_press+0xcf6>
    17f0:	fe 01       	movw	r30, r28
    17f2:	e5 58       	subi	r30, 0x85	; 133
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e0       	ldi	r26, 0x00	; 0
    17fc:	b0 e4       	ldi	r27, 0x40	; 64
    17fe:	80 83       	st	Z, r24
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	a2 83       	std	Z+2, r26	; 0x02
    1804:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	8e 01       	movw	r16, r28
    1808:	09 58       	subi	r16, 0x89	; 137
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	fe 01       	movw	r30, r28
    180e:	e5 58       	subi	r30, 0x85	; 133
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a e7       	ldi	r20, 0x7A	; 122
    1820:	53 e4       	ldi	r21, 0x43	; 67
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	f8 01       	movw	r30, r16
    182c:	80 83       	st	Z, r24
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	a2 83       	std	Z+2, r26	; 0x02
    1832:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1834:	fe 01       	movw	r30, r28
    1836:	e9 58       	subi	r30, 0x89	; 137
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    184e:	88 23       	and	r24, r24
    1850:	44 f4       	brge	.+16     	; 0x1862 <keypad_press+0xbe8>
		__ticks = 1;
    1852:	fe 01       	movw	r30, r28
    1854:	eb 58       	subi	r30, 0x8B	; 139
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	91 83       	std	Z+1, r25	; 0x01
    185e:	80 83       	st	Z, r24
    1860:	64 c0       	rjmp	.+200    	; 0x192a <keypad_press+0xcb0>
	else if (__tmp > 65535)
    1862:	fe 01       	movw	r30, r28
    1864:	e9 58       	subi	r30, 0x89	; 137
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	60 81       	ld	r22, Z
    186a:	71 81       	ldd	r23, Z+1	; 0x01
    186c:	82 81       	ldd	r24, Z+2	; 0x02
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	0c f0       	brlt	.+2      	; 0x1882 <keypad_press+0xc08>
    1880:	43 c0       	rjmp	.+134    	; 0x1908 <keypad_press+0xc8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	fe 01       	movw	r30, r28
    1884:	e5 58       	subi	r30, 0x85	; 133
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e2       	ldi	r20, 0x20	; 32
    1896:	51 e4       	ldi	r21, 0x41	; 65
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	8e 01       	movw	r16, r28
    18a2:	0b 58       	subi	r16, 0x8B	; 139
    18a4:	1f 4f       	sbci	r17, 0xFF	; 255
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	f8 01       	movw	r30, r16
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
    18b8:	1f c0       	rjmp	.+62     	; 0x18f8 <keypad_press+0xc7e>
    18ba:	fe 01       	movw	r30, r28
    18bc:	ed 58       	subi	r30, 0x8D	; 141
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	89 e1       	ldi	r24, 0x19	; 25
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
    18c8:	fe 01       	movw	r30, r28
    18ca:	ed 58       	subi	r30, 0x8D	; 141
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 81       	ld	r24, Z
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <keypad_press+0xc58>
    18d6:	fe 01       	movw	r30, r28
    18d8:	ed 58       	subi	r30, 0x8D	; 141
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e0:	de 01       	movw	r26, r28
    18e2:	ab 58       	subi	r26, 0x8B	; 139
    18e4:	bf 4f       	sbci	r27, 0xFF	; 255
    18e6:	fe 01       	movw	r30, r28
    18e8:	eb 58       	subi	r30, 0x8B	; 139
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	91 81       	ldd	r25, Z+1	; 0x01
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	11 96       	adiw	r26, 0x01	; 1
    18f4:	9c 93       	st	X, r25
    18f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f8:	fe 01       	movw	r30, r28
    18fa:	eb 58       	subi	r30, 0x8B	; 139
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	80 81       	ld	r24, Z
    1900:	91 81       	ldd	r25, Z+1	; 0x01
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	d1 f6       	brne	.-76     	; 0x18ba <keypad_press+0xc40>
    1906:	28 c0       	rjmp	.+80     	; 0x1958 <keypad_press+0xcde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1908:	8e 01       	movw	r16, r28
    190a:	0b 58       	subi	r16, 0x8B	; 139
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
    190e:	fe 01       	movw	r30, r28
    1910:	e9 58       	subi	r30, 0x89	; 137
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	f8 01       	movw	r30, r16
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	80 83       	st	Z, r24
    192a:	de 01       	movw	r26, r28
    192c:	af 58       	subi	r26, 0x8F	; 143
    192e:	bf 4f       	sbci	r27, 0xFF	; 255
    1930:	fe 01       	movw	r30, r28
    1932:	eb 58       	subi	r30, 0x8B	; 139
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
    193a:	11 96       	adiw	r26, 0x01	; 1
    193c:	9c 93       	st	X, r25
    193e:	8e 93       	st	-X, r24
    1940:	fe 01       	movw	r30, r28
    1942:	ef 58       	subi	r30, 0x8F	; 143
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <keypad_press+0xcd0>
    194e:	fe 01       	movw	r30, r28
    1950:	ef 58       	subi	r30, 0x8F	; 143
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<7)));
    1958:	e6 e3       	ldi	r30, 0x36	; 54
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	88 23       	and	r24, r24
    1960:	dc f7       	brge	.-10     	; 0x1958 <keypad_press+0xcde>
	key=8;
    1962:	fe 01       	movw	r30, r28
    1964:	ef 51       	subi	r30, 0x1F	; 31
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	88 e0       	ldi	r24, 0x08	; 8
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
	}
keypad_PORT=0XFB;
    1970:	e8 e3       	ldi	r30, 0x38	; 56
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	8b ef       	ldi	r24, 0xFB	; 251
    1976:	80 83       	st	Z, r24
if (!(keypad_PIN &(1<<4))){
    1978:	e6 e3       	ldi	r30, 0x36	; 54
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	80 71       	andi	r24, 0x10	; 16
    1984:	90 70       	andi	r25, 0x00	; 0
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	09 f0       	breq	.+2      	; 0x198c <keypad_press+0xd12>
    198a:	c5 c0       	rjmp	.+394    	; 0x1b16 <keypad_press+0xe9c>
    198c:	fe 01       	movw	r30, r28
    198e:	e3 59       	subi	r30, 0x93	; 147
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a0 e0       	ldi	r26, 0x00	; 0
    1998:	b0 e4       	ldi	r27, 0x40	; 64
    199a:	80 83       	st	Z, r24
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	a2 83       	std	Z+2, r26	; 0x02
    19a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a2:	8e 01       	movw	r16, r28
    19a4:	07 59       	subi	r16, 0x97	; 151
    19a6:	1f 4f       	sbci	r17, 0xFF	; 255
    19a8:	fe 01       	movw	r30, r28
    19aa:	e3 59       	subi	r30, 0x93	; 147
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a e7       	ldi	r20, 0x7A	; 122
    19bc:	53 e4       	ldi	r21, 0x43	; 67
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	f8 01       	movw	r30, r16
    19c8:	80 83       	st	Z, r24
    19ca:	91 83       	std	Z+1, r25	; 0x01
    19cc:	a2 83       	std	Z+2, r26	; 0x02
    19ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19d0:	fe 01       	movw	r30, r28
    19d2:	e7 59       	subi	r30, 0x97	; 151
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	60 81       	ld	r22, Z
    19d8:	71 81       	ldd	r23, Z+1	; 0x01
    19da:	82 81       	ldd	r24, Z+2	; 0x02
    19dc:	93 81       	ldd	r25, Z+3	; 0x03
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e8       	ldi	r20, 0x80	; 128
    19e4:	5f e3       	ldi	r21, 0x3F	; 63
    19e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ea:	88 23       	and	r24, r24
    19ec:	44 f4       	brge	.+16     	; 0x19fe <keypad_press+0xd84>
		__ticks = 1;
    19ee:	fe 01       	movw	r30, r28
    19f0:	e9 59       	subi	r30, 0x99	; 153
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
    19fc:	64 c0       	rjmp	.+200    	; 0x1ac6 <keypad_press+0xe4c>
	else if (__tmp > 65535)
    19fe:	fe 01       	movw	r30, r28
    1a00:	e7 59       	subi	r30, 0x97	; 151
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	57 e4       	ldi	r21, 0x47	; 71
    1a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	0c f0       	brlt	.+2      	; 0x1a1e <keypad_press+0xda4>
    1a1c:	43 c0       	rjmp	.+134    	; 0x1aa4 <keypad_press+0xe2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e3 59       	subi	r30, 0x93	; 147
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	60 81       	ld	r22, Z
    1a26:	71 81       	ldd	r23, Z+1	; 0x01
    1a28:	82 81       	ldd	r24, Z+2	; 0x02
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e2       	ldi	r20, 0x20	; 32
    1a32:	51 e4       	ldi	r21, 0x41	; 65
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	8e 01       	movw	r16, r28
    1a3e:	09 59       	subi	r16, 0x99	; 153
    1a40:	1f 4f       	sbci	r17, 0xFF	; 255
    1a42:	bc 01       	movw	r22, r24
    1a44:	cd 01       	movw	r24, r26
    1a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	f8 01       	movw	r30, r16
    1a50:	91 83       	std	Z+1, r25	; 0x01
    1a52:	80 83       	st	Z, r24
    1a54:	1f c0       	rjmp	.+62     	; 0x1a94 <keypad_press+0xe1a>
    1a56:	fe 01       	movw	r30, r28
    1a58:	eb 59       	subi	r30, 0x9B	; 155
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	89 e1       	ldi	r24, 0x19	; 25
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	80 83       	st	Z, r24
    1a64:	fe 01       	movw	r30, r28
    1a66:	eb 59       	subi	r30, 0x9B	; 155
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <keypad_press+0xdf4>
    1a72:	fe 01       	movw	r30, r28
    1a74:	eb 59       	subi	r30, 0x9B	; 155
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7c:	de 01       	movw	r26, r28
    1a7e:	a9 59       	subi	r26, 0x99	; 153
    1a80:	bf 4f       	sbci	r27, 0xFF	; 255
    1a82:	fe 01       	movw	r30, r28
    1a84:	e9 59       	subi	r30, 0x99	; 153
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	91 81       	ldd	r25, Z+1	; 0x01
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	11 96       	adiw	r26, 0x01	; 1
    1a90:	9c 93       	st	X, r25
    1a92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a94:	fe 01       	movw	r30, r28
    1a96:	e9 59       	subi	r30, 0x99	; 153
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	80 81       	ld	r24, Z
    1a9c:	91 81       	ldd	r25, Z+1	; 0x01
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	d1 f6       	brne	.-76     	; 0x1a56 <keypad_press+0xddc>
    1aa2:	28 c0       	rjmp	.+80     	; 0x1af4 <keypad_press+0xe7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa4:	8e 01       	movw	r16, r28
    1aa6:	09 59       	subi	r16, 0x99	; 153
    1aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e7 59       	subi	r30, 0x97	; 151
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	80 83       	st	Z, r24
    1ac6:	de 01       	movw	r26, r28
    1ac8:	ad 59       	subi	r26, 0x9D	; 157
    1aca:	bf 4f       	sbci	r27, 0xFF	; 255
    1acc:	fe 01       	movw	r30, r28
    1ace:	e9 59       	subi	r30, 0x99	; 153
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	11 96       	adiw	r26, 0x01	; 1
    1ad8:	9c 93       	st	X, r25
    1ada:	8e 93       	st	-X, r24
    1adc:	fe 01       	movw	r30, r28
    1ade:	ed 59       	subi	r30, 0x9D	; 157
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	80 81       	ld	r24, Z
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <keypad_press+0xe6c>
    1aea:	fe 01       	movw	r30, r28
    1aec:	ed 59       	subi	r30, 0x9D	; 157
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	80 83       	st	Z, r24
_delay_ms(2);
while(!(keypad_PIN &(1<<4)));
    1af4:	e6 e3       	ldi	r30, 0x36	; 54
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	88 2f       	mov	r24, r24
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	80 71       	andi	r24, 0x10	; 16
    1b00:	90 70       	andi	r25, 0x00	; 0
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	b9 f3       	breq	.-18     	; 0x1af4 <keypad_press+0xe7a>
key=9;
    1b06:	fe 01       	movw	r30, r28
    1b08:	ef 51       	subi	r30, 0x1F	; 31
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	89 e0       	ldi	r24, 0x09	; 9
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	91 83       	std	Z+1, r25	; 0x01
    1b12:	80 83       	st	Z, r24
    1b14:	35 c2       	rjmp	.+1130   	; 0x1f80 <keypad_press+0x1306>
}
else if (!(keypad_PIN &(1<<5))){
    1b16:	e6 e3       	ldi	r30, 0x36	; 54
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	80 72       	andi	r24, 0x20	; 32
    1b22:	90 70       	andi	r25, 0x00	; 0
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <keypad_press+0xeb0>
    1b28:	c5 c0       	rjmp	.+394    	; 0x1cb4 <keypad_press+0x103a>
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	e1 5a       	subi	r30, 0xA1	; 161
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a0 e0       	ldi	r26, 0x00	; 0
    1b36:	b0 e4       	ldi	r27, 0x40	; 64
    1b38:	80 83       	st	Z, r24
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	a2 83       	std	Z+2, r26	; 0x02
    1b3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b40:	8e 01       	movw	r16, r28
    1b42:	05 5a       	subi	r16, 0xA5	; 165
    1b44:	1f 4f       	sbci	r17, 0xFF	; 255
    1b46:	fe 01       	movw	r30, r28
    1b48:	e1 5a       	subi	r30, 0xA1	; 161
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	60 81       	ld	r22, Z
    1b4e:	71 81       	ldd	r23, Z+1	; 0x01
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	4a e7       	ldi	r20, 0x7A	; 122
    1b5a:	53 e4       	ldi	r21, 0x43	; 67
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	f8 01       	movw	r30, r16
    1b66:	80 83       	st	Z, r24
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	a2 83       	std	Z+2, r26	; 0x02
    1b6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e5 5a       	subi	r30, 0xA5	; 165
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	60 81       	ld	r22, Z
    1b76:	71 81       	ldd	r23, Z+1	; 0x01
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	44 f4       	brge	.+16     	; 0x1b9c <keypad_press+0xf22>
		__ticks = 1;
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e7 5a       	subi	r30, 0xA7	; 167
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	80 83       	st	Z, r24
    1b9a:	64 c0       	rjmp	.+200    	; 0x1c64 <keypad_press+0xfea>
	else if (__tmp > 65535)
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e5 5a       	subi	r30, 0xA5	; 165
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	0c f0       	brlt	.+2      	; 0x1bbc <keypad_press+0xf42>
    1bba:	43 c0       	rjmp	.+134    	; 0x1c42 <keypad_press+0xfc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e1 5a       	subi	r30, 0xA1	; 161
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e2       	ldi	r20, 0x20	; 32
    1bd0:	51 e4       	ldi	r21, 0x41	; 65
    1bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	8e 01       	movw	r16, r28
    1bdc:	07 5a       	subi	r16, 0xA7	; 167
    1bde:	1f 4f       	sbci	r17, 0xFF	; 255
    1be0:	bc 01       	movw	r22, r24
    1be2:	cd 01       	movw	r24, r26
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	f8 01       	movw	r30, r16
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	80 83       	st	Z, r24
    1bf2:	1f c0       	rjmp	.+62     	; 0x1c32 <keypad_press+0xfb8>
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e9 5a       	subi	r30, 0xA9	; 169
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	89 e1       	ldi	r24, 0x19	; 25
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	80 83       	st	Z, r24
    1c02:	fe 01       	movw	r30, r28
    1c04:	e9 5a       	subi	r30, 0xA9	; 169
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 81       	ld	r24, Z
    1c0a:	91 81       	ldd	r25, Z+1	; 0x01
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <keypad_press+0xf92>
    1c10:	fe 01       	movw	r30, r28
    1c12:	e9 5a       	subi	r30, 0xA9	; 169
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1a:	de 01       	movw	r26, r28
    1c1c:	a7 5a       	subi	r26, 0xA7	; 167
    1c1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c20:	fe 01       	movw	r30, r28
    1c22:	e7 5a       	subi	r30, 0xA7	; 167
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	80 81       	ld	r24, Z
    1c28:	91 81       	ldd	r25, Z+1	; 0x01
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	11 96       	adiw	r26, 0x01	; 1
    1c2e:	9c 93       	st	X, r25
    1c30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c32:	fe 01       	movw	r30, r28
    1c34:	e7 5a       	subi	r30, 0xA7	; 167
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	80 81       	ld	r24, Z
    1c3a:	91 81       	ldd	r25, Z+1	; 0x01
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	d1 f6       	brne	.-76     	; 0x1bf4 <keypad_press+0xf7a>
    1c40:	28 c0       	rjmp	.+80     	; 0x1c92 <keypad_press+0x1018>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c42:	8e 01       	movw	r16, r28
    1c44:	07 5a       	subi	r16, 0xA7	; 167
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e5 5a       	subi	r30, 0xA5	; 165
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	f8 01       	movw	r30, r16
    1c60:	91 83       	std	Z+1, r25	; 0x01
    1c62:	80 83       	st	Z, r24
    1c64:	de 01       	movw	r26, r28
    1c66:	ab 5a       	subi	r26, 0xAB	; 171
    1c68:	bf 4f       	sbci	r27, 0xFF	; 255
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e7 5a       	subi	r30, 0xA7	; 167
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	80 81       	ld	r24, Z
    1c72:	91 81       	ldd	r25, Z+1	; 0x01
    1c74:	11 96       	adiw	r26, 0x01	; 1
    1c76:	9c 93       	st	X, r25
    1c78:	8e 93       	st	-X, r24
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	eb 5a       	subi	r30, 0xAB	; 171
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <keypad_press+0x100a>
    1c88:	fe 01       	movw	r30, r28
    1c8a:	eb 5a       	subi	r30, 0xAB	; 171
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<5)));
    1c92:	e6 e3       	ldi	r30, 0x36	; 54
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	80 72       	andi	r24, 0x20	; 32
    1c9e:	90 70       	andi	r25, 0x00	; 0
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	b9 f3       	breq	.-18     	; 0x1c92 <keypad_press+0x1018>
	key=10;
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	ef 51       	subi	r30, 0x1F	; 31
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	8a e0       	ldi	r24, 0x0A	; 10
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	80 83       	st	Z, r24
    1cb2:	66 c1       	rjmp	.+716    	; 0x1f80 <keypad_press+0x1306>
	}
else if (!(keypad_PIN &(1<<6))){
    1cb4:	e6 e3       	ldi	r30, 0x36	; 54
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	80 74       	andi	r24, 0x40	; 64
    1cc0:	90 70       	andi	r25, 0x00	; 0
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <keypad_press+0x104e>
    1cc6:	c5 c0       	rjmp	.+394    	; 0x1e52 <keypad_press+0x11d8>
    1cc8:	fe 01       	movw	r30, r28
    1cca:	ef 5a       	subi	r30, 0xAF	; 175
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a0 e0       	ldi	r26, 0x00	; 0
    1cd4:	b0 e4       	ldi	r27, 0x40	; 64
    1cd6:	80 83       	st	Z, r24
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	a2 83       	std	Z+2, r26	; 0x02
    1cdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cde:	8e 01       	movw	r16, r28
    1ce0:	03 5b       	subi	r16, 0xB3	; 179
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	ef 5a       	subi	r30, 0xAF	; 175
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a e7       	ldi	r20, 0x7A	; 122
    1cf8:	53 e4       	ldi	r21, 0x43	; 67
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	f8 01       	movw	r30, r16
    1d04:	80 83       	st	Z, r24
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	a2 83       	std	Z+2, r26	; 0x02
    1d0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e3 5b       	subi	r30, 0xB3	; 179
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d26:	88 23       	and	r24, r24
    1d28:	44 f4       	brge	.+16     	; 0x1d3a <keypad_press+0x10c0>
		__ticks = 1;
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e5 5b       	subi	r30, 0xB5	; 181
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	80 83       	st	Z, r24
    1d38:	64 c0       	rjmp	.+200    	; 0x1e02 <keypad_press+0x1188>
	else if (__tmp > 65535)
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e3 5b       	subi	r30, 0xB3	; 179
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	57 e4       	ldi	r21, 0x47	; 71
    1d50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	0c f0       	brlt	.+2      	; 0x1d5a <keypad_press+0x10e0>
    1d58:	43 c0       	rjmp	.+134    	; 0x1de0 <keypad_press+0x1166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	ef 5a       	subi	r30, 0xAF	; 175
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e2       	ldi	r20, 0x20	; 32
    1d6e:	51 e4       	ldi	r21, 0x41	; 65
    1d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	8e 01       	movw	r16, r28
    1d7a:	05 5b       	subi	r16, 0xB5	; 181
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	1f c0       	rjmp	.+62     	; 0x1dd0 <keypad_press+0x1156>
    1d92:	fe 01       	movw	r30, r28
    1d94:	e7 5b       	subi	r30, 0xB7	; 183
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	89 e1       	ldi	r24, 0x19	; 25
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
    1da0:	fe 01       	movw	r30, r28
    1da2:	e7 5b       	subi	r30, 0xB7	; 183
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 81       	ld	r24, Z
    1da8:	91 81       	ldd	r25, Z+1	; 0x01
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <keypad_press+0x1130>
    1dae:	fe 01       	movw	r30, r28
    1db0:	e7 5b       	subi	r30, 0xB7	; 183
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	91 83       	std	Z+1, r25	; 0x01
    1db6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db8:	de 01       	movw	r26, r28
    1dba:	a5 5b       	subi	r26, 0xB5	; 181
    1dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e5 5b       	subi	r30, 0xB5	; 181
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 81       	ld	r24, Z
    1dc6:	91 81       	ldd	r25, Z+1	; 0x01
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	11 96       	adiw	r26, 0x01	; 1
    1dcc:	9c 93       	st	X, r25
    1dce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e5 5b       	subi	r30, 0xB5	; 181
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	d1 f6       	brne	.-76     	; 0x1d92 <keypad_press+0x1118>
    1dde:	28 c0       	rjmp	.+80     	; 0x1e30 <keypad_press+0x11b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de0:	8e 01       	movw	r16, r28
    1de2:	05 5b       	subi	r16, 0xB5	; 181
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	fe 01       	movw	r30, r28
    1de8:	e3 5b       	subi	r30, 0xB3	; 179
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
    1e02:	de 01       	movw	r26, r28
    1e04:	a9 5b       	subi	r26, 0xB9	; 185
    1e06:	bf 4f       	sbci	r27, 0xFF	; 255
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e5 5b       	subi	r30, 0xB5	; 181
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 81       	ld	r24, Z
    1e10:	91 81       	ldd	r25, Z+1	; 0x01
    1e12:	11 96       	adiw	r26, 0x01	; 1
    1e14:	9c 93       	st	X, r25
    1e16:	8e 93       	st	-X, r24
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e9 5b       	subi	r30, 0xB9	; 185
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <keypad_press+0x11a8>
    1e26:	fe 01       	movw	r30, r28
    1e28:	e9 5b       	subi	r30, 0xB9	; 185
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<6)));
    1e30:	e6 e3       	ldi	r30, 0x36	; 54
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	80 74       	andi	r24, 0x40	; 64
    1e3c:	90 70       	andi	r25, 0x00	; 0
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	b9 f3       	breq	.-18     	; 0x1e30 <keypad_press+0x11b6>
	key=11;
    1e42:	fe 01       	movw	r30, r28
    1e44:	ef 51       	subi	r30, 0x1F	; 31
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	8b e0       	ldi	r24, 0x0B	; 11
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	91 83       	std	Z+1, r25	; 0x01
    1e4e:	80 83       	st	Z, r24
    1e50:	97 c0       	rjmp	.+302    	; 0x1f80 <keypad_press+0x1306>
	}
else if (!(keypad_PIN &(1<<7))){
    1e52:	e6 e3       	ldi	r30, 0x36	; 54
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	88 23       	and	r24, r24
    1e5a:	0c f4       	brge	.+2      	; 0x1e5e <keypad_press+0x11e4>
    1e5c:	91 c0       	rjmp	.+290    	; 0x1f80 <keypad_press+0x1306>
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ed 5b       	subi	r30, 0xBD	; 189
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 e0       	ldi	r26, 0x00	; 0
    1e6a:	b0 e4       	ldi	r27, 0x40	; 64
    1e6c:	80 83       	st	Z, r24
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	a2 83       	std	Z+2, r26	; 0x02
    1e72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	8e 01       	movw	r16, r28
    1e76:	01 5c       	subi	r16, 0xC1	; 193
    1e78:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ed 5b       	subi	r30, 0xBD	; 189
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a e7       	ldi	r20, 0x7A	; 122
    1e8e:	53 e4       	ldi	r21, 0x43	; 67
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	f8 01       	movw	r30, r16
    1e9a:	80 83       	st	Z, r24
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	a2 83       	std	Z+2, r26	; 0x02
    1ea0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	ff 96       	adiw	r30, 0x3f	; 63
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	2c f4       	brge	.+10     	; 0x1ec8 <keypad_press+0x124e>
		__ticks = 1;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	9e af       	std	Y+62, r25	; 0x3e
    1ec4:	8d af       	std	Y+61, r24	; 0x3d
    1ec6:	46 c0       	rjmp	.+140    	; 0x1f54 <keypad_press+0x12da>
	else if (__tmp > 65535)
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ff 96       	adiw	r30, 0x3f	; 63
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	64 f5       	brge	.+88     	; 0x1f3c <keypad_press+0x12c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ed 5b       	subi	r30, 0xBD	; 189
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9e af       	std	Y+62, r25	; 0x3e
    1f10:	8d af       	std	Y+61, r24	; 0x3d
    1f12:	0f c0       	rjmp	.+30     	; 0x1f32 <keypad_press+0x12b8>
    1f14:	89 e1       	ldi	r24, 0x19	; 25
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9c af       	std	Y+60, r25	; 0x3c
    1f1a:	8b af       	std	Y+59, r24	; 0x3b
    1f1c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f1e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <keypad_press+0x12a6>
    1f24:	9c af       	std	Y+60, r25	; 0x3c
    1f26:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	9e af       	std	Y+62, r25	; 0x3e
    1f30:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f32:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f34:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	69 f7       	brne	.-38     	; 0x1f14 <keypad_press+0x129a>
    1f3a:	16 c0       	rjmp	.+44     	; 0x1f68 <keypad_press+0x12ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ff 96       	adiw	r30, 0x3f	; 63
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9e af       	std	Y+62, r25	; 0x3e
    1f52:	8d af       	std	Y+61, r24	; 0x3d
    1f54:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f56:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f58:	9a af       	std	Y+58, r25	; 0x3a
    1f5a:	89 af       	std	Y+57, r24	; 0x39
    1f5c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f5e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <keypad_press+0x12e6>
    1f64:	9a af       	std	Y+58, r25	; 0x3a
    1f66:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	while(!(keypad_PIN &(1<<7)));
    1f68:	e6 e3       	ldi	r30, 0x36	; 54
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	88 23       	and	r24, r24
    1f70:	dc f7       	brge	.-10     	; 0x1f68 <keypad_press+0x12ee>
	key=12;
    1f72:	fe 01       	movw	r30, r28
    1f74:	ef 51       	subi	r30, 0x1F	; 31
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	8c e0       	ldi	r24, 0x0C	; 12
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
	}
keypad_PORT=0XF7;
    1f80:	e8 e3       	ldi	r30, 0x38	; 56
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	87 ef       	ldi	r24, 0xF7	; 247
    1f86:	80 83       	st	Z, r24
if (!(keypad_PIN &(1<<4))){
    1f88:	e6 e3       	ldi	r30, 0x36	; 54
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	80 71       	andi	r24, 0x10	; 16
    1f94:	90 70       	andi	r25, 0x00	; 0
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <keypad_press+0x1322>
    1f9a:	83 c0       	rjmp	.+262    	; 0x20a2 <keypad_press+0x1428>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a0 e0       	ldi	r26, 0x00	; 0
    1fa2:	b0 e4       	ldi	r27, 0x40	; 64
    1fa4:	8d ab       	std	Y+53, r24	; 0x35
    1fa6:	9e ab       	std	Y+54, r25	; 0x36
    1fa8:	af ab       	std	Y+55, r26	; 0x37
    1faa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fac:	6d a9       	ldd	r22, Y+53	; 0x35
    1fae:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb0:	8f a9       	ldd	r24, Y+55	; 0x37
    1fb2:	98 ad       	ldd	r25, Y+56	; 0x38
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	4a e7       	ldi	r20, 0x7A	; 122
    1fba:	53 e4       	ldi	r21, 0x43	; 67
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	89 ab       	std	Y+49, r24	; 0x31
    1fc6:	9a ab       	std	Y+50, r25	; 0x32
    1fc8:	ab ab       	std	Y+51, r26	; 0x33
    1fca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1fce:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e8       	ldi	r20, 0x80	; 128
    1fda:	5f e3       	ldi	r21, 0x3F	; 63
    1fdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe0:	88 23       	and	r24, r24
    1fe2:	2c f4       	brge	.+10     	; 0x1fee <keypad_press+0x1374>
		__ticks = 1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	98 ab       	std	Y+48, r25	; 0x30
    1fea:	8f a7       	std	Y+47, r24	; 0x2f
    1fec:	3f c0       	rjmp	.+126    	; 0x206c <keypad_press+0x13f2>
	else if (__tmp > 65535)
    1fee:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	3f ef       	ldi	r19, 0xFF	; 255
    1ffa:	4f e7       	ldi	r20, 0x7F	; 127
    1ffc:	57 e4       	ldi	r21, 0x47	; 71
    1ffe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2002:	18 16       	cp	r1, r24
    2004:	4c f5       	brge	.+82     	; 0x2058 <keypad_press+0x13de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2006:	6d a9       	ldd	r22, Y+53	; 0x35
    2008:	7e a9       	ldd	r23, Y+54	; 0x36
    200a:	8f a9       	ldd	r24, Y+55	; 0x37
    200c:	98 ad       	ldd	r25, Y+56	; 0x38
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e2       	ldi	r20, 0x20	; 32
    2014:	51 e4       	ldi	r21, 0x41	; 65
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	98 ab       	std	Y+48, r25	; 0x30
    202c:	8f a7       	std	Y+47, r24	; 0x2f
    202e:	0f c0       	rjmp	.+30     	; 0x204e <keypad_press+0x13d4>
    2030:	89 e1       	ldi	r24, 0x19	; 25
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9e a7       	std	Y+46, r25	; 0x2e
    2036:	8d a7       	std	Y+45, r24	; 0x2d
    2038:	8d a5       	ldd	r24, Y+45	; 0x2d
    203a:	9e a5       	ldd	r25, Y+46	; 0x2e
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <keypad_press+0x13c2>
    2040:	9e a7       	std	Y+46, r25	; 0x2e
    2042:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2044:	8f a5       	ldd	r24, Y+47	; 0x2f
    2046:	98 a9       	ldd	r25, Y+48	; 0x30
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	98 ab       	std	Y+48, r25	; 0x30
    204c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2050:	98 a9       	ldd	r25, Y+48	; 0x30
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	69 f7       	brne	.-38     	; 0x2030 <keypad_press+0x13b6>
    2056:	14 c0       	rjmp	.+40     	; 0x2080 <keypad_press+0x1406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2058:	69 a9       	ldd	r22, Y+49	; 0x31
    205a:	7a a9       	ldd	r23, Y+50	; 0x32
    205c:	8b a9       	ldd	r24, Y+51	; 0x33
    205e:	9c a9       	ldd	r25, Y+52	; 0x34
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	98 ab       	std	Y+48, r25	; 0x30
    206a:	8f a7       	std	Y+47, r24	; 0x2f
    206c:	8f a5       	ldd	r24, Y+47	; 0x2f
    206e:	98 a9       	ldd	r25, Y+48	; 0x30
    2070:	9c a7       	std	Y+44, r25	; 0x2c
    2072:	8b a7       	std	Y+43, r24	; 0x2b
    2074:	8b a5       	ldd	r24, Y+43	; 0x2b
    2076:	9c a5       	ldd	r25, Y+44	; 0x2c
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <keypad_press+0x13fe>
    207c:	9c a7       	std	Y+44, r25	; 0x2c
    207e:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(2);
while(!(keypad_PIN &(1<<4)));
    2080:	e6 e3       	ldi	r30, 0x36	; 54
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	80 71       	andi	r24, 0x10	; 16
    208c:	90 70       	andi	r25, 0x00	; 0
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	b9 f3       	breq	.-18     	; 0x2080 <keypad_press+0x1406>
key=13;
    2092:	fe 01       	movw	r30, r28
    2094:	ef 51       	subi	r30, 0x1F	; 31
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	8d e0       	ldi	r24, 0x0D	; 13
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
    20a0:	9e c1       	rjmp	.+828    	; 0x23de <keypad_press+0x1764>
}
else if (!(keypad_PIN &(1<<5))){
    20a2:	e6 e3       	ldi	r30, 0x36	; 54
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	80 72       	andi	r24, 0x20	; 32
    20ae:	90 70       	andi	r25, 0x00	; 0
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <keypad_press+0x143c>
    20b4:	83 c0       	rjmp	.+262    	; 0x21bc <keypad_press+0x1542>
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	a0 e0       	ldi	r26, 0x00	; 0
    20bc:	b0 e4       	ldi	r27, 0x40	; 64
    20be:	8f a3       	std	Y+39, r24	; 0x27
    20c0:	98 a7       	std	Y+40, r25	; 0x28
    20c2:	a9 a7       	std	Y+41, r26	; 0x29
    20c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c6:	6f a1       	ldd	r22, Y+39	; 0x27
    20c8:	78 a5       	ldd	r23, Y+40	; 0x28
    20ca:	89 a5       	ldd	r24, Y+41	; 0x29
    20cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a e7       	ldi	r20, 0x7A	; 122
    20d4:	53 e4       	ldi	r21, 0x43	; 67
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	8b a3       	std	Y+35, r24	; 0x23
    20e0:	9c a3       	std	Y+36, r25	; 0x24
    20e2:	ad a3       	std	Y+37, r26	; 0x25
    20e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20e6:	6b a1       	ldd	r22, Y+35	; 0x23
    20e8:	7c a1       	ldd	r23, Y+36	; 0x24
    20ea:	8d a1       	ldd	r24, Y+37	; 0x25
    20ec:	9e a1       	ldd	r25, Y+38	; 0x26
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fa:	88 23       	and	r24, r24
    20fc:	2c f4       	brge	.+10     	; 0x2108 <keypad_press+0x148e>
		__ticks = 1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9a a3       	std	Y+34, r25	; 0x22
    2104:	89 a3       	std	Y+33, r24	; 0x21
    2106:	3f c0       	rjmp	.+126    	; 0x2186 <keypad_press+0x150c>
	else if (__tmp > 65535)
    2108:	6b a1       	ldd	r22, Y+35	; 0x23
    210a:	7c a1       	ldd	r23, Y+36	; 0x24
    210c:	8d a1       	ldd	r24, Y+37	; 0x25
    210e:	9e a1       	ldd	r25, Y+38	; 0x26
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	3f ef       	ldi	r19, 0xFF	; 255
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	57 e4       	ldi	r21, 0x47	; 71
    2118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	4c f5       	brge	.+82     	; 0x2172 <keypad_press+0x14f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	6f a1       	ldd	r22, Y+39	; 0x27
    2122:	78 a5       	ldd	r23, Y+40	; 0x28
    2124:	89 a5       	ldd	r24, Y+41	; 0x29
    2126:	9a a5       	ldd	r25, Y+42	; 0x2a
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e2       	ldi	r20, 0x20	; 32
    212e:	51 e4       	ldi	r21, 0x41	; 65
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9a a3       	std	Y+34, r25	; 0x22
    2146:	89 a3       	std	Y+33, r24	; 0x21
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <keypad_press+0x14ee>
    214a:	89 e1       	ldi	r24, 0x19	; 25
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	98 a3       	std	Y+32, r25	; 0x20
    2150:	8f 8f       	std	Y+31, r24	; 0x1f
    2152:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2154:	98 a1       	ldd	r25, Y+32	; 0x20
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <keypad_press+0x14dc>
    215a:	98 a3       	std	Y+32, r25	; 0x20
    215c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	89 a1       	ldd	r24, Y+33	; 0x21
    2160:	9a a1       	ldd	r25, Y+34	; 0x22
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	9a a3       	std	Y+34, r25	; 0x22
    2166:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	89 a1       	ldd	r24, Y+33	; 0x21
    216a:	9a a1       	ldd	r25, Y+34	; 0x22
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	69 f7       	brne	.-38     	; 0x214a <keypad_press+0x14d0>
    2170:	14 c0       	rjmp	.+40     	; 0x219a <keypad_press+0x1520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2172:	6b a1       	ldd	r22, Y+35	; 0x23
    2174:	7c a1       	ldd	r23, Y+36	; 0x24
    2176:	8d a1       	ldd	r24, Y+37	; 0x25
    2178:	9e a1       	ldd	r25, Y+38	; 0x26
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9a a3       	std	Y+34, r25	; 0x22
    2184:	89 a3       	std	Y+33, r24	; 0x21
    2186:	89 a1       	ldd	r24, Y+33	; 0x21
    2188:	9a a1       	ldd	r25, Y+34	; 0x22
    218a:	9e 8f       	std	Y+30, r25	; 0x1e
    218c:	8d 8f       	std	Y+29, r24	; 0x1d
    218e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2190:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <keypad_press+0x1518>
    2196:	9e 8f       	std	Y+30, r25	; 0x1e
    2198:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	while(!(keypad_PIN &(1<<5)));
    219a:	e6 e3       	ldi	r30, 0x36	; 54
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	88 2f       	mov	r24, r24
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	80 72       	andi	r24, 0x20	; 32
    21a6:	90 70       	andi	r25, 0x00	; 0
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	b9 f3       	breq	.-18     	; 0x219a <keypad_press+0x1520>
	key=14;
    21ac:	fe 01       	movw	r30, r28
    21ae:	ef 51       	subi	r30, 0x1F	; 31
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	8e e0       	ldi	r24, 0x0E	; 14
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	80 83       	st	Z, r24
    21ba:	11 c1       	rjmp	.+546    	; 0x23de <keypad_press+0x1764>
	}
else if (!(keypad_PIN &(1<<6))){
    21bc:	e6 e3       	ldi	r30, 0x36	; 54
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	80 74       	andi	r24, 0x40	; 64
    21c8:	90 70       	andi	r25, 0x00	; 0
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	09 f0       	breq	.+2      	; 0x21d0 <keypad_press+0x1556>
    21ce:	83 c0       	rjmp	.+262    	; 0x22d6 <keypad_press+0x165c>
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a0 e0       	ldi	r26, 0x00	; 0
    21d6:	b0 e4       	ldi	r27, 0x40	; 64
    21d8:	89 8f       	std	Y+25, r24	; 0x19
    21da:	9a 8f       	std	Y+26, r25	; 0x1a
    21dc:	ab 8f       	std	Y+27, r26	; 0x1b
    21de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e0:	69 8d       	ldd	r22, Y+25	; 0x19
    21e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a e7       	ldi	r20, 0x7A	; 122
    21ee:	53 e4       	ldi	r21, 0x43	; 67
    21f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	8d 8b       	std	Y+21, r24	; 0x15
    21fa:	9e 8b       	std	Y+22, r25	; 0x16
    21fc:	af 8b       	std	Y+23, r26	; 0x17
    21fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2200:	6d 89       	ldd	r22, Y+21	; 0x15
    2202:	7e 89       	ldd	r23, Y+22	; 0x16
    2204:	8f 89       	ldd	r24, Y+23	; 0x17
    2206:	98 8d       	ldd	r25, Y+24	; 0x18
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	2c f4       	brge	.+10     	; 0x2222 <keypad_press+0x15a8>
		__ticks = 1;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9c 8b       	std	Y+20, r25	; 0x14
    221e:	8b 8b       	std	Y+19, r24	; 0x13
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <keypad_press+0x1626>
	else if (__tmp > 65535)
    2222:	6d 89       	ldd	r22, Y+21	; 0x15
    2224:	7e 89       	ldd	r23, Y+22	; 0x16
    2226:	8f 89       	ldd	r24, Y+23	; 0x17
    2228:	98 8d       	ldd	r25, Y+24	; 0x18
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	3f ef       	ldi	r19, 0xFF	; 255
    222e:	4f e7       	ldi	r20, 0x7F	; 127
    2230:	57 e4       	ldi	r21, 0x47	; 71
    2232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2236:	18 16       	cp	r1, r24
    2238:	4c f5       	brge	.+82     	; 0x228c <keypad_press+0x1612>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223a:	69 8d       	ldd	r22, Y+25	; 0x19
    223c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    223e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2240:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	9c 8b       	std	Y+20, r25	; 0x14
    2260:	8b 8b       	std	Y+19, r24	; 0x13
    2262:	0f c0       	rjmp	.+30     	; 0x2282 <keypad_press+0x1608>
    2264:	89 e1       	ldi	r24, 0x19	; 25
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9a 8b       	std	Y+18, r25	; 0x12
    226a:	89 8b       	std	Y+17, r24	; 0x11
    226c:	89 89       	ldd	r24, Y+17	; 0x11
    226e:	9a 89       	ldd	r25, Y+18	; 0x12
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <keypad_press+0x15f6>
    2274:	9a 8b       	std	Y+18, r25	; 0x12
    2276:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	8b 89       	ldd	r24, Y+19	; 0x13
    227a:	9c 89       	ldd	r25, Y+20	; 0x14
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	9c 8b       	std	Y+20, r25	; 0x14
    2280:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2282:	8b 89       	ldd	r24, Y+19	; 0x13
    2284:	9c 89       	ldd	r25, Y+20	; 0x14
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	69 f7       	brne	.-38     	; 0x2264 <keypad_press+0x15ea>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <keypad_press+0x163a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228c:	6d 89       	ldd	r22, Y+21	; 0x15
    228e:	7e 89       	ldd	r23, Y+22	; 0x16
    2290:	8f 89       	ldd	r24, Y+23	; 0x17
    2292:	98 8d       	ldd	r25, Y+24	; 0x18
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9c 8b       	std	Y+20, r25	; 0x14
    229e:	8b 8b       	std	Y+19, r24	; 0x13
    22a0:	8b 89       	ldd	r24, Y+19	; 0x13
    22a2:	9c 89       	ldd	r25, Y+20	; 0x14
    22a4:	98 8b       	std	Y+16, r25	; 0x10
    22a6:	8f 87       	std	Y+15, r24	; 0x0f
    22a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22aa:	98 89       	ldd	r25, Y+16	; 0x10
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <keypad_press+0x1632>
    22b0:	98 8b       	std	Y+16, r25	; 0x10
    22b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	while(!(keypad_PIN &(1<<6)));
    22b4:	e6 e3       	ldi	r30, 0x36	; 54
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	88 2f       	mov	r24, r24
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	80 74       	andi	r24, 0x40	; 64
    22c0:	90 70       	andi	r25, 0x00	; 0
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	b9 f3       	breq	.-18     	; 0x22b4 <keypad_press+0x163a>
	key=15;
    22c6:	fe 01       	movw	r30, r28
    22c8:	ef 51       	subi	r30, 0x1F	; 31
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	8f e0       	ldi	r24, 0x0F	; 15
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
    22d4:	84 c0       	rjmp	.+264    	; 0x23de <keypad_press+0x1764>
	}
else if (!(keypad_PIN &(1<<7))){
    22d6:	e6 e3       	ldi	r30, 0x36	; 54
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	88 23       	and	r24, r24
    22de:	0c f4       	brge	.+2      	; 0x22e2 <keypad_press+0x1668>
    22e0:	7e c0       	rjmp	.+252    	; 0x23de <keypad_press+0x1764>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	a0 e0       	ldi	r26, 0x00	; 0
    22e8:	b0 e4       	ldi	r27, 0x40	; 64
    22ea:	8b 87       	std	Y+11, r24	; 0x0b
    22ec:	9c 87       	std	Y+12, r25	; 0x0c
    22ee:	ad 87       	std	Y+13, r26	; 0x0d
    22f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	4a e7       	ldi	r20, 0x7A	; 122
    2300:	53 e4       	ldi	r21, 0x43	; 67
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	8f 83       	std	Y+7, r24	; 0x07
    230c:	98 87       	std	Y+8, r25	; 0x08
    230e:	a9 87       	std	Y+9, r26	; 0x09
    2310:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2312:	6f 81       	ldd	r22, Y+7	; 0x07
    2314:	78 85       	ldd	r23, Y+8	; 0x08
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e8       	ldi	r20, 0x80	; 128
    2320:	5f e3       	ldi	r21, 0x3F	; 63
    2322:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2326:	88 23       	and	r24, r24
    2328:	2c f4       	brge	.+10     	; 0x2334 <keypad_press+0x16ba>
		__ticks = 1;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	9e 83       	std	Y+6, r25	; 0x06
    2330:	8d 83       	std	Y+5, r24	; 0x05
    2332:	3f c0       	rjmp	.+126    	; 0x23b2 <keypad_press+0x1738>
	else if (__tmp > 65535)
    2334:	6f 81       	ldd	r22, Y+7	; 0x07
    2336:	78 85       	ldd	r23, Y+8	; 0x08
    2338:	89 85       	ldd	r24, Y+9	; 0x09
    233a:	9a 85       	ldd	r25, Y+10	; 0x0a
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	3f ef       	ldi	r19, 0xFF	; 255
    2340:	4f e7       	ldi	r20, 0x7F	; 127
    2342:	57 e4       	ldi	r21, 0x47	; 71
    2344:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2348:	18 16       	cp	r1, r24
    234a:	4c f5       	brge	.+82     	; 0x239e <keypad_press+0x1724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234c:	6b 85       	ldd	r22, Y+11	; 0x0b
    234e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2350:	8d 85       	ldd	r24, Y+13	; 0x0d
    2352:	9e 85       	ldd	r25, Y+14	; 0x0e
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e2       	ldi	r20, 0x20	; 32
    235a:	51 e4       	ldi	r21, 0x41	; 65
    235c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	0f c0       	rjmp	.+30     	; 0x2394 <keypad_press+0x171a>
    2376:	89 e1       	ldi	r24, 0x19	; 25
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9c 83       	std	Y+4, r25	; 0x04
    237c:	8b 83       	std	Y+3, r24	; 0x03
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <keypad_press+0x1708>
    2386:	9c 83       	std	Y+4, r25	; 0x04
    2388:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	9e 83       	std	Y+6, r25	; 0x06
    2392:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	9e 81       	ldd	r25, Y+6	; 0x06
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	69 f7       	brne	.-38     	; 0x2376 <keypad_press+0x16fc>
    239c:	14 c0       	rjmp	.+40     	; 0x23c6 <keypad_press+0x174c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239e:	6f 81       	ldd	r22, Y+7	; 0x07
    23a0:	78 85       	ldd	r23, Y+8	; 0x08
    23a2:	89 85       	ldd	r24, Y+9	; 0x09
    23a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	9e 81       	ldd	r25, Y+6	; 0x06
    23b6:	9a 83       	std	Y+2, r25	; 0x02
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	9a 81       	ldd	r25, Y+2	; 0x02
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <keypad_press+0x1744>
    23c2:	9a 83       	std	Y+2, r25	; 0x02
    23c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	while(!(keypad_PIN &(1<<7)));
    23c6:	e6 e3       	ldi	r30, 0x36	; 54
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	88 23       	and	r24, r24
    23ce:	dc f7       	brge	.-10     	; 0x23c6 <keypad_press+0x174c>
	key=16;
    23d0:	fe 01       	movw	r30, r28
    23d2:	ef 51       	subi	r30, 0x1F	; 31
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 e1       	ldi	r24, 0x10	; 16
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	91 83       	std	Z+1, r25	; 0x01
    23dc:	80 83       	st	Z, r24
}
 return key; }
    23de:	fe 01       	movw	r30, r28
    23e0:	ef 51       	subi	r30, 0x1F	; 31
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	80 81       	ld	r24, Z
    23e6:	91 81       	ldd	r25, Z+1	; 0x01
    23e8:	ce 51       	subi	r28, 0x1E	; 30
    23ea:	df 4f       	sbci	r29, 0xFF	; 255
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	1f 91       	pop	r17
    23fc:	0f 91       	pop	r16
    23fe:	08 95       	ret

00002400 <main>:
#include"driver/keypad.h"
#include"driver/ADC lib.h"
void servo_init();
void servo_set(int *valu);

int main(void){
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	2a 97       	sbiw	r28, 0x0a	; 10
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
int c,key,val;
volatile int num,xser;
servo_init();
    2414:	0e 94 25 12 	call	0x244a	; 0x244a <servo_init>
ADC_Init();
    2418:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_Init>
DDRC=0xff;
    241c:	e4 e3       	ldi	r30, 0x34	; 52
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	8f ef       	ldi	r24, 0xFF	; 255
    2422:	80 83       	st	Z, r24
val=0;
    2424:	1a 82       	std	Y+2, r1	; 0x02
    2426:	19 82       	std	Y+1, r1	; 0x01

c=0;
    2428:	1e 82       	std	Y+6, r1	; 0x06
    242a:	1d 82       	std	Y+5, r1	; 0x05
while(1){
num=adc_Read(1);
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	0e 94 c4 05 	call	0xb88	; 0xb88 <adc_Read>
    2432:	98 87       	std	Y+8, r25	; 0x08
    2434:	8f 83       	std	Y+7, r24	; 0x07
PORTC=num;
    2436:	e5 e3       	ldi	r30, 0x35	; 53
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	8f 81       	ldd	r24, Y+7	; 0x07
    243c:	98 85       	ldd	r25, Y+8	; 0x08
    243e:	80 83       	st	Z, r24
servo_set(&xser);
    2440:	ce 01       	movw	r24, r28
    2442:	09 96       	adiw	r24, 0x09	; 9
    2444:	0e 94 45 12 	call	0x248a	; 0x248a <servo_set>
    2448:	f1 cf       	rjmp	.-30     	; 0x242c <main+0x2c>

0000244a <servo_init>:

}
}


void servo_init(){
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
    2452:	a1 e3       	ldi	r26, 0x31	; 49
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e1 e3       	ldi	r30, 0x31	; 49
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	80 62       	ori	r24, 0x20	; 32
    245e:	8c 93       	st	X, r24
		TCNT1 = 0;		/* Set timer1 count zero */
    2460:	ec e4       	ldi	r30, 0x4C	; 76
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	11 82       	std	Z+1, r1	; 0x01
    2466:	10 82       	st	Z, r1
		ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
    2468:	e6 e4       	ldi	r30, 0x46	; 70
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	83 ec       	ldi	r24, 0xC3	; 195
    246e:	99 e0       	ldi	r25, 0x09	; 9
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24

		/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
		TCCR1A = (1<<WGM11)|(1<<COM1A1);
    2474:	ef e4       	ldi	r30, 0x4F	; 79
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	82 e8       	ldi	r24, 0x82	; 130
    247a:	80 83       	st	Z, r24
		TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
    247c:	ee e4       	ldi	r30, 0x4E	; 78
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	8b e1       	ldi	r24, 0x1B	; 27
    2482:	80 83       	st	Z, r24
}
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	08 95       	ret

0000248a <servo_set>:
void servo_set(int *valu){
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	00 d0       	rcall	.+0      	; 0x2490 <servo_set+0x6>
    2490:	00 d0       	rcall	.+0      	; 0x2492 <servo_set+0x8>
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	9c 83       	std	Y+4, r25	; 0x04
    2498:	8b 83       	std	Y+3, r24	; 0x03
	int se_v;
	se_v=*valu;
    249a:	eb 81       	ldd	r30, Y+3	; 0x03
    249c:	fc 81       	ldd	r31, Y+4	; 0x04
    249e:	80 81       	ld	r24, Z
    24a0:	91 81       	ldd	r25, Z+1	; 0x01
    24a2:	9a 83       	std	Y+2, r25	; 0x02
    24a4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=se_v+125;
    24a6:	ea e4       	ldi	r30, 0x4A	; 74
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	83 58       	subi	r24, 0x83	; 131
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	80 83       	st	Z, r24
}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <__prologue_saves__>:
    24c4:	2f 92       	push	r2
    24c6:	3f 92       	push	r3
    24c8:	4f 92       	push	r4
    24ca:	5f 92       	push	r5
    24cc:	6f 92       	push	r6
    24ce:	7f 92       	push	r7
    24d0:	8f 92       	push	r8
    24d2:	9f 92       	push	r9
    24d4:	af 92       	push	r10
    24d6:	bf 92       	push	r11
    24d8:	cf 92       	push	r12
    24da:	df 92       	push	r13
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	ca 1b       	sub	r28, r26
    24ee:	db 0b       	sbc	r29, r27
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	09 94       	ijmp

000024fc <__epilogue_restores__>:
    24fc:	2a 88       	ldd	r2, Y+18	; 0x12
    24fe:	39 88       	ldd	r3, Y+17	; 0x11
    2500:	48 88       	ldd	r4, Y+16	; 0x10
    2502:	5f 84       	ldd	r5, Y+15	; 0x0f
    2504:	6e 84       	ldd	r6, Y+14	; 0x0e
    2506:	7d 84       	ldd	r7, Y+13	; 0x0d
    2508:	8c 84       	ldd	r8, Y+12	; 0x0c
    250a:	9b 84       	ldd	r9, Y+11	; 0x0b
    250c:	aa 84       	ldd	r10, Y+10	; 0x0a
    250e:	b9 84       	ldd	r11, Y+9	; 0x09
    2510:	c8 84       	ldd	r12, Y+8	; 0x08
    2512:	df 80       	ldd	r13, Y+7	; 0x07
    2514:	ee 80       	ldd	r14, Y+6	; 0x06
    2516:	fd 80       	ldd	r15, Y+5	; 0x05
    2518:	0c 81       	ldd	r16, Y+4	; 0x04
    251a:	1b 81       	ldd	r17, Y+3	; 0x03
    251c:	aa 81       	ldd	r26, Y+2	; 0x02
    251e:	b9 81       	ldd	r27, Y+1	; 0x01
    2520:	ce 0f       	add	r28, r30
    2522:	d1 1d       	adc	r29, r1
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	ed 01       	movw	r28, r26
    2530:	08 95       	ret

00002532 <_exit>:
    2532:	f8 94       	cli

00002534 <__stop_program>:
    2534:	ff cf       	rjmp	.-2      	; 0x2534 <__stop_program>
