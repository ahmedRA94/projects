
password.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000840  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00000840  000008d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000b8  008000b8  0000092c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010f6  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000048b  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006bf  00000000  00000000  00001f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00002634  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000279  00000000  00000000  0000272c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000414  00000000  00000000  000029a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002db9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	f2 01       	movw	r30, r4
  56:	00 02       	muls	r16, r16
  58:	0e 02       	muls	r16, r30
  5a:	1c 02       	muls	r17, r28
  5c:	2a 02       	muls	r18, r26
  5e:	38 02       	muls	r19, r24
  60:	46 02       	muls	r20, r22
  62:	54 02       	muls	r21, r20
  64:	62 02       	muls	r22, r18
  66:	70 02       	muls	r23, r16
  68:	f4 02       	muls	r31, r20
  6a:	02 03       	mulsu	r16, r18
  6c:	10 03       	mulsu	r17, r16
  6e:	1e 03       	fmul	r17, r22
  70:	2c 03       	fmul	r18, r20
  72:	3a 03       	fmul	r19, r18
  74:	48 03       	fmul	r20, r16
  76:	56 03       	mulsu	r21, r22
  78:	64 03       	mulsu	r22, r20
  7a:	72 03       	mulsu	r23, r18

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	a0 e6       	ldi	r26, 0x60	; 96
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e0 e4       	ldi	r30, 0x40	; 64
  90:	f8 e0       	ldi	r31, 0x08	; 8
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 3b       	cpi	r26, 0xB8	; 184
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	a8 eb       	ldi	r26, 0xB8	; 184
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ad 3b       	cpi	r26, 0xBD	; 189
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
  b2:	0c 94 1e 04 	jmp	0x83c	; 0x83c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <keypad_init>:
#define SET_BIT(reg,index)  reg|=(1<<index)
#define GET_LOWER_NIBBLE(reg)  reg&0x0f

void keypad_init()
{
	KEYPAD_DDR=0xf0; //A0....A3 are inputs and A4....A7 are outputs
  ba:	80 ef       	ldi	r24, 0xF0	; 240
  bc:	8a bb       	out	0x1a, r24	; 26
	KEYPAD_PORT=0xff;//A0....A3 are pull up and A4....A7 are initialized by 5 volt
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	08 95       	ret

000000c4 <KeyPad_getpressedkey>:
}

unsigned char KeyPad_getpressedkey(void)
{
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff

	for(col_index=0;col_index<4;col_index++)
  c8:	60 e0       	ldi	r22, 0x00	; 0
	{
		KEYPAD_PORT=(KEYPAD_PORT | 0xf0);//check c0 c1 c2 c3 are 1111

		CLR_BIT(KEYPAD_PORT,(col_index+4));//clear col c0 on bit4  c1 on bit5
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	50 e0       	ldi	r21, 0x00	; 0
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff

	for(col_index=0;col_index<4;col_index++)
	{
		KEYPAD_PORT=(KEYPAD_PORT | 0xf0);//check c0 c1 c2 c3 are 1111
  ce:	2b b3       	in	r18, 0x1b	; 27
  d0:	20 6f       	ori	r18, 0xF0	; 240
  d2:	2b bb       	out	0x1b, r18	; 27

		CLR_BIT(KEYPAD_PORT,(col_index+4));//clear col c0 on bit4  c1 on bit5
  d4:	7b b3       	in	r23, 0x1b	; 27
  d6:	9a 01       	movw	r18, r20
  d8:	08 2e       	mov	r0, r24
  da:	02 c0       	rjmp	.+4      	; 0xe0 <KeyPad_getpressedkey+0x1c>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <KeyPad_getpressedkey+0x18>
  e4:	20 95       	com	r18
  e6:	27 23       	and	r18, r23
  e8:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	e9 ef       	ldi	r30, 0xF9	; 249
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <KeyPad_getpressedkey+0x2a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <KeyPad_getpressedkey+0x30>
  f4:	00 00       	nop

		_delay_ms(1);//delay

		rows_val= GET_LOWER_NIBBLE(KEYPAD_ROWS); // KEYPAD_ROWS == PINA
  f6:	29 b3       	in	r18, 0x19	; 25
  f8:	2f 70       	andi	r18, 0x0F	; 15

		if(rows_val != 0x0F) // not equal 1111
  fa:	2f 30       	cpi	r18, 0x0F	; 15
  fc:	29 f0       	breq	.+10     	; 0x108 <KeyPad_getpressedkey+0x44>
		{
			while((GET_LOWER_NIBBLE(KEYPAD_ROWS)) != 0x0F);// single pressing
  fe:	89 b3       	in	r24, 0x19	; 25
 100:	8f 70       	andi	r24, 0x0F	; 15
 102:	8f 30       	cpi	r24, 0x0F	; 15
 104:	e1 f7       	brne	.-8      	; 0xfe <KeyPad_getpressedkey+0x3a>
 106:	05 c0       	rjmp	.+10     	; 0x112 <KeyPad_getpressedkey+0x4e>
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff

	for(col_index=0;col_index<4;col_index++)
 108:	6f 5f       	subi	r22, 0xFF	; 255
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	64 30       	cpi	r22, 0x04	; 4
 10e:	f9 f6       	brne	.-66     	; 0xce <KeyPad_getpressedkey+0xa>
 110:	4c c0       	rjmp	.+152    	; 0x1aa <KeyPad_getpressedkey+0xe6>
			break;
		}
		// SET_BIT(KEYPAD_PORT,(col_index+4));//set col
	}

	if(col_index == 4)
 112:	64 30       	cpi	r22, 0x04	; 4
 114:	09 f4       	brne	.+2      	; 0x118 <KeyPad_getpressedkey+0x54>
 116:	4b c0       	rjmp	.+150    	; 0x1ae <KeyPad_getpressedkey+0xea>
	{
		return NO_PRESSED_KEY;
	}
	else
	{
		switch(col_index)
 118:	61 30       	cpi	r22, 0x01	; 1
 11a:	c1 f0       	breq	.+48     	; 0x14c <KeyPad_getpressedkey+0x88>
 11c:	28 f0       	brcs	.+10     	; 0x128 <KeyPad_getpressedkey+0x64>
 11e:	62 30       	cpi	r22, 0x02	; 2
 120:	39 f1       	breq	.+78     	; 0x170 <KeyPad_getpressedkey+0xac>
 122:	63 30       	cpi	r22, 0x03	; 3
 124:	b9 f1       	breq	.+110    	; 0x194 <KeyPad_getpressedkey+0xd0>
 126:	45 c0       	rjmp	.+138    	; 0x1b2 <KeyPad_getpressedkey+0xee>
		{
			// Col_index = 0
			case 0:
			switch(rows_val)
 128:	2b 30       	cpi	r18, 0x0B	; 11
 12a:	61 f0       	breq	.+24     	; 0x144 <KeyPad_getpressedkey+0x80>
 12c:	18 f4       	brcc	.+6      	; 0x134 <KeyPad_getpressedkey+0x70>
 12e:	27 30       	cpi	r18, 0x07	; 7
 130:	59 f0       	breq	.+22     	; 0x148 <KeyPad_getpressedkey+0x84>
 132:	04 c0       	rjmp	.+8      	; 0x13c <KeyPad_getpressedkey+0x78>
 134:	2d 30       	cpi	r18, 0x0D	; 13
 136:	21 f0       	breq	.+8      	; 0x140 <KeyPad_getpressedkey+0x7c>
 138:	2e 30       	cpi	r18, 0x0E	; 14
 13a:	e9 f1       	breq	.+122    	; 0x1b6 <KeyPad_getpressedkey+0xf2>

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	08 95       	ret
			{
				case 0x0E:   // 0000 1110
				key = 7;
				break;
				case 0x0D:  //  0000 1101
				key = 4;
 140:	84 e0       	ldi	r24, 0x04	; 4
				break;
 142:	08 95       	ret
				case 0x0B:  //  0000 1011
				key = 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
				break;
 146:	08 95       	ret
				case 0x07:   // 0000 0111
				key = 10;
 148:	8a e0       	ldi	r24, 0x0A	; 10
				break;
 14a:	08 95       	ret
			}
			break;

			// Col_index = 1
			case 1:
			switch(rows_val)
 14c:	2b 30       	cpi	r18, 0x0B	; 11
 14e:	61 f0       	breq	.+24     	; 0x168 <KeyPad_getpressedkey+0xa4>
 150:	18 f4       	brcc	.+6      	; 0x158 <KeyPad_getpressedkey+0x94>
 152:	27 30       	cpi	r18, 0x07	; 7
 154:	59 f0       	breq	.+22     	; 0x16c <KeyPad_getpressedkey+0xa8>
 156:	04 c0       	rjmp	.+8      	; 0x160 <KeyPad_getpressedkey+0x9c>
 158:	2d 30       	cpi	r18, 0x0D	; 13
 15a:	21 f0       	breq	.+8      	; 0x164 <KeyPad_getpressedkey+0xa0>
 15c:	2e 30       	cpi	r18, 0x0E	; 14
 15e:	69 f1       	breq	.+90     	; 0x1ba <KeyPad_getpressedkey+0xf6>

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	08 95       	ret
			{
				case 0x0E:   // 1110
				key = 8;
				break;
				case 0x0D:   //1101
				key = 5;
 164:	85 e0       	ldi	r24, 0x05	; 5
				break;
 166:	08 95       	ret
				case 0x0B:
				key = 2;
 168:	82 e0       	ldi	r24, 0x02	; 2
				break;
 16a:	08 95       	ret
				case 0x07:
				key = 0;
 16c:	80 e0       	ldi	r24, 0x00	; 0
				break;
 16e:	08 95       	ret
			}
			break;
			
			// Col2
			case 2:
			switch(rows_val)
 170:	2b 30       	cpi	r18, 0x0B	; 11
 172:	61 f0       	breq	.+24     	; 0x18c <KeyPad_getpressedkey+0xc8>
 174:	18 f4       	brcc	.+6      	; 0x17c <KeyPad_getpressedkey+0xb8>
 176:	27 30       	cpi	r18, 0x07	; 7
 178:	59 f0       	breq	.+22     	; 0x190 <KeyPad_getpressedkey+0xcc>
 17a:	04 c0       	rjmp	.+8      	; 0x184 <KeyPad_getpressedkey+0xc0>
 17c:	2d 30       	cpi	r18, 0x0D	; 13
 17e:	21 f0       	breq	.+8      	; 0x188 <KeyPad_getpressedkey+0xc4>
 180:	2e 30       	cpi	r18, 0x0E	; 14
 182:	e9 f0       	breq	.+58     	; 0x1be <KeyPad_getpressedkey+0xfa>

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	08 95       	ret
			{
				case 0x0E:  // 1110
				key = 9;
				break;
				case 0x0D:  // 1101
				key = 6;
 188:	86 e0       	ldi	r24, 0x06	; 6
				break;
 18a:	08 95       	ret
				case 0x0B:  // 1011
				key = 3;
 18c:	83 e0       	ldi	r24, 0x03	; 3
				break;
 18e:	08 95       	ret
				case 0x07:  // 0111
				key = 0;
 190:	80 e0       	ldi	r24, 0x00	; 0
				break;
 192:	08 95       	ret
			}
			break;
			
			// Col3
			case 3:
			switch(rows_val)
 194:	2b 30       	cpi	r18, 0x0B	; 11
 196:	a9 f0       	breq	.+42     	; 0x1c2 <KeyPad_getpressedkey+0xfe>
 198:	18 f4       	brcc	.+6      	; 0x1a0 <KeyPad_getpressedkey+0xdc>
 19a:	27 30       	cpi	r18, 0x07	; 7
 19c:	91 f0       	breq	.+36     	; 0x1c2 <KeyPad_getpressedkey+0xfe>
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <KeyPad_getpressedkey+0xe2>
 1a0:	2d 50       	subi	r18, 0x0D	; 13
 1a2:	22 30       	cpi	r18, 0x02	; 2
 1a4:	70 f0       	brcs	.+28     	; 0x1c2 <KeyPad_getpressedkey+0xfe>

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	08 95       	ret
		// SET_BIT(KEYPAD_PORT,(col_index+4));//set col
	}

	if(col_index == 4)
	{
		return NO_PRESSED_KEY;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	08 95       	ret
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	08 95       	ret

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	08 95       	ret
			// Col_index = 0
			case 0:
			switch(rows_val)
			{
				case 0x0E:   // 0000 1110
				key = 7;
 1b6:	87 e0       	ldi	r24, 0x07	; 7
 1b8:	08 95       	ret
			// Col_index = 1
			case 1:
			switch(rows_val)
			{
				case 0x0E:   // 1110
				key = 8;
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	08 95       	ret
			// Col2
			case 2:
			switch(rows_val)
			{
				case 0x0E:  // 1110
				key = 9;
 1be:	89 e0       	ldi	r24, 0x09	; 9
 1c0:	08 95       	ret
			// Col3
			case 3:
			switch(rows_val)
			{
				case 0x0E:
				key = 0;
 1c2:	80 e0       	ldi	r24, 0x00	; 0
			default:
			break;
		}
	}
	return key;
}
 1c4:	08 95       	ret

000001c6 <lcd_command>:
#define lcd_RS 0
#define lcd_RW 1
#define lcd_EN 2
//**********************************************************************************************
void lcd_command(unsigned char cmd){
	lcd_PRT=(lcd_PRT & 0x0F)|(cmd & 0xF0);
 1c6:	95 b3       	in	r25, 0x15	; 21
 1c8:	28 2f       	mov	r18, r24
 1ca:	20 7f       	andi	r18, 0xF0	; 240
 1cc:	9f 70       	andi	r25, 0x0F	; 15
 1ce:	92 2b       	or	r25, r18
 1d0:	95 bb       	out	0x15, r25	; 21
	lcd_PRT&=~(1<<lcd_RS);
 1d2:	a8 98       	cbi	0x15, 0	; 21
	lcd_PRT&=~(1<<lcd_RW);
 1d4:	a9 98       	cbi	0x15, 1	; 21
	lcd_PRT|=(1<<lcd_EN);
 1d6:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	35 e8       	ldi	r19, 0x85	; 133
 1da:	3a 95       	dec	r19
 1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_command+0x14>
 1de:	00 00       	nop
	_delay_us(50);
	lcd_PRT&=~(1<<lcd_EN);
 1e0:	aa 98       	cbi	0x15, 2	; 21
 1e2:	95 e8       	ldi	r25, 0x85	; 133
 1e4:	9a 95       	dec	r25
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_command+0x1e>
 1e8:	00 00       	nop
	_delay_us(50);
	lcd_PRT =(lcd_PRT & 0x0F)|(cmd<<4);
 1ea:	25 b3       	in	r18, 0x15	; 21
 1ec:	30 e1       	ldi	r19, 0x10	; 16
 1ee:	83 9f       	mul	r24, r19
 1f0:	c0 01       	movw	r24, r0
 1f2:	11 24       	eor	r1, r1
 1f4:	92 2f       	mov	r25, r18
 1f6:	9f 70       	andi	r25, 0x0F	; 15
 1f8:	89 2b       	or	r24, r25
 1fa:	85 bb       	out	0x15, r24	; 21
	lcd_PRT|=(1<<lcd_EN);
 1fc:	aa 9a       	sbi	0x15, 2	; 21
 1fe:	85 e8       	ldi	r24, 0x85	; 133
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_command+0x3a>
 204:	00 00       	nop
	_delay_us(50);
	lcd_PRT&=~(1<<lcd_EN);
 206:	aa 98       	cbi	0x15, 2	; 21
 208:	08 95       	ret

0000020a <lcd_data>:

}	
//********************************************************************************************
void lcd_data(unsigned char data){
	lcd_PRT=(lcd_PRT & 0x0F)|(data & 0xF0);
 20a:	95 b3       	in	r25, 0x15	; 21
 20c:	28 2f       	mov	r18, r24
 20e:	20 7f       	andi	r18, 0xF0	; 240
 210:	9f 70       	andi	r25, 0x0F	; 15
 212:	92 2b       	or	r25, r18
 214:	95 bb       	out	0x15, r25	; 21
	lcd_PRT|=(1<<lcd_RS);
 216:	a8 9a       	sbi	0x15, 0	; 21
	lcd_PRT&=~(1<<lcd_RW);
 218:	a9 98       	cbi	0x15, 1	; 21
	lcd_PRT|=(1<<lcd_EN);
 21a:	aa 9a       	sbi	0x15, 2	; 21
 21c:	35 e8       	ldi	r19, 0x85	; 133
 21e:	3a 95       	dec	r19
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_data+0x14>
 222:	00 00       	nop
	_delay_us(50);
	lcd_PRT&=~(1<<lcd_EN);
 224:	aa 98       	cbi	0x15, 2	; 21
 226:	95 e8       	ldi	r25, 0x85	; 133
 228:	9a 95       	dec	r25
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_data+0x1e>
 22c:	00 00       	nop
	_delay_us(50);
	lcd_PRT =(lcd_PRT & 0x0F)|(data<<4);
 22e:	25 b3       	in	r18, 0x15	; 21
 230:	30 e1       	ldi	r19, 0x10	; 16
 232:	83 9f       	mul	r24, r19
 234:	c0 01       	movw	r24, r0
 236:	11 24       	eor	r1, r1
 238:	92 2f       	mov	r25, r18
 23a:	9f 70       	andi	r25, 0x0F	; 15
 23c:	89 2b       	or	r24, r25
 23e:	85 bb       	out	0x15, r24	; 21
	lcd_PRT|=(1<<lcd_EN);
 240:	aa 9a       	sbi	0x15, 2	; 21
 242:	87 ec       	ldi	r24, 0xC7	; 199
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_data+0x3c>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <lcd_data+0x42>
 24c:	00 00       	nop
	_delay_us(100);
	lcd_PRT&=~(1<<lcd_EN);	
 24e:	aa 98       	cbi	0x15, 2	; 21
 250:	08 95       	ret

00000252 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	97 e2       	ldi	r25, 0x27	; 39
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_init+0x4>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_init+0xa>
 25c:	00 00       	nop
//***********************************************************************************************
//function for lcd initialize.
//lcd_init();
void lcd_init(){
_delay_ms(5);
	lcd_DDR|=0xff;
 25e:	84 b3       	in	r24, 0x14	; 20
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	84 bb       	out	0x14, r24	; 20
	lcd_PRT&=~(1<<lcd_EN);
 264:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	8f e9       	ldi	r24, 0x9F	; 159
 268:	9f e0       	ldi	r25, 0x0F	; 15
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_init+0x18>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_init+0x1e>
 270:	00 00       	nop
	_delay_us(2000);
	lcd_command(0x33);
 272:	83 e3       	ldi	r24, 0x33	; 51
 274:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_command>
 278:	95 e8       	ldi	r25, 0x85	; 133
 27a:	9a 95       	dec	r25
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x28>
 27e:	00 00       	nop
	_delay_us(50);
	lcd_command(0x32);
 280:	82 e3       	ldi	r24, 0x32	; 50
 282:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_command>
 286:	85 e8       	ldi	r24, 0x85	; 133
 288:	8a 95       	dec	r24
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_init+0x36>
 28c:	00 00       	nop
	_delay_us(50);
	lcd_command(0x28);
 28e:	88 e2       	ldi	r24, 0x28	; 40
 290:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_command>
 294:	95 e8       	ldi	r25, 0x85	; 133
 296:	9a 95       	dec	r25
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_init+0x44>
 29a:	00 00       	nop
	_delay_us(50);
	lcd_command(0x0E);
 29c:	8e e0       	ldi	r24, 0x0E	; 14
 29e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_command>
 2a2:	85 e8       	ldi	r24, 0x85	; 133
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <lcd_init+0x52>
 2a8:	00 00       	nop
	_delay_us(50);
	lcd_command(0x01);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_command>
 2b0:	8f e9       	ldi	r24, 0x9F	; 159
 2b2:	9f e0       	ldi	r25, 0x0F	; 15
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_init+0x62>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_init+0x68>
 2ba:	00 00       	nop
	_delay_us(2000);
	lcd_command(0x06);
 2bc:	86 e0       	ldi	r24, 0x06	; 6
 2be:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_command>
 2c2:	08 95       	ret

000002c4 <lcd_goto_xy>:
//function to locate the position.
//lcd_goto_xy(row,columm);
//line 1 of lcd=row 1. ,line2 of lcd=row2
//columm 1 of lcd =columm 1., columm 16 of lcd =columm 16.

void lcd_goto_xy(unsigned char row,unsigned char columm){
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <lcd_goto_xy+0x6>
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <lcd_goto_xy+0x8>
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
	unsigned char fristcharadr[]={0x80,0xC0,0x90,0xD0};
 2d0:	90 e8       	ldi	r25, 0x80	; 128
 2d2:	99 83       	std	Y+1, r25	; 0x01
 2d4:	90 ec       	ldi	r25, 0xC0	; 192
 2d6:	9a 83       	std	Y+2, r25	; 0x02
 2d8:	90 e9       	ldi	r25, 0x90	; 144
 2da:	9b 83       	std	Y+3, r25	; 0x03
 2dc:	90 ed       	ldi	r25, 0xD0	; 208
 2de:	9c 83       	std	Y+4, r25	; 0x04
		lcd_command(fristcharadr[row-1]+(columm-1));
 2e0:	61 50       	subi	r22, 0x01	; 1
 2e2:	fe 01       	movw	r30, r28
 2e4:	e8 0f       	add	r30, r24
 2e6:	f1 1d       	adc	r31, r1
 2e8:	80 81       	ld	r24, Z
 2ea:	86 0f       	add	r24, r22
 2ec:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_command>
 2f0:	87 ec       	ldi	r24, 0xC7	; 199
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd_goto_xy+0x30>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd_goto_xy+0x36>
 2fa:	00 00       	nop
		_delay_us(100);
	}
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <lcd_print>:
//***********************************************************************************************************
//function to put what u need.
// lcd_print("hallo");
 void lcd_print(char *text){
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	ec 01       	movw	r28, r24
	while(*text>0){
 310:	88 81       	ld	r24, Y
 312:	88 23       	and	r24, r24
 314:	31 f0       	breq	.+12     	; 0x322 <lcd_print+0x18>
 316:	21 96       	adiw	r28, 0x01	; 1
		lcd_data(*text++);
 318:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
	}
//***********************************************************************************************************
//function to put what u need.
// lcd_print("hallo");
 void lcd_print(char *text){
	while(*text>0){
 31c:	89 91       	ld	r24, Y+
 31e:	81 11       	cpse	r24, r1
 320:	fb cf       	rjmp	.-10     	; 0x318 <lcd_print+0xe>
		lcd_data(*text++);
	}
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <lcd_CLEAR>:

//************************************************************************************************************
//function to clear lcd. 
//lcd_CLEAR();.
void lcd_CLEAR(){
	lcd_command(0x01);
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32e:	8f e9       	ldi	r24, 0x9F	; 159
 330:	9f e0       	ldi	r25, 0x0F	; 15
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <lcd_CLEAR+0xa>
 336:	00 c0       	rjmp	.+0      	; 0x338 <lcd_CLEAR+0x10>
 338:	00 00       	nop
 33a:	08 95       	ret

0000033c <main>:
char s7eg[10]={0x00,0x01,0x02,0x03,0x04,0x5,0x06,0x07,0x08,0x09};
char inpass[4];
char pasodd[4]={'0','0','0','0'};
char key;
int main(void)
{   lcd_init();
 33c:	0e 94 29 01 	call	0x252	; 0x252 <lcd_init>
	keypad_init();
 340:	0e 94 5d 00 	call	0xba	; 0xba <keypad_init>
	DDRB=0x0f;
 344:	8f e0       	ldi	r24, 0x0F	; 15
 346:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<PB5);
 348:	c5 9a       	sbi	0x18, 5	; 24
			}			
		else {
		 lcd_CLEAR();
		lcd_goto_xy(1,1);
		lcd_print("enter the pass:");
		i=0;
 34a:	81 2c       	mov	r8, r1
 34c:	91 2c       	mov	r9, r1
				case 4:{lcd_goto_xy(2,5+i);inpass[i]='4'; lcd_data(inpass[i]);i++;break;}
				case 5:{lcd_goto_xy(2,5+i);inpass[i]='5'; lcd_data(inpass[i]);i++;break;}
				case 6:{lcd_goto_xy(2,5+i);inpass[i]='6'; lcd_data(inpass[i]);i++;break;}
				case 7:{lcd_goto_xy(2,5+i);inpass[i]='7'; lcd_data(inpass[i]);i++;break;}
				case 8:{lcd_goto_xy(2,5+i);inpass[i]='8'; lcd_data(inpass[i]);i++;break;}
				case 9:{lcd_goto_xy(2,5+i);inpass[i]='9'; lcd_data(inpass[i]);i++;break;}
 34e:	0f 2e       	mov	r0, r31
 350:	f9 e3       	ldi	r31, 0x39	; 57
 352:	4f 2e       	mov	r4, r31
 354:	f0 2d       	mov	r31, r0
				default:
				break;
				}
			} while (i<4);
			_delay_ms(500);
			eeprom_read_block(pasodd,0,strlen(pasodd));
 356:	00 e6       	ldi	r16, 0x60	; 96
 358:	10 e0       	ldi	r17, 0x00	; 0
				case 4:{lcd_goto_xy(2,5+i);inpass[i]='4'; lcd_data(inpass[i]);i++;break;}
				case 5:{lcd_goto_xy(2,5+i);inpass[i]='5'; lcd_data(inpass[i]);i++;break;}
				case 6:{lcd_goto_xy(2,5+i);inpass[i]='6'; lcd_data(inpass[i]);i++;break;}
				case 7:{lcd_goto_xy(2,5+i);inpass[i]='7'; lcd_data(inpass[i]);i++;break;}
				case 8:{lcd_goto_xy(2,5+i);inpass[i]='8'; lcd_data(inpass[i]);i++;break;}
				case 9:{lcd_goto_xy(2,5+i);inpass[i]='9'; lcd_data(inpass[i]);i++;break;}
 35a:	34 2c       	mov	r3, r4
	keypad_init();
	DDRB=0x0f;
	PORTB|=(1<<PB5);
	int i,j;
    while(1)
    { if (!(PINB &(1<<PB5))){
 35c:	b5 99       	sbic	0x16, 5	; 22
 35e:	02 c1       	rjmp	.+516    	; 0x564 <main+0x228>
		 lcd_CLEAR();
 360:	0e 94 94 01 	call	0x328	; 0x328 <lcd_CLEAR>
		 lcd_goto_xy(1,1);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
		 lcd_print("enter the new pass");
 36c:	8e e6       	ldi	r24, 0x6E	; 110
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_print>
		 j=0;
		 lcd_goto_xy(2,5);
 374:	65 e0       	ldi	r22, 0x05	; 5
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
    while(1)
    { if (!(PINB &(1<<PB5))){
		 lcd_CLEAR();
		 lcd_goto_xy(1,1);
		 lcd_print("enter the new pass");
		 j=0;
 37c:	c8 2d       	mov	r28, r8
 37e:	d9 2d       	mov	r29, r9
                case 3:{lcd_goto_xy(2,5+j);pasodd[j]='3'; lcd_data(pasodd[j]);j++;break;}
				case 4:{lcd_goto_xy(2,5+j);pasodd[j]='4'; lcd_data(pasodd[j]);j++;break;}
				case 5:{lcd_goto_xy(2,5+j);pasodd[j]='5'; lcd_data(pasodd[j]);j++;break;}
				case 6:{lcd_goto_xy(2,5+j);pasodd[j]='6'; lcd_data(pasodd[j]);j++;break;}
				case 7:{lcd_goto_xy(2,5+j);pasodd[j]='7'; lcd_data(pasodd[j]);j++;break;}
				case 8:{lcd_goto_xy(2,5+j);pasodd[j]='8'; lcd_data(pasodd[j]);j++;break;}
 380:	0f 2e       	mov	r0, r31
 382:	f8 e3       	ldi	r31, 0x38	; 56
 384:	5f 2e       	mov	r5, r31
 386:	f0 2d       	mov	r31, r0
	            case 2:{lcd_goto_xy(2,5+j);pasodd[j]='2'; lcd_data(pasodd[j]);j++;break;}
                case 3:{lcd_goto_xy(2,5+j);pasodd[j]='3'; lcd_data(pasodd[j]);j++;break;}
				case 4:{lcd_goto_xy(2,5+j);pasodd[j]='4'; lcd_data(pasodd[j]);j++;break;}
				case 5:{lcd_goto_xy(2,5+j);pasodd[j]='5'; lcd_data(pasodd[j]);j++;break;}
				case 6:{lcd_goto_xy(2,5+j);pasodd[j]='6'; lcd_data(pasodd[j]);j++;break;}
				case 7:{lcd_goto_xy(2,5+j);pasodd[j]='7'; lcd_data(pasodd[j]);j++;break;}
 388:	0f 2e       	mov	r0, r31
 38a:	f7 e3       	ldi	r31, 0x37	; 55
 38c:	6f 2e       	mov	r6, r31
 38e:	f0 2d       	mov	r31, r0
		        case 1:{lcd_goto_xy(2,5+j);pasodd[j]='1'; lcd_data(pasodd[j]);j++;break;}
	            case 2:{lcd_goto_xy(2,5+j);pasodd[j]='2'; lcd_data(pasodd[j]);j++;break;}
                case 3:{lcd_goto_xy(2,5+j);pasodd[j]='3'; lcd_data(pasodd[j]);j++;break;}
				case 4:{lcd_goto_xy(2,5+j);pasodd[j]='4'; lcd_data(pasodd[j]);j++;break;}
				case 5:{lcd_goto_xy(2,5+j);pasodd[j]='5'; lcd_data(pasodd[j]);j++;break;}
				case 6:{lcd_goto_xy(2,5+j);pasodd[j]='6'; lcd_data(pasodd[j]);j++;break;}
 390:	0f 2e       	mov	r0, r31
 392:	f6 e3       	ldi	r31, 0x36	; 54
 394:	7f 2e       	mov	r7, r31
 396:	f0 2d       	mov	r31, r0
			    case 0:{lcd_goto_xy(2,5+j);pasodd[j]='0'; lcd_data(pasodd[j]);j++;break;}
		        case 1:{lcd_goto_xy(2,5+j);pasodd[j]='1'; lcd_data(pasodd[j]);j++;break;}
	            case 2:{lcd_goto_xy(2,5+j);pasodd[j]='2'; lcd_data(pasodd[j]);j++;break;}
                case 3:{lcd_goto_xy(2,5+j);pasodd[j]='3'; lcd_data(pasodd[j]);j++;break;}
				case 4:{lcd_goto_xy(2,5+j);pasodd[j]='4'; lcd_data(pasodd[j]);j++;break;}
				case 5:{lcd_goto_xy(2,5+j);pasodd[j]='5'; lcd_data(pasodd[j]);j++;break;}
 398:	0f 2e       	mov	r0, r31
 39a:	f5 e3       	ldi	r31, 0x35	; 53
 39c:	af 2e       	mov	r10, r31
 39e:	f0 2d       	mov	r31, r0
			    switch(key){
			    case 0:{lcd_goto_xy(2,5+j);pasodd[j]='0'; lcd_data(pasodd[j]);j++;break;}
		        case 1:{lcd_goto_xy(2,5+j);pasodd[j]='1'; lcd_data(pasodd[j]);j++;break;}
	            case 2:{lcd_goto_xy(2,5+j);pasodd[j]='2'; lcd_data(pasodd[j]);j++;break;}
                case 3:{lcd_goto_xy(2,5+j);pasodd[j]='3'; lcd_data(pasodd[j]);j++;break;}
				case 4:{lcd_goto_xy(2,5+j);pasodd[j]='4'; lcd_data(pasodd[j]);j++;break;}
 3a0:	0f 2e       	mov	r0, r31
 3a2:	f4 e3       	ldi	r31, 0x34	; 52
 3a4:	bf 2e       	mov	r11, r31
 3a6:	f0 2d       	mov	r31, r0
			 key=KeyPad_getpressedkey();
			    switch(key){
			    case 0:{lcd_goto_xy(2,5+j);pasodd[j]='0'; lcd_data(pasodd[j]);j++;break;}
		        case 1:{lcd_goto_xy(2,5+j);pasodd[j]='1'; lcd_data(pasodd[j]);j++;break;}
	            case 2:{lcd_goto_xy(2,5+j);pasodd[j]='2'; lcd_data(pasodd[j]);j++;break;}
                case 3:{lcd_goto_xy(2,5+j);pasodd[j]='3'; lcd_data(pasodd[j]);j++;break;}
 3a8:	0f 2e       	mov	r0, r31
 3aa:	f3 e3       	ldi	r31, 0x33	; 51
 3ac:	cf 2e       	mov	r12, r31
 3ae:	f0 2d       	mov	r31, r0
		 {
			 key=KeyPad_getpressedkey();
			    switch(key){
			    case 0:{lcd_goto_xy(2,5+j);pasodd[j]='0'; lcd_data(pasodd[j]);j++;break;}
		        case 1:{lcd_goto_xy(2,5+j);pasodd[j]='1'; lcd_data(pasodd[j]);j++;break;}
	            case 2:{lcd_goto_xy(2,5+j);pasodd[j]='2'; lcd_data(pasodd[j]);j++;break;}
 3b0:	0f 2e       	mov	r0, r31
 3b2:	f2 e3       	ldi	r31, 0x32	; 50
 3b4:	df 2e       	mov	r13, r31
 3b6:	f0 2d       	mov	r31, r0
		 do
		 {
			 key=KeyPad_getpressedkey();
			    switch(key){
			    case 0:{lcd_goto_xy(2,5+j);pasodd[j]='0'; lcd_data(pasodd[j]);j++;break;}
		        case 1:{lcd_goto_xy(2,5+j);pasodd[j]='1'; lcd_data(pasodd[j]);j++;break;}
 3b8:	0f 2e       	mov	r0, r31
 3ba:	f1 e3       	ldi	r31, 0x31	; 49
 3bc:	ef 2e       	mov	r14, r31
 3be:	f0 2d       	mov	r31, r0
		 lcd_goto_xy(2,5);
		 do
		 {
			 key=KeyPad_getpressedkey();
			    switch(key){
			    case 0:{lcd_goto_xy(2,5+j);pasodd[j]='0'; lcd_data(pasodd[j]);j++;break;}
 3c0:	0f 2e       	mov	r0, r31
 3c2:	f0 e3       	ldi	r31, 0x30	; 48
 3c4:	ff 2e       	mov	r15, r31
 3c6:	f0 2d       	mov	r31, r0
		 lcd_print("enter the new pass");
		 j=0;
		 lcd_goto_xy(2,5);
		 do
		 {
			 key=KeyPad_getpressedkey();
 3c8:	0e 94 62 00 	call	0xc4	; 0xc4 <KeyPad_getpressedkey>
 3cc:	80 93 bc 00 	sts	0x00BC, r24
			    switch(key){
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	8a 30       	cpi	r24, 0x0A	; 10
 3d4:	91 05       	cpc	r25, r1
 3d6:	08 f0       	brcs	.+2      	; 0x3da <main+0x9e>
 3d8:	90 c0       	rjmp	.+288    	; 0x4fa <main+0x1be>
 3da:	fc 01       	movw	r30, r24
 3dc:	e6 5d       	subi	r30, 0xD6	; 214
 3de:	ff 4f       	sbci	r31, 0xFF	; 255
 3e0:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__tablejump2__>
			    case 0:{lcd_goto_xy(2,5+j);pasodd[j]='0'; lcd_data(pasodd[j]);j++;break;}
 3e4:	6c 2f       	mov	r22, r28
 3e6:	6b 5f       	subi	r22, 0xFB	; 251
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 3ee:	fe 01       	movw	r30, r28
 3f0:	e0 5a       	subi	r30, 0xA0	; 160
 3f2:	ff 4f       	sbci	r31, 0xFF	; 255
 3f4:	f0 82       	st	Z, r15
 3f6:	8f 2d       	mov	r24, r15
 3f8:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 3fc:	21 96       	adiw	r28, 0x01	; 1
 3fe:	7d c0       	rjmp	.+250    	; 0x4fa <main+0x1be>
		        case 1:{lcd_goto_xy(2,5+j);pasodd[j]='1'; lcd_data(pasodd[j]);j++;break;}
 400:	6c 2f       	mov	r22, r28
 402:	6b 5f       	subi	r22, 0xFB	; 251
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 40a:	fe 01       	movw	r30, r28
 40c:	e0 5a       	subi	r30, 0xA0	; 160
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	e0 82       	st	Z, r14
 412:	8e 2d       	mov	r24, r14
 414:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 418:	21 96       	adiw	r28, 0x01	; 1
 41a:	6f c0       	rjmp	.+222    	; 0x4fa <main+0x1be>
	            case 2:{lcd_goto_xy(2,5+j);pasodd[j]='2'; lcd_data(pasodd[j]);j++;break;}
 41c:	6c 2f       	mov	r22, r28
 41e:	6b 5f       	subi	r22, 0xFB	; 251
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 426:	fe 01       	movw	r30, r28
 428:	e0 5a       	subi	r30, 0xA0	; 160
 42a:	ff 4f       	sbci	r31, 0xFF	; 255
 42c:	d0 82       	st	Z, r13
 42e:	8d 2d       	mov	r24, r13
 430:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 434:	21 96       	adiw	r28, 0x01	; 1
 436:	61 c0       	rjmp	.+194    	; 0x4fa <main+0x1be>
                case 3:{lcd_goto_xy(2,5+j);pasodd[j]='3'; lcd_data(pasodd[j]);j++;break;}
 438:	6c 2f       	mov	r22, r28
 43a:	6b 5f       	subi	r22, 0xFB	; 251
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 442:	fe 01       	movw	r30, r28
 444:	e0 5a       	subi	r30, 0xA0	; 160
 446:	ff 4f       	sbci	r31, 0xFF	; 255
 448:	c0 82       	st	Z, r12
 44a:	8c 2d       	mov	r24, r12
 44c:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 450:	21 96       	adiw	r28, 0x01	; 1
 452:	53 c0       	rjmp	.+166    	; 0x4fa <main+0x1be>
				case 4:{lcd_goto_xy(2,5+j);pasodd[j]='4'; lcd_data(pasodd[j]);j++;break;}
 454:	6c 2f       	mov	r22, r28
 456:	6b 5f       	subi	r22, 0xFB	; 251
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 45e:	fe 01       	movw	r30, r28
 460:	e0 5a       	subi	r30, 0xA0	; 160
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	b0 82       	st	Z, r11
 466:	8b 2d       	mov	r24, r11
 468:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 46c:	21 96       	adiw	r28, 0x01	; 1
 46e:	45 c0       	rjmp	.+138    	; 0x4fa <main+0x1be>
				case 5:{lcd_goto_xy(2,5+j);pasodd[j]='5'; lcd_data(pasodd[j]);j++;break;}
 470:	6c 2f       	mov	r22, r28
 472:	6b 5f       	subi	r22, 0xFB	; 251
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 47a:	fe 01       	movw	r30, r28
 47c:	e0 5a       	subi	r30, 0xA0	; 160
 47e:	ff 4f       	sbci	r31, 0xFF	; 255
 480:	a0 82       	st	Z, r10
 482:	8a 2d       	mov	r24, r10
 484:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 488:	21 96       	adiw	r28, 0x01	; 1
 48a:	37 c0       	rjmp	.+110    	; 0x4fa <main+0x1be>
				case 6:{lcd_goto_xy(2,5+j);pasodd[j]='6'; lcd_data(pasodd[j]);j++;break;}
 48c:	6c 2f       	mov	r22, r28
 48e:	6b 5f       	subi	r22, 0xFB	; 251
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 496:	fe 01       	movw	r30, r28
 498:	e0 5a       	subi	r30, 0xA0	; 160
 49a:	ff 4f       	sbci	r31, 0xFF	; 255
 49c:	70 82       	st	Z, r7
 49e:	87 2d       	mov	r24, r7
 4a0:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 4a4:	21 96       	adiw	r28, 0x01	; 1
 4a6:	29 c0       	rjmp	.+82     	; 0x4fa <main+0x1be>
				case 7:{lcd_goto_xy(2,5+j);pasodd[j]='7'; lcd_data(pasodd[j]);j++;break;}
 4a8:	6c 2f       	mov	r22, r28
 4aa:	6b 5f       	subi	r22, 0xFB	; 251
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 4b2:	fe 01       	movw	r30, r28
 4b4:	e0 5a       	subi	r30, 0xA0	; 160
 4b6:	ff 4f       	sbci	r31, 0xFF	; 255
 4b8:	60 82       	st	Z, r6
 4ba:	86 2d       	mov	r24, r6
 4bc:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 4c0:	21 96       	adiw	r28, 0x01	; 1
 4c2:	1b c0       	rjmp	.+54     	; 0x4fa <main+0x1be>
				case 8:{lcd_goto_xy(2,5+j);pasodd[j]='8'; lcd_data(pasodd[j]);j++;break;}
 4c4:	6c 2f       	mov	r22, r28
 4c6:	6b 5f       	subi	r22, 0xFB	; 251
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 4ce:	fe 01       	movw	r30, r28
 4d0:	e0 5a       	subi	r30, 0xA0	; 160
 4d2:	ff 4f       	sbci	r31, 0xFF	; 255
 4d4:	50 82       	st	Z, r5
 4d6:	85 2d       	mov	r24, r5
 4d8:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 4dc:	21 96       	adiw	r28, 0x01	; 1
 4de:	0d c0       	rjmp	.+26     	; 0x4fa <main+0x1be>
				case 9:{lcd_goto_xy(2,5+j);pasodd[j]='9'; lcd_data(pasodd[j]);j++;break;}
 4e0:	6c 2f       	mov	r22, r28
 4e2:	6b 5f       	subi	r22, 0xFB	; 251
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 4ea:	fe 01       	movw	r30, r28
 4ec:	e0 5a       	subi	r30, 0xA0	; 160
 4ee:	ff 4f       	sbci	r31, 0xFF	; 255
 4f0:	40 82       	st	Z, r4
 4f2:	83 2d       	mov	r24, r3
 4f4:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 4f8:	21 96       	adiw	r28, 0x01	; 1
				default:
				break;
				}
			} while (j<4);
 4fa:	c4 30       	cpi	r28, 0x04	; 4
 4fc:	d1 05       	cpc	r29, r1
 4fe:	0c f4       	brge	.+2      	; 0x502 <main+0x1c6>
 500:	63 cf       	rjmp	.-314    	; 0x3c8 <main+0x8c>
			eeprom_write_block(pasodd,0,strlen(pasodd));
 502:	f8 01       	movw	r30, r16
 504:	01 90       	ld	r0, Z+
 506:	00 20       	and	r0, r0
 508:	e9 f7       	brne	.-6      	; 0x504 <main+0x1c8>
 50a:	31 97       	sbiw	r30, 0x01	; 1
 50c:	af 01       	movw	r20, r30
 50e:	40 56       	subi	r20, 0x60	; 96
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	68 2d       	mov	r22, r8
 514:	79 2d       	mov	r23, r9
 516:	c8 01       	movw	r24, r16
 518:	0e 94 07 04 	call	0x80e	; 0x80e <__eewr_block_m32>
 51c:	9f ef       	ldi	r25, 0xFF	; 255
 51e:	e4 e3       	ldi	r30, 0x34	; 52
 520:	fc e0       	ldi	r31, 0x0C	; 12
 522:	91 50       	subi	r25, 0x01	; 1
 524:	e0 40       	sbci	r30, 0x00	; 0
 526:	f0 40       	sbci	r31, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <main+0x1e6>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <main+0x1f0>
 52c:	00 00       	nop
			_delay_ms(500);
			lcd_CLEAR();
 52e:	0e 94 94 01 	call	0x328	; 0x328 <lcd_CLEAR>
			lcd_goto_xy(1,1);
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
			lcd_print("pass has saved");
 53a:	81 e8       	ldi	r24, 0x81	; 129
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_print>
			lcd_goto_xy(2,1);
 542:	61 e0       	ldi	r22, 0x01	; 1
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
			lcd_print(pasodd);
 54a:	c8 01       	movw	r24, r16
 54c:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_print>
 550:	2f ef       	ldi	r18, 0xFF	; 255
 552:	84 e3       	ldi	r24, 0x34	; 52
 554:	9c e0       	ldi	r25, 0x0C	; 12
 556:	21 50       	subi	r18, 0x01	; 1
 558:	80 40       	sbci	r24, 0x00	; 0
 55a:	90 40       	sbci	r25, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <main+0x21a>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <main+0x224>
 560:	00 00       	nop
 562:	fc ce       	rjmp	.-520    	; 0x35c <main+0x20>
			
			_delay_ms(500);
			}			
		else {
		 lcd_CLEAR();
 564:	0e 94 94 01 	call	0x328	; 0x328 <lcd_CLEAR>
		lcd_goto_xy(1,1);
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
		lcd_print("enter the pass:");
 570:	80 e9       	ldi	r24, 0x90	; 144
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_print>
		i=0;
		lcd_goto_xy(2,5);
 578:	65 e0       	ldi	r22, 0x05	; 5
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
			}			
		else {
		 lcd_CLEAR();
		lcd_goto_xy(1,1);
		lcd_print("enter the pass:");
		i=0;
 580:	c8 2d       	mov	r28, r8
 582:	d9 2d       	mov	r29, r9
				case 3:{lcd_goto_xy(2,5+i);inpass[i]='3'; lcd_data(inpass[i]);i++;break;}			
				case 4:{lcd_goto_xy(2,5+i);inpass[i]='4'; lcd_data(inpass[i]);i++;break;}
				case 5:{lcd_goto_xy(2,5+i);inpass[i]='5'; lcd_data(inpass[i]);i++;break;}
				case 6:{lcd_goto_xy(2,5+i);inpass[i]='6'; lcd_data(inpass[i]);i++;break;}
				case 7:{lcd_goto_xy(2,5+i);inpass[i]='7'; lcd_data(inpass[i]);i++;break;}
				case 8:{lcd_goto_xy(2,5+i);inpass[i]='8'; lcd_data(inpass[i]);i++;break;}
 584:	0f 2e       	mov	r0, r31
 586:	f8 e3       	ldi	r31, 0x38	; 56
 588:	5f 2e       	mov	r5, r31
 58a:	f0 2d       	mov	r31, r0
				case 2:{lcd_goto_xy(2,5+i);inpass[i]='2'; lcd_data(inpass[i]);i++;break;}		
				case 3:{lcd_goto_xy(2,5+i);inpass[i]='3'; lcd_data(inpass[i]);i++;break;}			
				case 4:{lcd_goto_xy(2,5+i);inpass[i]='4'; lcd_data(inpass[i]);i++;break;}
				case 5:{lcd_goto_xy(2,5+i);inpass[i]='5'; lcd_data(inpass[i]);i++;break;}
				case 6:{lcd_goto_xy(2,5+i);inpass[i]='6'; lcd_data(inpass[i]);i++;break;}
				case 7:{lcd_goto_xy(2,5+i);inpass[i]='7'; lcd_data(inpass[i]);i++;break;}
 58c:	0f 2e       	mov	r0, r31
 58e:	f7 e3       	ldi	r31, 0x37	; 55
 590:	6f 2e       	mov	r6, r31
 592:	f0 2d       	mov	r31, r0
				case 1:{lcd_goto_xy(2,5+i);inpass[i]='1'; lcd_data(inpass[i]);i++;break;}			
				case 2:{lcd_goto_xy(2,5+i);inpass[i]='2'; lcd_data(inpass[i]);i++;break;}		
				case 3:{lcd_goto_xy(2,5+i);inpass[i]='3'; lcd_data(inpass[i]);i++;break;}			
				case 4:{lcd_goto_xy(2,5+i);inpass[i]='4'; lcd_data(inpass[i]);i++;break;}
				case 5:{lcd_goto_xy(2,5+i);inpass[i]='5'; lcd_data(inpass[i]);i++;break;}
				case 6:{lcd_goto_xy(2,5+i);inpass[i]='6'; lcd_data(inpass[i]);i++;break;}
 594:	0f 2e       	mov	r0, r31
 596:	f6 e3       	ldi	r31, 0x36	; 54
 598:	7f 2e       	mov	r7, r31
 59a:	f0 2d       	mov	r31, r0
				case 0:{lcd_goto_xy(2,5+i);inpass[i]='0'; lcd_data(inpass[i]);i++;break;}		    	
				case 1:{lcd_goto_xy(2,5+i);inpass[i]='1'; lcd_data(inpass[i]);i++;break;}			
				case 2:{lcd_goto_xy(2,5+i);inpass[i]='2'; lcd_data(inpass[i]);i++;break;}		
				case 3:{lcd_goto_xy(2,5+i);inpass[i]='3'; lcd_data(inpass[i]);i++;break;}			
				case 4:{lcd_goto_xy(2,5+i);inpass[i]='4'; lcd_data(inpass[i]);i++;break;}
				case 5:{lcd_goto_xy(2,5+i);inpass[i]='5'; lcd_data(inpass[i]);i++;break;}
 59c:	0f 2e       	mov	r0, r31
 59e:	f5 e3       	ldi	r31, 0x35	; 53
 5a0:	af 2e       	mov	r10, r31
 5a2:	f0 2d       	mov	r31, r0
			switch(key){
				case 0:{lcd_goto_xy(2,5+i);inpass[i]='0'; lcd_data(inpass[i]);i++;break;}		    	
				case 1:{lcd_goto_xy(2,5+i);inpass[i]='1'; lcd_data(inpass[i]);i++;break;}			
				case 2:{lcd_goto_xy(2,5+i);inpass[i]='2'; lcd_data(inpass[i]);i++;break;}		
				case 3:{lcd_goto_xy(2,5+i);inpass[i]='3'; lcd_data(inpass[i]);i++;break;}			
				case 4:{lcd_goto_xy(2,5+i);inpass[i]='4'; lcd_data(inpass[i]);i++;break;}
 5a4:	0f 2e       	mov	r0, r31
 5a6:	f4 e3       	ldi	r31, 0x34	; 52
 5a8:	bf 2e       	mov	r11, r31
 5aa:	f0 2d       	mov	r31, r0
			key=KeyPad_getpressedkey();
			switch(key){
				case 0:{lcd_goto_xy(2,5+i);inpass[i]='0'; lcd_data(inpass[i]);i++;break;}		    	
				case 1:{lcd_goto_xy(2,5+i);inpass[i]='1'; lcd_data(inpass[i]);i++;break;}			
				case 2:{lcd_goto_xy(2,5+i);inpass[i]='2'; lcd_data(inpass[i]);i++;break;}		
				case 3:{lcd_goto_xy(2,5+i);inpass[i]='3'; lcd_data(inpass[i]);i++;break;}			
 5ac:	0f 2e       	mov	r0, r31
 5ae:	f3 e3       	ldi	r31, 0x33	; 51
 5b0:	cf 2e       	mov	r12, r31
 5b2:	f0 2d       	mov	r31, r0
		{   
			key=KeyPad_getpressedkey();
			switch(key){
				case 0:{lcd_goto_xy(2,5+i);inpass[i]='0'; lcd_data(inpass[i]);i++;break;}		    	
				case 1:{lcd_goto_xy(2,5+i);inpass[i]='1'; lcd_data(inpass[i]);i++;break;}			
				case 2:{lcd_goto_xy(2,5+i);inpass[i]='2'; lcd_data(inpass[i]);i++;break;}		
 5b4:	0f 2e       	mov	r0, r31
 5b6:	f2 e3       	ldi	r31, 0x32	; 50
 5b8:	df 2e       	mov	r13, r31
 5ba:	f0 2d       	mov	r31, r0
		do
		{   
			key=KeyPad_getpressedkey();
			switch(key){
				case 0:{lcd_goto_xy(2,5+i);inpass[i]='0'; lcd_data(inpass[i]);i++;break;}		    	
				case 1:{lcd_goto_xy(2,5+i);inpass[i]='1'; lcd_data(inpass[i]);i++;break;}			
 5bc:	0f 2e       	mov	r0, r31
 5be:	f1 e3       	ldi	r31, 0x31	; 49
 5c0:	ef 2e       	mov	r14, r31
 5c2:	f0 2d       	mov	r31, r0
		lcd_goto_xy(2,5);
		do
		{   
			key=KeyPad_getpressedkey();
			switch(key){
				case 0:{lcd_goto_xy(2,5+i);inpass[i]='0'; lcd_data(inpass[i]);i++;break;}		    	
 5c4:	0f 2e       	mov	r0, r31
 5c6:	f0 e3       	ldi	r31, 0x30	; 48
 5c8:	ff 2e       	mov	r15, r31
 5ca:	f0 2d       	mov	r31, r0
		lcd_print("enter the pass:");
		i=0;
		lcd_goto_xy(2,5);
		do
		{   
			key=KeyPad_getpressedkey();
 5cc:	0e 94 62 00 	call	0xc4	; 0xc4 <KeyPad_getpressedkey>
 5d0:	80 93 bc 00 	sts	0x00BC, r24
			switch(key){
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	8a 30       	cpi	r24, 0x0A	; 10
 5d8:	91 05       	cpc	r25, r1
 5da:	08 f0       	brcs	.+2      	; 0x5de <main+0x2a2>
 5dc:	90 c0       	rjmp	.+288    	; 0x6fe <main+0x3c2>
 5de:	fc 01       	movw	r30, r24
 5e0:	ec 5c       	subi	r30, 0xCC	; 204
 5e2:	ff 4f       	sbci	r31, 0xFF	; 255
 5e4:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__tablejump2__>
				case 0:{lcd_goto_xy(2,5+i);inpass[i]='0'; lcd_data(inpass[i]);i++;break;}		    	
 5e8:	6c 2f       	mov	r22, r28
 5ea:	6b 5f       	subi	r22, 0xFB	; 251
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 5f2:	fe 01       	movw	r30, r28
 5f4:	e8 54       	subi	r30, 0x48	; 72
 5f6:	ff 4f       	sbci	r31, 0xFF	; 255
 5f8:	f0 82       	st	Z, r15
 5fa:	8f 2d       	mov	r24, r15
 5fc:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 600:	21 96       	adiw	r28, 0x01	; 1
 602:	7d c0       	rjmp	.+250    	; 0x6fe <main+0x3c2>
				case 1:{lcd_goto_xy(2,5+i);inpass[i]='1'; lcd_data(inpass[i]);i++;break;}			
 604:	6c 2f       	mov	r22, r28
 606:	6b 5f       	subi	r22, 0xFB	; 251
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 60e:	fe 01       	movw	r30, r28
 610:	e8 54       	subi	r30, 0x48	; 72
 612:	ff 4f       	sbci	r31, 0xFF	; 255
 614:	e0 82       	st	Z, r14
 616:	8e 2d       	mov	r24, r14
 618:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 61c:	21 96       	adiw	r28, 0x01	; 1
 61e:	6f c0       	rjmp	.+222    	; 0x6fe <main+0x3c2>
				case 2:{lcd_goto_xy(2,5+i);inpass[i]='2'; lcd_data(inpass[i]);i++;break;}		
 620:	6c 2f       	mov	r22, r28
 622:	6b 5f       	subi	r22, 0xFB	; 251
 624:	82 e0       	ldi	r24, 0x02	; 2
 626:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 62a:	fe 01       	movw	r30, r28
 62c:	e8 54       	subi	r30, 0x48	; 72
 62e:	ff 4f       	sbci	r31, 0xFF	; 255
 630:	d0 82       	st	Z, r13
 632:	8d 2d       	mov	r24, r13
 634:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 638:	21 96       	adiw	r28, 0x01	; 1
 63a:	61 c0       	rjmp	.+194    	; 0x6fe <main+0x3c2>
				case 3:{lcd_goto_xy(2,5+i);inpass[i]='3'; lcd_data(inpass[i]);i++;break;}			
 63c:	6c 2f       	mov	r22, r28
 63e:	6b 5f       	subi	r22, 0xFB	; 251
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 646:	fe 01       	movw	r30, r28
 648:	e8 54       	subi	r30, 0x48	; 72
 64a:	ff 4f       	sbci	r31, 0xFF	; 255
 64c:	c0 82       	st	Z, r12
 64e:	8c 2d       	mov	r24, r12
 650:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 654:	21 96       	adiw	r28, 0x01	; 1
 656:	53 c0       	rjmp	.+166    	; 0x6fe <main+0x3c2>
				case 4:{lcd_goto_xy(2,5+i);inpass[i]='4'; lcd_data(inpass[i]);i++;break;}
 658:	6c 2f       	mov	r22, r28
 65a:	6b 5f       	subi	r22, 0xFB	; 251
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 662:	fe 01       	movw	r30, r28
 664:	e8 54       	subi	r30, 0x48	; 72
 666:	ff 4f       	sbci	r31, 0xFF	; 255
 668:	b0 82       	st	Z, r11
 66a:	8b 2d       	mov	r24, r11
 66c:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 670:	21 96       	adiw	r28, 0x01	; 1
 672:	45 c0       	rjmp	.+138    	; 0x6fe <main+0x3c2>
				case 5:{lcd_goto_xy(2,5+i);inpass[i]='5'; lcd_data(inpass[i]);i++;break;}
 674:	6c 2f       	mov	r22, r28
 676:	6b 5f       	subi	r22, 0xFB	; 251
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 67e:	fe 01       	movw	r30, r28
 680:	e8 54       	subi	r30, 0x48	; 72
 682:	ff 4f       	sbci	r31, 0xFF	; 255
 684:	a0 82       	st	Z, r10
 686:	8a 2d       	mov	r24, r10
 688:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 68c:	21 96       	adiw	r28, 0x01	; 1
 68e:	37 c0       	rjmp	.+110    	; 0x6fe <main+0x3c2>
				case 6:{lcd_goto_xy(2,5+i);inpass[i]='6'; lcd_data(inpass[i]);i++;break;}
 690:	6c 2f       	mov	r22, r28
 692:	6b 5f       	subi	r22, 0xFB	; 251
 694:	82 e0       	ldi	r24, 0x02	; 2
 696:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 69a:	fe 01       	movw	r30, r28
 69c:	e8 54       	subi	r30, 0x48	; 72
 69e:	ff 4f       	sbci	r31, 0xFF	; 255
 6a0:	70 82       	st	Z, r7
 6a2:	87 2d       	mov	r24, r7
 6a4:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 6a8:	21 96       	adiw	r28, 0x01	; 1
 6aa:	29 c0       	rjmp	.+82     	; 0x6fe <main+0x3c2>
				case 7:{lcd_goto_xy(2,5+i);inpass[i]='7'; lcd_data(inpass[i]);i++;break;}
 6ac:	6c 2f       	mov	r22, r28
 6ae:	6b 5f       	subi	r22, 0xFB	; 251
 6b0:	82 e0       	ldi	r24, 0x02	; 2
 6b2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 6b6:	fe 01       	movw	r30, r28
 6b8:	e8 54       	subi	r30, 0x48	; 72
 6ba:	ff 4f       	sbci	r31, 0xFF	; 255
 6bc:	60 82       	st	Z, r6
 6be:	86 2d       	mov	r24, r6
 6c0:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 6c4:	21 96       	adiw	r28, 0x01	; 1
 6c6:	1b c0       	rjmp	.+54     	; 0x6fe <main+0x3c2>
				case 8:{lcd_goto_xy(2,5+i);inpass[i]='8'; lcd_data(inpass[i]);i++;break;}
 6c8:	6c 2f       	mov	r22, r28
 6ca:	6b 5f       	subi	r22, 0xFB	; 251
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 6d2:	fe 01       	movw	r30, r28
 6d4:	e8 54       	subi	r30, 0x48	; 72
 6d6:	ff 4f       	sbci	r31, 0xFF	; 255
 6d8:	50 82       	st	Z, r5
 6da:	85 2d       	mov	r24, r5
 6dc:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 6e0:	21 96       	adiw	r28, 0x01	; 1
 6e2:	0d c0       	rjmp	.+26     	; 0x6fe <main+0x3c2>
				case 9:{lcd_goto_xy(2,5+i);inpass[i]='9'; lcd_data(inpass[i]);i++;break;}
 6e4:	6c 2f       	mov	r22, r28
 6e6:	6b 5f       	subi	r22, 0xFB	; 251
 6e8:	82 e0       	ldi	r24, 0x02	; 2
 6ea:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
 6ee:	fe 01       	movw	r30, r28
 6f0:	e8 54       	subi	r30, 0x48	; 72
 6f2:	ff 4f       	sbci	r31, 0xFF	; 255
 6f4:	40 82       	st	Z, r4
 6f6:	83 2d       	mov	r24, r3
 6f8:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_data>
 6fc:	21 96       	adiw	r28, 0x01	; 1
				default:
				break;
				}
			} while (i<4);
 6fe:	c4 30       	cpi	r28, 0x04	; 4
 700:	d1 05       	cpc	r29, r1
 702:	0c f4       	brge	.+2      	; 0x706 <main+0x3ca>
 704:	63 cf       	rjmp	.-314    	; 0x5cc <main+0x290>
 706:	2f ef       	ldi	r18, 0xFF	; 255
 708:	84 e3       	ldi	r24, 0x34	; 52
 70a:	9c e0       	ldi	r25, 0x0C	; 12
 70c:	21 50       	subi	r18, 0x01	; 1
 70e:	80 40       	sbci	r24, 0x00	; 0
 710:	90 40       	sbci	r25, 0x00	; 0
 712:	e1 f7       	brne	.-8      	; 0x70c <main+0x3d0>
 714:	00 c0       	rjmp	.+0      	; 0x716 <main+0x3da>
 716:	00 00       	nop
			_delay_ms(500);
			eeprom_read_block(pasodd,0,strlen(pasodd));
 718:	f8 01       	movw	r30, r16
 71a:	01 90       	ld	r0, Z+
 71c:	00 20       	and	r0, r0
 71e:	e9 f7       	brne	.-6      	; 0x71a <main+0x3de>
 720:	31 97       	sbiw	r30, 0x01	; 1
 722:	af 01       	movw	r20, r30
 724:	40 56       	subi	r20, 0x60	; 96
 726:	50 40       	sbci	r21, 0x00	; 0
 728:	68 2d       	mov	r22, r8
 72a:	79 2d       	mov	r23, r9
 72c:	c8 01       	movw	r24, r16
 72e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__eerd_block_m32>
			if (inpass[0]==pasodd[0] && inpass[1]==pasodd[1] && inpass[2]==pasodd[2]&& inpass[3]==pasodd[3])
 732:	e8 eb       	ldi	r30, 0xB8	; 184
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	90 81       	ld	r25, Z
 738:	f8 01       	movw	r30, r16
 73a:	80 81       	ld	r24, Z
 73c:	98 13       	cpse	r25, r24
 73e:	3d c0       	rjmp	.+122    	; 0x7ba <main+0x47e>
 740:	e9 eb       	ldi	r30, 0xB9	; 185
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	90 81       	ld	r25, Z
 746:	e1 e6       	ldi	r30, 0x61	; 97
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 81       	ld	r24, Z
 74c:	98 13       	cpse	r25, r24
 74e:	35 c0       	rjmp	.+106    	; 0x7ba <main+0x47e>
 750:	ea eb       	ldi	r30, 0xBA	; 186
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	90 81       	ld	r25, Z
 756:	e2 e6       	ldi	r30, 0x62	; 98
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	98 13       	cpse	r25, r24
 75e:	2d c0       	rjmp	.+90     	; 0x7ba <main+0x47e>
 760:	eb eb       	ldi	r30, 0xBB	; 187
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	90 81       	ld	r25, Z
 766:	e3 e6       	ldi	r30, 0x63	; 99
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	80 81       	ld	r24, Z
 76c:	98 13       	cpse	r25, r24
 76e:	25 c0       	rjmp	.+74     	; 0x7ba <main+0x47e>
			{lcd_CLEAR();
 770:	0e 94 94 01 	call	0x328	; 0x328 <lcd_CLEAR>
				lcd_goto_xy(1,5);
 774:	65 e0       	ldi	r22, 0x05	; 5
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
				lcd_print("correct ");
 77c:	80 ea       	ldi	r24, 0xA0	; 160
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_print>
 784:	e4 e6       	ldi	r30, 0x64	; 100
 786:	f0 e0       	ldi	r31, 0x00	; 0
				for(int f=0;f<9;f++){
					PORTB=s7eg[f];
 788:	81 91       	ld	r24, Z+
 78a:	88 bb       	out	0x18, r24	; 24
 78c:	2f ef       	ldi	r18, 0xFF	; 255
 78e:	81 ee       	ldi	r24, 0xE1	; 225
 790:	94 e0       	ldi	r25, 0x04	; 4
 792:	21 50       	subi	r18, 0x01	; 1
 794:	80 40       	sbci	r24, 0x00	; 0
 796:	90 40       	sbci	r25, 0x00	; 0
 798:	e1 f7       	brne	.-8      	; 0x792 <main+0x456>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <main+0x460>
 79c:	00 00       	nop
			eeprom_read_block(pasodd,0,strlen(pasodd));
			if (inpass[0]==pasodd[0] && inpass[1]==pasodd[1] && inpass[2]==pasodd[2]&& inpass[3]==pasodd[3])
			{lcd_CLEAR();
				lcd_goto_xy(1,5);
				lcd_print("correct ");
				for(int f=0;f<9;f++){
 79e:	20 e0       	ldi	r18, 0x00	; 0
 7a0:	ed 36       	cpi	r30, 0x6D	; 109
 7a2:	f2 07       	cpc	r31, r18
 7a4:	89 f7       	brne	.-30     	; 0x788 <main+0x44c>
 7a6:	8f ef       	ldi	r24, 0xFF	; 255
 7a8:	94 e3       	ldi	r25, 0x34	; 52
 7aa:	ec e0       	ldi	r30, 0x0C	; 12
 7ac:	81 50       	subi	r24, 0x01	; 1
 7ae:	90 40       	sbci	r25, 0x00	; 0
 7b0:	e0 40       	sbci	r30, 0x00	; 0
 7b2:	e1 f7       	brne	.-8      	; 0x7ac <main+0x470>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <main+0x47a>
 7b6:	00 00       	nop
 7b8:	d1 cd       	rjmp	.-1118   	; 0x35c <main+0x20>
					_delay_ms(200);
				}
				_delay_ms(500);
				} 
				else
			{   lcd_CLEAR();
 7ba:	0e 94 94 01 	call	0x328	; 0x328 <lcd_CLEAR>
				lcd_goto_xy(2,2);
 7be:	62 e0       	ldi	r22, 0x02	; 2
 7c0:	82 e0       	ldi	r24, 0x02	; 2
 7c2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_goto_xy>
				lcd_print("wrong password");
 7c6:	89 ea       	ldi	r24, 0xA9	; 169
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_print>
 7ce:	ff ef       	ldi	r31, 0xFF	; 255
 7d0:	24 e3       	ldi	r18, 0x34	; 52
 7d2:	8c e0       	ldi	r24, 0x0C	; 12
 7d4:	f1 50       	subi	r31, 0x01	; 1
 7d6:	20 40       	sbci	r18, 0x00	; 0
 7d8:	80 40       	sbci	r24, 0x00	; 0
 7da:	e1 f7       	brne	.-8      	; 0x7d4 <main+0x498>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <main+0x4a2>
 7de:	00 00       	nop
 7e0:	bd cd       	rjmp	.-1158   	; 0x35c <main+0x20>

000007e2 <__tablejump2__>:
 7e2:	ee 0f       	add	r30, r30
 7e4:	ff 1f       	adc	r31, r31

000007e6 <__tablejump__>:
 7e6:	05 90       	lpm	r0, Z+
 7e8:	f4 91       	lpm	r31, Z
 7ea:	e0 2d       	mov	r30, r0
 7ec:	09 94       	ijmp

000007ee <__eerd_block_m32>:
 7ee:	dc 01       	movw	r26, r24
 7f0:	cb 01       	movw	r24, r22

000007f2 <__eerd_blraw_m32>:
 7f2:	fc 01       	movw	r30, r24
 7f4:	e1 99       	sbic	0x1c, 1	; 28
 7f6:	fe cf       	rjmp	.-4      	; 0x7f4 <__eerd_blraw_m32+0x2>
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <__eerd_blraw_m32+0x14>
 7fa:	ff bb       	out	0x1f, r31	; 31
 7fc:	ee bb       	out	0x1e, r30	; 30
 7fe:	e0 9a       	sbi	0x1c, 0	; 28
 800:	31 96       	adiw	r30, 0x01	; 1
 802:	0d b2       	in	r0, 0x1d	; 29
 804:	0d 92       	st	X+, r0
 806:	41 50       	subi	r20, 0x01	; 1
 808:	50 40       	sbci	r21, 0x00	; 0
 80a:	b8 f7       	brcc	.-18     	; 0x7fa <__eerd_blraw_m32+0x8>
 80c:	08 95       	ret

0000080e <__eewr_block_m32>:
 80e:	dc 01       	movw	r26, r24
 810:	cb 01       	movw	r24, r22
 812:	03 c0       	rjmp	.+6      	; 0x81a <__eewr_block_m32+0xc>
 814:	2d 91       	ld	r18, X+
 816:	0e 94 12 04 	call	0x824	; 0x824 <__eewr_r18_m32>
 81a:	41 50       	subi	r20, 0x01	; 1
 81c:	50 40       	sbci	r21, 0x00	; 0
 81e:	d0 f7       	brcc	.-12     	; 0x814 <__eewr_block_m32+0x6>
 820:	08 95       	ret

00000822 <__eewr_byte_m32>:
 822:	26 2f       	mov	r18, r22

00000824 <__eewr_r18_m32>:
 824:	e1 99       	sbic	0x1c, 1	; 28
 826:	fe cf       	rjmp	.-4      	; 0x824 <__eewr_r18_m32>
 828:	9f bb       	out	0x1f, r25	; 31
 82a:	8e bb       	out	0x1e, r24	; 30
 82c:	2d bb       	out	0x1d, r18	; 29
 82e:	0f b6       	in	r0, 0x3f	; 63
 830:	f8 94       	cli
 832:	e2 9a       	sbi	0x1c, 2	; 28
 834:	e1 9a       	sbi	0x1c, 1	; 28
 836:	0f be       	out	0x3f, r0	; 63
 838:	01 96       	adiw	r24, 0x01	; 1
 83a:	08 95       	ret

0000083c <_exit>:
 83c:	f8 94       	cli

0000083e <__stop_program>:
 83e:	ff cf       	rjmp	.-2      	; 0x83e <__stop_program>
