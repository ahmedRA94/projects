
MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000070  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000382  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001ea  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002af  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a8  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000253  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001cb  00000000  00000000  00000d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Init>:
  6c:	11 b8       	out	0x01, r1	; 1
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	80 b9       	out	0x00, r24	; 0
  72:	08 95       	ret

00000074 <I2C_Start>:
  74:	94 ea       	ldi	r25, 0xA4	; 164
  76:	96 bf       	out	0x36, r25	; 54
  78:	06 b6       	in	r0, 0x36	; 54
  7a:	07 fe       	sbrs	r0, 7
  7c:	fd cf       	rjmp	.-6      	; 0x78 <I2C_Start+0x4>
  7e:	91 b1       	in	r25, 0x01	; 1
  80:	98 7f       	andi	r25, 0xF8	; 248
  82:	98 30       	cpi	r25, 0x08	; 8
  84:	71 f4       	brne	.+28     	; 0xa2 <I2C_Start+0x2e>
  86:	83 b9       	out	0x03, r24	; 3
  88:	84 e8       	ldi	r24, 0x84	; 132
  8a:	86 bf       	out	0x36, r24	; 54
  8c:	06 b6       	in	r0, 0x36	; 54
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <I2C_Start+0x18>
  92:	81 b1       	in	r24, 0x01	; 1
  94:	88 7f       	andi	r24, 0xF8	; 248
  96:	88 31       	cpi	r24, 0x18	; 24
  98:	31 f0       	breq	.+12     	; 0xa6 <I2C_Start+0x32>
  9a:	80 32       	cpi	r24, 0x20	; 32
  9c:	31 f4       	brne	.+12     	; 0xaa <I2C_Start+0x36>
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	08 95       	ret
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	08 95       	ret
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	08 95       	ret
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	08 95       	ret

000000ae <I2C_Repeated_Start>:
  ae:	94 ea       	ldi	r25, 0xA4	; 164
  b0:	96 bf       	out	0x36, r25	; 54
  b2:	06 b6       	in	r0, 0x36	; 54
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <I2C_Repeated_Start+0x4>
  b8:	91 b1       	in	r25, 0x01	; 1
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	90 31       	cpi	r25, 0x10	; 16
  be:	71 f4       	brne	.+28     	; 0xdc <I2C_Repeated_Start+0x2e>
  c0:	83 b9       	out	0x03, r24	; 3
  c2:	84 e8       	ldi	r24, 0x84	; 132
  c4:	86 bf       	out	0x36, r24	; 54
  c6:	06 b6       	in	r0, 0x36	; 54
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <I2C_Repeated_Start+0x18>
  cc:	81 b1       	in	r24, 0x01	; 1
  ce:	88 7f       	andi	r24, 0xF8	; 248
  d0:	80 34       	cpi	r24, 0x40	; 64
  d2:	31 f0       	breq	.+12     	; 0xe0 <I2C_Repeated_Start+0x32>
  d4:	88 34       	cpi	r24, 0x48	; 72
  d6:	31 f4       	brne	.+12     	; 0xe4 <I2C_Repeated_Start+0x36>
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	08 95       	ret
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	08 95       	ret
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	08 95       	ret

000000e8 <I2C_Write>:
  e8:	83 b9       	out	0x03, r24	; 3
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	86 bf       	out	0x36, r24	; 54
  ee:	06 b6       	in	r0, 0x36	; 54
  f0:	07 fe       	sbrs	r0, 7
  f2:	fd cf       	rjmp	.-6      	; 0xee <I2C_Write+0x6>
  f4:	81 b1       	in	r24, 0x01	; 1
  f6:	88 7f       	andi	r24, 0xF8	; 248
  f8:	88 32       	cpi	r24, 0x28	; 40
  fa:	21 f0       	breq	.+8      	; 0x104 <I2C_Write+0x1c>
  fc:	80 33       	cpi	r24, 0x30	; 48
  fe:	21 f4       	brne	.+8      	; 0x108 <I2C_Write+0x20>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	08 95       	ret
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 95       	ret
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	08 95       	ret

0000010c <I2C_Stop>:
 10c:	84 e9       	ldi	r24, 0x94	; 148
 10e:	86 bf       	out	0x36, r24	; 54
 110:	06 b6       	in	r0, 0x36	; 54
 112:	04 fc       	sbrc	r0, 4
 114:	fd cf       	rjmp	.-6      	; 0x110 <I2C_Stop+0x4>
 116:	08 95       	ret

00000118 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "I2C_MASTER.h"

int main(void)
{ DDRA&=0x00;
 118:	8a b3       	in	r24, 0x1a	; 26
 11a:	1a ba       	out	0x1a, r1	; 26
	I2C_Init();
 11c:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Init>
	 char count=0;
 120:	c0 e0       	ldi	r28, 0x00	; 0
	 char vtx=3;
    while(1)
    {	
	   if (PINA&(1<<PA0))
 122:	c8 9b       	sbis	0x19, 0	; 25
 124:	fe cf       	rjmp	.-4      	; 0x122 <main+0xa>
		{	vtx++;
 126:	d4 e0       	ldi	r29, 0x04	; 4
 128:	dc 0f       	add	r29, r28
		count++;
 12a:	cf 5f       	subi	r28, 0xFF	; 255
		I2C_Start(0x40);
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	0e 94 3a 00 	call	0x74	; 0x74 <I2C_Start>
		I2C_Write(count);
 132:	8c 2f       	mov	r24, r28
 134:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_Write>
		I2C_Repeated_Start(0x50);
 138:	80 e5       	ldi	r24, 0x50	; 80
 13a:	0e 94 57 00 	call	0xae	; 0xae <I2C_Repeated_Start>
		I2C_Write(vtx);
 13e:	8d 2f       	mov	r24, r29
 140:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_Write>
		I2C_Stop();
 144:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	84 e3       	ldi	r24, 0x34	; 52
 14c:	9c e0       	ldi	r25, 0x0C	; 12
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x36>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x40>
 158:	00 00       	nop
		_delay_ms(500);
		while(PINA&(1<<PA0));
 15a:	c8 99       	sbic	0x19, 0	; 25
 15c:	fe cf       	rjmp	.-4      	; 0x15a <main+0x42>
 15e:	e1 cf       	rjmp	.-62     	; 0x122 <main+0xa>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
