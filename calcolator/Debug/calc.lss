
calc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  000050ee  00005162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002b14  00000000  00000000  00005288  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bf2  00000000  00000000  00007d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000898e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  00008b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  00008d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  0000b12a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  0000c4a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000d67c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  0000d83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000db2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e4fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      10:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      14:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      18:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      1c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      20:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      24:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      2c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      30:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      34:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      3c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      44:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      48:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      4c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      50:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatsisf+0x1a>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x172>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1f8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <__bad_interrupt>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x3e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ee ee       	ldi	r30, 0xEE	; 238
     162:	f0 e5       	ldi	r31, 0x50	; 80
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a6 38       	cpi	r26, 0x86	; 134
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>
     170:	0e 94 f6 21 	call	0x43ec	; 0x43ec <main>
     174:	0c 94 75 28 	jmp	0x50ea	; 0x50ea <_exit>

00000178 <__bad_interrupt>:
     178:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017c <__fixunssfsi>:
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	7b 01       	movw	r14, r22
     186:	8c 01       	movw	r16, r24
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	5f e4       	ldi	r21, 0x4F	; 79
     190:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gesf2>
     194:	88 23       	and	r24, r24
     196:	8c f0       	brlt	.+34     	; 0x1ba <__fixunssfsi+0x3e>
     198:	c8 01       	movw	r24, r16
     19a:	b7 01       	movw	r22, r14
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 36 02 	call	0x46c	; 0x46c <__subsf3>
     1a8:	0e 94 28 05 	call	0xa50	; 0xa50 <__fixsfsi>
     1ac:	9b 01       	movw	r18, r22
     1ae:	ac 01       	movw	r20, r24
     1b0:	20 50       	subi	r18, 0x00	; 0
     1b2:	30 40       	sbci	r19, 0x00	; 0
     1b4:	40 40       	sbci	r20, 0x00	; 0
     1b6:	50 48       	sbci	r21, 0x80	; 128
     1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <__fixunssfsi+0x4a>
     1ba:	c8 01       	movw	r24, r16
     1bc:	b7 01       	movw	r22, r14
     1be:	0e 94 28 05 	call	0xa50	; 0xa50 <__fixsfsi>
     1c2:	9b 01       	movw	r18, r22
     1c4:	ac 01       	movw	r20, r24
     1c6:	b9 01       	movw	r22, r18
     1c8:	ca 01       	movw	r24, r20
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	08 95       	ret

000001d4 <_fpadd_parts>:
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	e0 ef       	ldi	r30, 0xF0	; 240
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	0c 94 e3 25 	jmp	0x4bc6	; 0x4bc6 <__prologue_saves__>
     1e0:	dc 01       	movw	r26, r24
     1e2:	2b 01       	movw	r4, r22
     1e4:	fa 01       	movw	r30, r20
     1e6:	9c 91       	ld	r25, X
     1e8:	92 30       	cpi	r25, 0x02	; 2
     1ea:	08 f4       	brcc	.+2      	; 0x1ee <_fpadd_parts+0x1a>
     1ec:	39 c1       	rjmp	.+626    	; 0x460 <_fpadd_parts+0x28c>
     1ee:	eb 01       	movw	r28, r22
     1f0:	88 81       	ld	r24, Y
     1f2:	82 30       	cpi	r24, 0x02	; 2
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <_fpadd_parts+0x24>
     1f6:	33 c1       	rjmp	.+614    	; 0x45e <_fpadd_parts+0x28a>
     1f8:	94 30       	cpi	r25, 0x04	; 4
     1fa:	69 f4       	brne	.+26     	; 0x216 <_fpadd_parts+0x42>
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	09 f0       	breq	.+2      	; 0x202 <_fpadd_parts+0x2e>
     200:	2f c1       	rjmp	.+606    	; 0x460 <_fpadd_parts+0x28c>
     202:	11 96       	adiw	r26, 0x01	; 1
     204:	9c 91       	ld	r25, X
     206:	11 97       	sbiw	r26, 0x01	; 1
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	98 17       	cp	r25, r24
     20c:	09 f4       	brne	.+2      	; 0x210 <_fpadd_parts+0x3c>
     20e:	28 c1       	rjmp	.+592    	; 0x460 <_fpadd_parts+0x28c>
     210:	ae e7       	ldi	r26, 0x7E	; 126
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	25 c1       	rjmp	.+586    	; 0x460 <_fpadd_parts+0x28c>
     216:	84 30       	cpi	r24, 0x04	; 4
     218:	09 f4       	brne	.+2      	; 0x21c <_fpadd_parts+0x48>
     21a:	21 c1       	rjmp	.+578    	; 0x45e <_fpadd_parts+0x28a>
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	a9 f4       	brne	.+42     	; 0x24a <_fpadd_parts+0x76>
     220:	92 30       	cpi	r25, 0x02	; 2
     222:	09 f0       	breq	.+2      	; 0x226 <_fpadd_parts+0x52>
     224:	1d c1       	rjmp	.+570    	; 0x460 <_fpadd_parts+0x28c>
     226:	9a 01       	movw	r18, r20
     228:	ad 01       	movw	r20, r26
     22a:	88 e0       	ldi	r24, 0x08	; 8
     22c:	ea 01       	movw	r28, r20
     22e:	09 90       	ld	r0, Y+
     230:	ae 01       	movw	r20, r28
     232:	e9 01       	movw	r28, r18
     234:	09 92       	st	Y+, r0
     236:	9e 01       	movw	r18, r28
     238:	81 50       	subi	r24, 0x01	; 1
     23a:	c1 f7       	brne	.-16     	; 0x22c <_fpadd_parts+0x58>
     23c:	e2 01       	movw	r28, r4
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	9c 91       	ld	r25, X
     244:	89 23       	and	r24, r25
     246:	81 83       	std	Z+1, r24	; 0x01
     248:	08 c1       	rjmp	.+528    	; 0x45a <_fpadd_parts+0x286>
     24a:	92 30       	cpi	r25, 0x02	; 2
     24c:	09 f4       	brne	.+2      	; 0x250 <_fpadd_parts+0x7c>
     24e:	07 c1       	rjmp	.+526    	; 0x45e <_fpadd_parts+0x28a>
     250:	12 96       	adiw	r26, 0x02	; 2
     252:	2d 90       	ld	r2, X+
     254:	3c 90       	ld	r3, X
     256:	13 97       	sbiw	r26, 0x03	; 3
     258:	eb 01       	movw	r28, r22
     25a:	8a 81       	ldd	r24, Y+2	; 0x02
     25c:	9b 81       	ldd	r25, Y+3	; 0x03
     25e:	14 96       	adiw	r26, 0x04	; 4
     260:	ad 90       	ld	r10, X+
     262:	bd 90       	ld	r11, X+
     264:	cd 90       	ld	r12, X+
     266:	dc 90       	ld	r13, X
     268:	17 97       	sbiw	r26, 0x07	; 7
     26a:	ec 80       	ldd	r14, Y+4	; 0x04
     26c:	fd 80       	ldd	r15, Y+5	; 0x05
     26e:	0e 81       	ldd	r16, Y+6	; 0x06
     270:	1f 81       	ldd	r17, Y+7	; 0x07
     272:	91 01       	movw	r18, r2
     274:	28 1b       	sub	r18, r24
     276:	39 0b       	sbc	r19, r25
     278:	b9 01       	movw	r22, r18
     27a:	37 ff       	sbrs	r19, 7
     27c:	04 c0       	rjmp	.+8      	; 0x286 <_fpadd_parts+0xb2>
     27e:	66 27       	eor	r22, r22
     280:	77 27       	eor	r23, r23
     282:	62 1b       	sub	r22, r18
     284:	73 0b       	sbc	r23, r19
     286:	60 32       	cpi	r22, 0x20	; 32
     288:	71 05       	cpc	r23, r1
     28a:	0c f0       	brlt	.+2      	; 0x28e <_fpadd_parts+0xba>
     28c:	61 c0       	rjmp	.+194    	; 0x350 <_fpadd_parts+0x17c>
     28e:	12 16       	cp	r1, r18
     290:	13 06       	cpc	r1, r19
     292:	6c f5       	brge	.+90     	; 0x2ee <_fpadd_parts+0x11a>
     294:	37 01       	movw	r6, r14
     296:	48 01       	movw	r8, r16
     298:	06 2e       	mov	r0, r22
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <_fpadd_parts+0xd0>
     29c:	96 94       	lsr	r9
     29e:	87 94       	ror	r8
     2a0:	77 94       	ror	r7
     2a2:	67 94       	ror	r6
     2a4:	0a 94       	dec	r0
     2a6:	d2 f7       	brpl	.-12     	; 0x29c <_fpadd_parts+0xc8>
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	04 c0       	rjmp	.+8      	; 0x2ba <_fpadd_parts+0xe6>
     2b2:	22 0f       	add	r18, r18
     2b4:	33 1f       	adc	r19, r19
     2b6:	44 1f       	adc	r20, r20
     2b8:	55 1f       	adc	r21, r21
     2ba:	6a 95       	dec	r22
     2bc:	d2 f7       	brpl	.-12     	; 0x2b2 <_fpadd_parts+0xde>
     2be:	21 50       	subi	r18, 0x01	; 1
     2c0:	30 40       	sbci	r19, 0x00	; 0
     2c2:	40 40       	sbci	r20, 0x00	; 0
     2c4:	50 40       	sbci	r21, 0x00	; 0
     2c6:	2e 21       	and	r18, r14
     2c8:	3f 21       	and	r19, r15
     2ca:	40 23       	and	r20, r16
     2cc:	51 23       	and	r21, r17
     2ce:	21 15       	cp	r18, r1
     2d0:	31 05       	cpc	r19, r1
     2d2:	41 05       	cpc	r20, r1
     2d4:	51 05       	cpc	r21, r1
     2d6:	21 f0       	breq	.+8      	; 0x2e0 <_fpadd_parts+0x10c>
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	79 01       	movw	r14, r18
     2e2:	8a 01       	movw	r16, r20
     2e4:	e6 28       	or	r14, r6
     2e6:	f7 28       	or	r15, r7
     2e8:	08 29       	or	r16, r8
     2ea:	19 29       	or	r17, r9
     2ec:	3c c0       	rjmp	.+120    	; 0x366 <_fpadd_parts+0x192>
     2ee:	23 2b       	or	r18, r19
     2f0:	d1 f1       	breq	.+116    	; 0x366 <_fpadd_parts+0x192>
     2f2:	26 0e       	add	r2, r22
     2f4:	37 1e       	adc	r3, r23
     2f6:	35 01       	movw	r6, r10
     2f8:	46 01       	movw	r8, r12
     2fa:	06 2e       	mov	r0, r22
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <_fpadd_parts+0x132>
     2fe:	96 94       	lsr	r9
     300:	87 94       	ror	r8
     302:	77 94       	ror	r7
     304:	67 94       	ror	r6
     306:	0a 94       	dec	r0
     308:	d2 f7       	brpl	.-12     	; 0x2fe <_fpadd_parts+0x12a>
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	04 c0       	rjmp	.+8      	; 0x31c <_fpadd_parts+0x148>
     314:	22 0f       	add	r18, r18
     316:	33 1f       	adc	r19, r19
     318:	44 1f       	adc	r20, r20
     31a:	55 1f       	adc	r21, r21
     31c:	6a 95       	dec	r22
     31e:	d2 f7       	brpl	.-12     	; 0x314 <_fpadd_parts+0x140>
     320:	21 50       	subi	r18, 0x01	; 1
     322:	30 40       	sbci	r19, 0x00	; 0
     324:	40 40       	sbci	r20, 0x00	; 0
     326:	50 40       	sbci	r21, 0x00	; 0
     328:	2a 21       	and	r18, r10
     32a:	3b 21       	and	r19, r11
     32c:	4c 21       	and	r20, r12
     32e:	5d 21       	and	r21, r13
     330:	21 15       	cp	r18, r1
     332:	31 05       	cpc	r19, r1
     334:	41 05       	cpc	r20, r1
     336:	51 05       	cpc	r21, r1
     338:	21 f0       	breq	.+8      	; 0x342 <_fpadd_parts+0x16e>
     33a:	21 e0       	ldi	r18, 0x01	; 1
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	59 01       	movw	r10, r18
     344:	6a 01       	movw	r12, r20
     346:	a6 28       	or	r10, r6
     348:	b7 28       	or	r11, r7
     34a:	c8 28       	or	r12, r8
     34c:	d9 28       	or	r13, r9
     34e:	0b c0       	rjmp	.+22     	; 0x366 <_fpadd_parts+0x192>
     350:	82 15       	cp	r24, r2
     352:	93 05       	cpc	r25, r3
     354:	2c f0       	brlt	.+10     	; 0x360 <_fpadd_parts+0x18c>
     356:	1c 01       	movw	r2, r24
     358:	aa 24       	eor	r10, r10
     35a:	bb 24       	eor	r11, r11
     35c:	65 01       	movw	r12, r10
     35e:	03 c0       	rjmp	.+6      	; 0x366 <_fpadd_parts+0x192>
     360:	ee 24       	eor	r14, r14
     362:	ff 24       	eor	r15, r15
     364:	87 01       	movw	r16, r14
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	9c 91       	ld	r25, X
     36a:	d2 01       	movw	r26, r4
     36c:	11 96       	adiw	r26, 0x01	; 1
     36e:	8c 91       	ld	r24, X
     370:	98 17       	cp	r25, r24
     372:	09 f4       	brne	.+2      	; 0x376 <_fpadd_parts+0x1a2>
     374:	45 c0       	rjmp	.+138    	; 0x400 <_fpadd_parts+0x22c>
     376:	99 23       	and	r25, r25
     378:	39 f0       	breq	.+14     	; 0x388 <_fpadd_parts+0x1b4>
     37a:	a8 01       	movw	r20, r16
     37c:	97 01       	movw	r18, r14
     37e:	2a 19       	sub	r18, r10
     380:	3b 09       	sbc	r19, r11
     382:	4c 09       	sbc	r20, r12
     384:	5d 09       	sbc	r21, r13
     386:	06 c0       	rjmp	.+12     	; 0x394 <_fpadd_parts+0x1c0>
     388:	a6 01       	movw	r20, r12
     38a:	95 01       	movw	r18, r10
     38c:	2e 19       	sub	r18, r14
     38e:	3f 09       	sbc	r19, r15
     390:	40 0b       	sbc	r20, r16
     392:	51 0b       	sbc	r21, r17
     394:	57 fd       	sbrc	r21, 7
     396:	08 c0       	rjmp	.+16     	; 0x3a8 <_fpadd_parts+0x1d4>
     398:	11 82       	std	Z+1, r1	; 0x01
     39a:	33 82       	std	Z+3, r3	; 0x03
     39c:	22 82       	std	Z+2, r2	; 0x02
     39e:	24 83       	std	Z+4, r18	; 0x04
     3a0:	35 83       	std	Z+5, r19	; 0x05
     3a2:	46 83       	std	Z+6, r20	; 0x06
     3a4:	57 83       	std	Z+7, r21	; 0x07
     3a6:	1d c0       	rjmp	.+58     	; 0x3e2 <_fpadd_parts+0x20e>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	81 83       	std	Z+1, r24	; 0x01
     3ac:	33 82       	std	Z+3, r3	; 0x03
     3ae:	22 82       	std	Z+2, r2	; 0x02
     3b0:	88 27       	eor	r24, r24
     3b2:	99 27       	eor	r25, r25
     3b4:	dc 01       	movw	r26, r24
     3b6:	82 1b       	sub	r24, r18
     3b8:	93 0b       	sbc	r25, r19
     3ba:	a4 0b       	sbc	r26, r20
     3bc:	b5 0b       	sbc	r27, r21
     3be:	84 83       	std	Z+4, r24	; 0x04
     3c0:	95 83       	std	Z+5, r25	; 0x05
     3c2:	a6 83       	std	Z+6, r26	; 0x06
     3c4:	b7 83       	std	Z+7, r27	; 0x07
     3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <_fpadd_parts+0x20e>
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	44 1f       	adc	r20, r20
     3ce:	55 1f       	adc	r21, r21
     3d0:	24 83       	std	Z+4, r18	; 0x04
     3d2:	35 83       	std	Z+5, r19	; 0x05
     3d4:	46 83       	std	Z+6, r20	; 0x06
     3d6:	57 83       	std	Z+7, r21	; 0x07
     3d8:	82 81       	ldd	r24, Z+2	; 0x02
     3da:	93 81       	ldd	r25, Z+3	; 0x03
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	93 83       	std	Z+3, r25	; 0x03
     3e0:	82 83       	std	Z+2, r24	; 0x02
     3e2:	24 81       	ldd	r18, Z+4	; 0x04
     3e4:	35 81       	ldd	r19, Z+5	; 0x05
     3e6:	46 81       	ldd	r20, Z+6	; 0x06
     3e8:	57 81       	ldd	r21, Z+7	; 0x07
     3ea:	da 01       	movw	r26, r20
     3ec:	c9 01       	movw	r24, r18
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	a1 09       	sbc	r26, r1
     3f2:	b1 09       	sbc	r27, r1
     3f4:	8f 5f       	subi	r24, 0xFF	; 255
     3f6:	9f 4f       	sbci	r25, 0xFF	; 255
     3f8:	af 4f       	sbci	r26, 0xFF	; 255
     3fa:	bf 43       	sbci	r27, 0x3F	; 63
     3fc:	28 f3       	brcs	.-54     	; 0x3c8 <_fpadd_parts+0x1f4>
     3fe:	0b c0       	rjmp	.+22     	; 0x416 <_fpadd_parts+0x242>
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	33 82       	std	Z+3, r3	; 0x03
     404:	22 82       	std	Z+2, r2	; 0x02
     406:	ea 0c       	add	r14, r10
     408:	fb 1c       	adc	r15, r11
     40a:	0c 1d       	adc	r16, r12
     40c:	1d 1d       	adc	r17, r13
     40e:	e4 82       	std	Z+4, r14	; 0x04
     410:	f5 82       	std	Z+5, r15	; 0x05
     412:	06 83       	std	Z+6, r16	; 0x06
     414:	17 83       	std	Z+7, r17	; 0x07
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	80 83       	st	Z, r24
     41a:	24 81       	ldd	r18, Z+4	; 0x04
     41c:	35 81       	ldd	r19, Z+5	; 0x05
     41e:	46 81       	ldd	r20, Z+6	; 0x06
     420:	57 81       	ldd	r21, Z+7	; 0x07
     422:	57 ff       	sbrs	r21, 7
     424:	1a c0       	rjmp	.+52     	; 0x45a <_fpadd_parts+0x286>
     426:	c9 01       	movw	r24, r18
     428:	aa 27       	eor	r26, r26
     42a:	97 fd       	sbrc	r25, 7
     42c:	a0 95       	com	r26
     42e:	ba 2f       	mov	r27, r26
     430:	81 70       	andi	r24, 0x01	; 1
     432:	90 70       	andi	r25, 0x00	; 0
     434:	a0 70       	andi	r26, 0x00	; 0
     436:	b0 70       	andi	r27, 0x00	; 0
     438:	56 95       	lsr	r21
     43a:	47 95       	ror	r20
     43c:	37 95       	ror	r19
     43e:	27 95       	ror	r18
     440:	82 2b       	or	r24, r18
     442:	93 2b       	or	r25, r19
     444:	a4 2b       	or	r26, r20
     446:	b5 2b       	or	r27, r21
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	95 83       	std	Z+5, r25	; 0x05
     44c:	a6 83       	std	Z+6, r26	; 0x06
     44e:	b7 83       	std	Z+7, r27	; 0x07
     450:	82 81       	ldd	r24, Z+2	; 0x02
     452:	93 81       	ldd	r25, Z+3	; 0x03
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	93 83       	std	Z+3, r25	; 0x03
     458:	82 83       	std	Z+2, r24	; 0x02
     45a:	df 01       	movw	r26, r30
     45c:	01 c0       	rjmp	.+2      	; 0x460 <_fpadd_parts+0x28c>
     45e:	d2 01       	movw	r26, r4
     460:	cd 01       	movw	r24, r26
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	e2 e1       	ldi	r30, 0x12	; 18
     468:	0c 94 ff 25 	jmp	0x4bfe	; 0x4bfe <__epilogue_restores__>

0000046c <__subsf3>:
     46c:	a0 e2       	ldi	r26, 0x20	; 32
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	ec e3       	ldi	r30, 0x3C	; 60
     472:	f2 e0       	ldi	r31, 0x02	; 2
     474:	0c 94 ef 25 	jmp	0x4bde	; 0x4bde <__prologue_saves__+0x18>
     478:	69 83       	std	Y+1, r22	; 0x01
     47a:	7a 83       	std	Y+2, r23	; 0x02
     47c:	8b 83       	std	Y+3, r24	; 0x03
     47e:	9c 83       	std	Y+4, r25	; 0x04
     480:	2d 83       	std	Y+5, r18	; 0x05
     482:	3e 83       	std	Y+6, r19	; 0x06
     484:	4f 83       	std	Y+7, r20	; 0x07
     486:	58 87       	std	Y+8, r21	; 0x08
     488:	e9 e0       	ldi	r30, 0x09	; 9
     48a:	ee 2e       	mov	r14, r30
     48c:	f1 2c       	mov	r15, r1
     48e:	ec 0e       	add	r14, r28
     490:	fd 1e       	adc	r15, r29
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	b7 01       	movw	r22, r14
     498:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     49c:	8e 01       	movw	r16, r28
     49e:	0f 5e       	subi	r16, 0xEF	; 239
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255
     4a2:	ce 01       	movw	r24, r28
     4a4:	05 96       	adiw	r24, 0x05	; 5
     4a6:	b8 01       	movw	r22, r16
     4a8:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     4ac:	8a 89       	ldd	r24, Y+18	; 0x12
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	89 27       	eor	r24, r25
     4b2:	8a 8b       	std	Y+18, r24	; 0x12
     4b4:	c7 01       	movw	r24, r14
     4b6:	b8 01       	movw	r22, r16
     4b8:	ae 01       	movw	r20, r28
     4ba:	47 5e       	subi	r20, 0xE7	; 231
     4bc:	5f 4f       	sbci	r21, 0xFF	; 255
     4be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_fpadd_parts>
     4c2:	0e 94 cb 05 	call	0xb96	; 0xb96 <__pack_f>
     4c6:	a0 96       	adiw	r28, 0x20	; 32
     4c8:	e6 e0       	ldi	r30, 0x06	; 6
     4ca:	0c 94 0b 26 	jmp	0x4c16	; 0x4c16 <__epilogue_restores__+0x18>

000004ce <__addsf3>:
     4ce:	a0 e2       	ldi	r26, 0x20	; 32
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	ed e6       	ldi	r30, 0x6D	; 109
     4d4:	f2 e0       	ldi	r31, 0x02	; 2
     4d6:	0c 94 ef 25 	jmp	0x4bde	; 0x4bde <__prologue_saves__+0x18>
     4da:	69 83       	std	Y+1, r22	; 0x01
     4dc:	7a 83       	std	Y+2, r23	; 0x02
     4de:	8b 83       	std	Y+3, r24	; 0x03
     4e0:	9c 83       	std	Y+4, r25	; 0x04
     4e2:	2d 83       	std	Y+5, r18	; 0x05
     4e4:	3e 83       	std	Y+6, r19	; 0x06
     4e6:	4f 83       	std	Y+7, r20	; 0x07
     4e8:	58 87       	std	Y+8, r21	; 0x08
     4ea:	f9 e0       	ldi	r31, 0x09	; 9
     4ec:	ef 2e       	mov	r14, r31
     4ee:	f1 2c       	mov	r15, r1
     4f0:	ec 0e       	add	r14, r28
     4f2:	fd 1e       	adc	r15, r29
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	b7 01       	movw	r22, r14
     4fa:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     4fe:	8e 01       	movw	r16, r28
     500:	0f 5e       	subi	r16, 0xEF	; 239
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	ce 01       	movw	r24, r28
     506:	05 96       	adiw	r24, 0x05	; 5
     508:	b8 01       	movw	r22, r16
     50a:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     50e:	c7 01       	movw	r24, r14
     510:	b8 01       	movw	r22, r16
     512:	ae 01       	movw	r20, r28
     514:	47 5e       	subi	r20, 0xE7	; 231
     516:	5f 4f       	sbci	r21, 0xFF	; 255
     518:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_fpadd_parts>
     51c:	0e 94 cb 05 	call	0xb96	; 0xb96 <__pack_f>
     520:	a0 96       	adiw	r28, 0x20	; 32
     522:	e6 e0       	ldi	r30, 0x06	; 6
     524:	0c 94 0b 26 	jmp	0x4c16	; 0x4c16 <__epilogue_restores__+0x18>

00000528 <__mulsf3>:
     528:	a0 e2       	ldi	r26, 0x20	; 32
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	ea e9       	ldi	r30, 0x9A	; 154
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	0c 94 e3 25 	jmp	0x4bc6	; 0x4bc6 <__prologue_saves__>
     534:	69 83       	std	Y+1, r22	; 0x01
     536:	7a 83       	std	Y+2, r23	; 0x02
     538:	8b 83       	std	Y+3, r24	; 0x03
     53a:	9c 83       	std	Y+4, r25	; 0x04
     53c:	2d 83       	std	Y+5, r18	; 0x05
     53e:	3e 83       	std	Y+6, r19	; 0x06
     540:	4f 83       	std	Y+7, r20	; 0x07
     542:	58 87       	std	Y+8, r21	; 0x08
     544:	ce 01       	movw	r24, r28
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	be 01       	movw	r22, r28
     54a:	67 5f       	subi	r22, 0xF7	; 247
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     552:	ce 01       	movw	r24, r28
     554:	05 96       	adiw	r24, 0x05	; 5
     556:	be 01       	movw	r22, r28
     558:	6f 5e       	subi	r22, 0xEF	; 239
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     560:	99 85       	ldd	r25, Y+9	; 0x09
     562:	92 30       	cpi	r25, 0x02	; 2
     564:	88 f0       	brcs	.+34     	; 0x588 <__mulsf3+0x60>
     566:	89 89       	ldd	r24, Y+17	; 0x11
     568:	82 30       	cpi	r24, 0x02	; 2
     56a:	c8 f0       	brcs	.+50     	; 0x59e <__mulsf3+0x76>
     56c:	94 30       	cpi	r25, 0x04	; 4
     56e:	19 f4       	brne	.+6      	; 0x576 <__mulsf3+0x4e>
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	51 f4       	brne	.+20     	; 0x588 <__mulsf3+0x60>
     574:	04 c0       	rjmp	.+8      	; 0x57e <__mulsf3+0x56>
     576:	84 30       	cpi	r24, 0x04	; 4
     578:	29 f4       	brne	.+10     	; 0x584 <__mulsf3+0x5c>
     57a:	92 30       	cpi	r25, 0x02	; 2
     57c:	81 f4       	brne	.+32     	; 0x59e <__mulsf3+0x76>
     57e:	8e e7       	ldi	r24, 0x7E	; 126
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	c6 c0       	rjmp	.+396    	; 0x710 <__mulsf3+0x1e8>
     584:	92 30       	cpi	r25, 0x02	; 2
     586:	49 f4       	brne	.+18     	; 0x59a <__mulsf3+0x72>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	9a 85       	ldd	r25, Y+10	; 0x0a
     58c:	8a 89       	ldd	r24, Y+18	; 0x12
     58e:	98 13       	cpse	r25, r24
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	2a 87       	std	Y+10, r18	; 0x0a
     594:	ce 01       	movw	r24, r28
     596:	09 96       	adiw	r24, 0x09	; 9
     598:	bb c0       	rjmp	.+374    	; 0x710 <__mulsf3+0x1e8>
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	49 f4       	brne	.+18     	; 0x5b0 <__mulsf3+0x88>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a2:	8a 89       	ldd	r24, Y+18	; 0x12
     5a4:	98 13       	cpse	r25, r24
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	2a 8b       	std	Y+18, r18	; 0x12
     5aa:	ce 01       	movw	r24, r28
     5ac:	41 96       	adiw	r24, 0x11	; 17
     5ae:	b0 c0       	rjmp	.+352    	; 0x710 <__mulsf3+0x1e8>
     5b0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5b2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5b4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5b6:	58 88       	ldd	r5, Y+16	; 0x10
     5b8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ba:	7e 88       	ldd	r7, Y+22	; 0x16
     5bc:	8f 88       	ldd	r8, Y+23	; 0x17
     5be:	98 8c       	ldd	r9, Y+24	; 0x18
     5c0:	ee 24       	eor	r14, r14
     5c2:	ff 24       	eor	r15, r15
     5c4:	87 01       	movw	r16, r14
     5c6:	aa 24       	eor	r10, r10
     5c8:	bb 24       	eor	r11, r11
     5ca:	65 01       	movw	r12, r10
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	e0 e0       	ldi	r30, 0x00	; 0
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	c1 01       	movw	r24, r2
     5da:	81 70       	andi	r24, 0x01	; 1
     5dc:	90 70       	andi	r25, 0x00	; 0
     5de:	89 2b       	or	r24, r25
     5e0:	e9 f0       	breq	.+58     	; 0x61c <__mulsf3+0xf4>
     5e2:	e6 0c       	add	r14, r6
     5e4:	f7 1c       	adc	r15, r7
     5e6:	08 1d       	adc	r16, r8
     5e8:	19 1d       	adc	r17, r9
     5ea:	9a 01       	movw	r18, r20
     5ec:	ab 01       	movw	r20, r22
     5ee:	2a 0d       	add	r18, r10
     5f0:	3b 1d       	adc	r19, r11
     5f2:	4c 1d       	adc	r20, r12
     5f4:	5d 1d       	adc	r21, r13
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e0       	ldi	r26, 0x00	; 0
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	e6 14       	cp	r14, r6
     600:	f7 04       	cpc	r15, r7
     602:	08 05       	cpc	r16, r8
     604:	19 05       	cpc	r17, r9
     606:	20 f4       	brcc	.+8      	; 0x610 <__mulsf3+0xe8>
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	a0 e0       	ldi	r26, 0x00	; 0
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	ba 01       	movw	r22, r20
     612:	a9 01       	movw	r20, r18
     614:	48 0f       	add	r20, r24
     616:	59 1f       	adc	r21, r25
     618:	6a 1f       	adc	r22, r26
     61a:	7b 1f       	adc	r23, r27
     61c:	aa 0c       	add	r10, r10
     61e:	bb 1c       	adc	r11, r11
     620:	cc 1c       	adc	r12, r12
     622:	dd 1c       	adc	r13, r13
     624:	97 fe       	sbrs	r9, 7
     626:	08 c0       	rjmp	.+16     	; 0x638 <__mulsf3+0x110>
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	a8 2a       	or	r10, r24
     632:	b9 2a       	or	r11, r25
     634:	ca 2a       	or	r12, r26
     636:	db 2a       	or	r13, r27
     638:	31 96       	adiw	r30, 0x01	; 1
     63a:	e0 32       	cpi	r30, 0x20	; 32
     63c:	f1 05       	cpc	r31, r1
     63e:	49 f0       	breq	.+18     	; 0x652 <__mulsf3+0x12a>
     640:	66 0c       	add	r6, r6
     642:	77 1c       	adc	r7, r7
     644:	88 1c       	adc	r8, r8
     646:	99 1c       	adc	r9, r9
     648:	56 94       	lsr	r5
     64a:	47 94       	ror	r4
     64c:	37 94       	ror	r3
     64e:	27 94       	ror	r2
     650:	c3 cf       	rjmp	.-122    	; 0x5d8 <__mulsf3+0xb0>
     652:	fa 85       	ldd	r31, Y+10	; 0x0a
     654:	ea 89       	ldd	r30, Y+18	; 0x12
     656:	2b 89       	ldd	r18, Y+19	; 0x13
     658:	3c 89       	ldd	r19, Y+20	; 0x14
     65a:	8b 85       	ldd	r24, Y+11	; 0x0b
     65c:	9c 85       	ldd	r25, Y+12	; 0x0c
     65e:	28 0f       	add	r18, r24
     660:	39 1f       	adc	r19, r25
     662:	2e 5f       	subi	r18, 0xFE	; 254
     664:	3f 4f       	sbci	r19, 0xFF	; 255
     666:	17 c0       	rjmp	.+46     	; 0x696 <__mulsf3+0x16e>
     668:	ca 01       	movw	r24, r20
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	90 70       	andi	r25, 0x00	; 0
     66e:	89 2b       	or	r24, r25
     670:	61 f0       	breq	.+24     	; 0x68a <__mulsf3+0x162>
     672:	16 95       	lsr	r17
     674:	07 95       	ror	r16
     676:	f7 94       	ror	r15
     678:	e7 94       	ror	r14
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	a0 e0       	ldi	r26, 0x00	; 0
     680:	b0 e8       	ldi	r27, 0x80	; 128
     682:	e8 2a       	or	r14, r24
     684:	f9 2a       	or	r15, r25
     686:	0a 2b       	or	r16, r26
     688:	1b 2b       	or	r17, r27
     68a:	76 95       	lsr	r23
     68c:	67 95       	ror	r22
     68e:	57 95       	ror	r21
     690:	47 95       	ror	r20
     692:	2f 5f       	subi	r18, 0xFF	; 255
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	77 fd       	sbrc	r23, 7
     698:	e7 cf       	rjmp	.-50     	; 0x668 <__mulsf3+0x140>
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <__mulsf3+0x18c>
     69c:	44 0f       	add	r20, r20
     69e:	55 1f       	adc	r21, r21
     6a0:	66 1f       	adc	r22, r22
     6a2:	77 1f       	adc	r23, r23
     6a4:	17 fd       	sbrc	r17, 7
     6a6:	41 60       	ori	r20, 0x01	; 1
     6a8:	ee 0c       	add	r14, r14
     6aa:	ff 1c       	adc	r15, r15
     6ac:	00 1f       	adc	r16, r16
     6ae:	11 1f       	adc	r17, r17
     6b0:	21 50       	subi	r18, 0x01	; 1
     6b2:	30 40       	sbci	r19, 0x00	; 0
     6b4:	40 30       	cpi	r20, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	59 07       	cpc	r21, r25
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	69 07       	cpc	r22, r25
     6be:	90 e4       	ldi	r25, 0x40	; 64
     6c0:	79 07       	cpc	r23, r25
     6c2:	60 f3       	brcs	.-40     	; 0x69c <__mulsf3+0x174>
     6c4:	2b 8f       	std	Y+27, r18	; 0x1b
     6c6:	3c 8f       	std	Y+28, r19	; 0x1c
     6c8:	db 01       	movw	r26, r22
     6ca:	ca 01       	movw	r24, r20
     6cc:	8f 77       	andi	r24, 0x7F	; 127
     6ce:	90 70       	andi	r25, 0x00	; 0
     6d0:	a0 70       	andi	r26, 0x00	; 0
     6d2:	b0 70       	andi	r27, 0x00	; 0
     6d4:	80 34       	cpi	r24, 0x40	; 64
     6d6:	91 05       	cpc	r25, r1
     6d8:	a1 05       	cpc	r26, r1
     6da:	b1 05       	cpc	r27, r1
     6dc:	61 f4       	brne	.+24     	; 0x6f6 <__mulsf3+0x1ce>
     6de:	47 fd       	sbrc	r20, 7
     6e0:	0a c0       	rjmp	.+20     	; 0x6f6 <__mulsf3+0x1ce>
     6e2:	e1 14       	cp	r14, r1
     6e4:	f1 04       	cpc	r15, r1
     6e6:	01 05       	cpc	r16, r1
     6e8:	11 05       	cpc	r17, r1
     6ea:	29 f0       	breq	.+10     	; 0x6f6 <__mulsf3+0x1ce>
     6ec:	40 5c       	subi	r20, 0xC0	; 192
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	6f 4f       	sbci	r22, 0xFF	; 255
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	40 78       	andi	r20, 0x80	; 128
     6f6:	1a 8e       	std	Y+26, r1	; 0x1a
     6f8:	fe 17       	cp	r31, r30
     6fa:	11 f0       	breq	.+4      	; 0x700 <__mulsf3+0x1d8>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	8a 8f       	std	Y+26, r24	; 0x1a
     700:	4d 8f       	std	Y+29, r20	; 0x1d
     702:	5e 8f       	std	Y+30, r21	; 0x1e
     704:	6f 8f       	std	Y+31, r22	; 0x1f
     706:	78 a3       	std	Y+32, r23	; 0x20
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	89 8f       	std	Y+25, r24	; 0x19
     70c:	ce 01       	movw	r24, r28
     70e:	49 96       	adiw	r24, 0x19	; 25
     710:	0e 94 cb 05 	call	0xb96	; 0xb96 <__pack_f>
     714:	a0 96       	adiw	r28, 0x20	; 32
     716:	e2 e1       	ldi	r30, 0x12	; 18
     718:	0c 94 ff 25 	jmp	0x4bfe	; 0x4bfe <__epilogue_restores__>

0000071c <__divsf3>:
     71c:	a8 e1       	ldi	r26, 0x18	; 24
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e4 e9       	ldi	r30, 0x94	; 148
     722:	f3 e0       	ldi	r31, 0x03	; 3
     724:	0c 94 eb 25 	jmp	0x4bd6	; 0x4bd6 <__prologue_saves__+0x10>
     728:	69 83       	std	Y+1, r22	; 0x01
     72a:	7a 83       	std	Y+2, r23	; 0x02
     72c:	8b 83       	std	Y+3, r24	; 0x03
     72e:	9c 83       	std	Y+4, r25	; 0x04
     730:	2d 83       	std	Y+5, r18	; 0x05
     732:	3e 83       	std	Y+6, r19	; 0x06
     734:	4f 83       	std	Y+7, r20	; 0x07
     736:	58 87       	std	Y+8, r21	; 0x08
     738:	b9 e0       	ldi	r27, 0x09	; 9
     73a:	eb 2e       	mov	r14, r27
     73c:	f1 2c       	mov	r15, r1
     73e:	ec 0e       	add	r14, r28
     740:	fd 1e       	adc	r15, r29
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	b7 01       	movw	r22, r14
     748:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     74c:	8e 01       	movw	r16, r28
     74e:	0f 5e       	subi	r16, 0xEF	; 239
     750:	1f 4f       	sbci	r17, 0xFF	; 255
     752:	ce 01       	movw	r24, r28
     754:	05 96       	adiw	r24, 0x05	; 5
     756:	b8 01       	movw	r22, r16
     758:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     75c:	29 85       	ldd	r18, Y+9	; 0x09
     75e:	22 30       	cpi	r18, 0x02	; 2
     760:	08 f4       	brcc	.+2      	; 0x764 <__divsf3+0x48>
     762:	7e c0       	rjmp	.+252    	; 0x860 <__stack+0x1>
     764:	39 89       	ldd	r19, Y+17	; 0x11
     766:	32 30       	cpi	r19, 0x02	; 2
     768:	10 f4       	brcc	.+4      	; 0x76e <__divsf3+0x52>
     76a:	b8 01       	movw	r22, r16
     76c:	7c c0       	rjmp	.+248    	; 0x866 <__stack+0x7>
     76e:	8a 85       	ldd	r24, Y+10	; 0x0a
     770:	9a 89       	ldd	r25, Y+18	; 0x12
     772:	89 27       	eor	r24, r25
     774:	8a 87       	std	Y+10, r24	; 0x0a
     776:	24 30       	cpi	r18, 0x04	; 4
     778:	11 f0       	breq	.+4      	; 0x77e <__divsf3+0x62>
     77a:	22 30       	cpi	r18, 0x02	; 2
     77c:	31 f4       	brne	.+12     	; 0x78a <__divsf3+0x6e>
     77e:	23 17       	cp	r18, r19
     780:	09 f0       	breq	.+2      	; 0x784 <__divsf3+0x68>
     782:	6e c0       	rjmp	.+220    	; 0x860 <__stack+0x1>
     784:	6e e7       	ldi	r22, 0x7E	; 126
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	6e c0       	rjmp	.+220    	; 0x866 <__stack+0x7>
     78a:	34 30       	cpi	r19, 0x04	; 4
     78c:	39 f4       	brne	.+14     	; 0x79c <__divsf3+0x80>
     78e:	1d 86       	std	Y+13, r1	; 0x0d
     790:	1e 86       	std	Y+14, r1	; 0x0e
     792:	1f 86       	std	Y+15, r1	; 0x0f
     794:	18 8a       	std	Y+16, r1	; 0x10
     796:	1c 86       	std	Y+12, r1	; 0x0c
     798:	1b 86       	std	Y+11, r1	; 0x0b
     79a:	04 c0       	rjmp	.+8      	; 0x7a4 <__divsf3+0x88>
     79c:	32 30       	cpi	r19, 0x02	; 2
     79e:	21 f4       	brne	.+8      	; 0x7a8 <__divsf3+0x8c>
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	89 87       	std	Y+9, r24	; 0x09
     7a4:	b7 01       	movw	r22, r14
     7a6:	5f c0       	rjmp	.+190    	; 0x866 <__stack+0x7>
     7a8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7aa:	3c 85       	ldd	r19, Y+12	; 0x0c
     7ac:	8b 89       	ldd	r24, Y+19	; 0x13
     7ae:	9c 89       	ldd	r25, Y+20	; 0x14
     7b0:	28 1b       	sub	r18, r24
     7b2:	39 0b       	sbc	r19, r25
     7b4:	3c 87       	std	Y+12, r19	; 0x0c
     7b6:	2b 87       	std	Y+11, r18	; 0x0b
     7b8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ba:	fe 84       	ldd	r15, Y+14	; 0x0e
     7bc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7be:	18 89       	ldd	r17, Y+16	; 0x10
     7c0:	ad 88       	ldd	r10, Y+21	; 0x15
     7c2:	be 88       	ldd	r11, Y+22	; 0x16
     7c4:	cf 88       	ldd	r12, Y+23	; 0x17
     7c6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7c8:	ea 14       	cp	r14, r10
     7ca:	fb 04       	cpc	r15, r11
     7cc:	0c 05       	cpc	r16, r12
     7ce:	1d 05       	cpc	r17, r13
     7d0:	40 f4       	brcc	.+16     	; 0x7e2 <__divsf3+0xc6>
     7d2:	ee 0c       	add	r14, r14
     7d4:	ff 1c       	adc	r15, r15
     7d6:	00 1f       	adc	r16, r16
     7d8:	11 1f       	adc	r17, r17
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	30 40       	sbci	r19, 0x00	; 0
     7de:	3c 87       	std	Y+12, r19	; 0x0c
     7e0:	2b 87       	std	Y+11, r18	; 0x0b
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	a0 e0       	ldi	r26, 0x00	; 0
     7f0:	b0 e4       	ldi	r27, 0x40	; 64
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	ea 14       	cp	r14, r10
     7f8:	fb 04       	cpc	r15, r11
     7fa:	0c 05       	cpc	r16, r12
     7fc:	1d 05       	cpc	r17, r13
     7fe:	40 f0       	brcs	.+16     	; 0x810 <__divsf3+0xf4>
     800:	28 2b       	or	r18, r24
     802:	39 2b       	or	r19, r25
     804:	4a 2b       	or	r20, r26
     806:	5b 2b       	or	r21, r27
     808:	ea 18       	sub	r14, r10
     80a:	fb 08       	sbc	r15, r11
     80c:	0c 09       	sbc	r16, r12
     80e:	1d 09       	sbc	r17, r13
     810:	b6 95       	lsr	r27
     812:	a7 95       	ror	r26
     814:	97 95       	ror	r25
     816:	87 95       	ror	r24
     818:	ee 0c       	add	r14, r14
     81a:	ff 1c       	adc	r15, r15
     81c:	00 1f       	adc	r16, r16
     81e:	11 1f       	adc	r17, r17
     820:	6f 5f       	subi	r22, 0xFF	; 255
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	6f 31       	cpi	r22, 0x1F	; 31
     826:	71 05       	cpc	r23, r1
     828:	31 f7       	brne	.-52     	; 0x7f6 <__divsf3+0xda>
     82a:	da 01       	movw	r26, r20
     82c:	c9 01       	movw	r24, r18
     82e:	8f 77       	andi	r24, 0x7F	; 127
     830:	90 70       	andi	r25, 0x00	; 0
     832:	a0 70       	andi	r26, 0x00	; 0
     834:	b0 70       	andi	r27, 0x00	; 0
     836:	80 34       	cpi	r24, 0x40	; 64
     838:	91 05       	cpc	r25, r1
     83a:	a1 05       	cpc	r26, r1
     83c:	b1 05       	cpc	r27, r1
     83e:	61 f4       	brne	.+24     	; 0x858 <__divsf3+0x13c>
     840:	27 fd       	sbrc	r18, 7
     842:	0a c0       	rjmp	.+20     	; 0x858 <__divsf3+0x13c>
     844:	e1 14       	cp	r14, r1
     846:	f1 04       	cpc	r15, r1
     848:	01 05       	cpc	r16, r1
     84a:	11 05       	cpc	r17, r1
     84c:	29 f0       	breq	.+10     	; 0x858 <__divsf3+0x13c>
     84e:	20 5c       	subi	r18, 0xC0	; 192
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	4f 4f       	sbci	r20, 0xFF	; 255
     854:	5f 4f       	sbci	r21, 0xFF	; 255
     856:	20 78       	andi	r18, 0x80	; 128
     858:	2d 87       	std	Y+13, r18	; 0x0d
     85a:	3e 87       	std	Y+14, r19	; 0x0e
     85c:	4f 87       	std	Y+15, r20	; 0x0f
     85e:	58 8b       	std	Y+16, r21	; 0x10
     860:	be 01       	movw	r22, r28
     862:	67 5f       	subi	r22, 0xF7	; 247
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	cb 01       	movw	r24, r22
     868:	0e 94 cb 05 	call	0xb96	; 0xb96 <__pack_f>
     86c:	68 96       	adiw	r28, 0x18	; 24
     86e:	ea e0       	ldi	r30, 0x0A	; 10
     870:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__epilogue_restores__+0x10>

00000874 <__gtsf2>:
     874:	a8 e1       	ldi	r26, 0x18	; 24
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e0 e4       	ldi	r30, 0x40	; 64
     87a:	f4 e0       	ldi	r31, 0x04	; 4
     87c:	0c 94 ef 25 	jmp	0x4bde	; 0x4bde <__prologue_saves__+0x18>
     880:	69 83       	std	Y+1, r22	; 0x01
     882:	7a 83       	std	Y+2, r23	; 0x02
     884:	8b 83       	std	Y+3, r24	; 0x03
     886:	9c 83       	std	Y+4, r25	; 0x04
     888:	2d 83       	std	Y+5, r18	; 0x05
     88a:	3e 83       	std	Y+6, r19	; 0x06
     88c:	4f 83       	std	Y+7, r20	; 0x07
     88e:	58 87       	std	Y+8, r21	; 0x08
     890:	89 e0       	ldi	r24, 0x09	; 9
     892:	e8 2e       	mov	r14, r24
     894:	f1 2c       	mov	r15, r1
     896:	ec 0e       	add	r14, r28
     898:	fd 1e       	adc	r15, r29
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	b7 01       	movw	r22, r14
     8a0:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     8a4:	8e 01       	movw	r16, r28
     8a6:	0f 5e       	subi	r16, 0xEF	; 239
     8a8:	1f 4f       	sbci	r17, 0xFF	; 255
     8aa:	ce 01       	movw	r24, r28
     8ac:	05 96       	adiw	r24, 0x05	; 5
     8ae:	b8 01       	movw	r22, r16
     8b0:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     8b4:	89 85       	ldd	r24, Y+9	; 0x09
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	40 f0       	brcs	.+16     	; 0x8ca <__gtsf2+0x56>
     8ba:	89 89       	ldd	r24, Y+17	; 0x11
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	28 f0       	brcs	.+10     	; 0x8ca <__gtsf2+0x56>
     8c0:	c7 01       	movw	r24, r14
     8c2:	b8 01       	movw	r22, r16
     8c4:	0e 94 18 07 	call	0xe30	; 0xe30 <__fpcmp_parts_f>
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <__gtsf2+0x58>
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	68 96       	adiw	r28, 0x18	; 24
     8ce:	e6 e0       	ldi	r30, 0x06	; 6
     8d0:	0c 94 0b 26 	jmp	0x4c16	; 0x4c16 <__epilogue_restores__+0x18>

000008d4 <__gesf2>:
     8d4:	a8 e1       	ldi	r26, 0x18	; 24
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e0 e7       	ldi	r30, 0x70	; 112
     8da:	f4 e0       	ldi	r31, 0x04	; 4
     8dc:	0c 94 ef 25 	jmp	0x4bde	; 0x4bde <__prologue_saves__+0x18>
     8e0:	69 83       	std	Y+1, r22	; 0x01
     8e2:	7a 83       	std	Y+2, r23	; 0x02
     8e4:	8b 83       	std	Y+3, r24	; 0x03
     8e6:	9c 83       	std	Y+4, r25	; 0x04
     8e8:	2d 83       	std	Y+5, r18	; 0x05
     8ea:	3e 83       	std	Y+6, r19	; 0x06
     8ec:	4f 83       	std	Y+7, r20	; 0x07
     8ee:	58 87       	std	Y+8, r21	; 0x08
     8f0:	89 e0       	ldi	r24, 0x09	; 9
     8f2:	e8 2e       	mov	r14, r24
     8f4:	f1 2c       	mov	r15, r1
     8f6:	ec 0e       	add	r14, r28
     8f8:	fd 1e       	adc	r15, r29
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	b7 01       	movw	r22, r14
     900:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     904:	8e 01       	movw	r16, r28
     906:	0f 5e       	subi	r16, 0xEF	; 239
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	ce 01       	movw	r24, r28
     90c:	05 96       	adiw	r24, 0x05	; 5
     90e:	b8 01       	movw	r22, r16
     910:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     914:	89 85       	ldd	r24, Y+9	; 0x09
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	40 f0       	brcs	.+16     	; 0x92a <__gesf2+0x56>
     91a:	89 89       	ldd	r24, Y+17	; 0x11
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	28 f0       	brcs	.+10     	; 0x92a <__gesf2+0x56>
     920:	c7 01       	movw	r24, r14
     922:	b8 01       	movw	r22, r16
     924:	0e 94 18 07 	call	0xe30	; 0xe30 <__fpcmp_parts_f>
     928:	01 c0       	rjmp	.+2      	; 0x92c <__gesf2+0x58>
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	68 96       	adiw	r28, 0x18	; 24
     92e:	e6 e0       	ldi	r30, 0x06	; 6
     930:	0c 94 0b 26 	jmp	0x4c16	; 0x4c16 <__epilogue_restores__+0x18>

00000934 <__ltsf2>:
     934:	a8 e1       	ldi	r26, 0x18	; 24
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e0 ea       	ldi	r30, 0xA0	; 160
     93a:	f4 e0       	ldi	r31, 0x04	; 4
     93c:	0c 94 ef 25 	jmp	0x4bde	; 0x4bde <__prologue_saves__+0x18>
     940:	69 83       	std	Y+1, r22	; 0x01
     942:	7a 83       	std	Y+2, r23	; 0x02
     944:	8b 83       	std	Y+3, r24	; 0x03
     946:	9c 83       	std	Y+4, r25	; 0x04
     948:	2d 83       	std	Y+5, r18	; 0x05
     94a:	3e 83       	std	Y+6, r19	; 0x06
     94c:	4f 83       	std	Y+7, r20	; 0x07
     94e:	58 87       	std	Y+8, r21	; 0x08
     950:	89 e0       	ldi	r24, 0x09	; 9
     952:	e8 2e       	mov	r14, r24
     954:	f1 2c       	mov	r15, r1
     956:	ec 0e       	add	r14, r28
     958:	fd 1e       	adc	r15, r29
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	b7 01       	movw	r22, r14
     960:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     964:	8e 01       	movw	r16, r28
     966:	0f 5e       	subi	r16, 0xEF	; 239
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	ce 01       	movw	r24, r28
     96c:	05 96       	adiw	r24, 0x05	; 5
     96e:	b8 01       	movw	r22, r16
     970:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     974:	89 85       	ldd	r24, Y+9	; 0x09
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	40 f0       	brcs	.+16     	; 0x98a <__ltsf2+0x56>
     97a:	89 89       	ldd	r24, Y+17	; 0x11
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	28 f0       	brcs	.+10     	; 0x98a <__ltsf2+0x56>
     980:	c7 01       	movw	r24, r14
     982:	b8 01       	movw	r22, r16
     984:	0e 94 18 07 	call	0xe30	; 0xe30 <__fpcmp_parts_f>
     988:	01 c0       	rjmp	.+2      	; 0x98c <__ltsf2+0x58>
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	68 96       	adiw	r28, 0x18	; 24
     98e:	e6 e0       	ldi	r30, 0x06	; 6
     990:	0c 94 0b 26 	jmp	0x4c16	; 0x4c16 <__epilogue_restores__+0x18>

00000994 <__floatsisf>:
     994:	a8 e0       	ldi	r26, 0x08	; 8
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	e0 ed       	ldi	r30, 0xD0	; 208
     99a:	f4 e0       	ldi	r31, 0x04	; 4
     99c:	0c 94 ec 25 	jmp	0x4bd8	; 0x4bd8 <__prologue_saves__+0x12>
     9a0:	9b 01       	movw	r18, r22
     9a2:	ac 01       	movw	r20, r24
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	89 83       	std	Y+1, r24	; 0x01
     9a8:	da 01       	movw	r26, r20
     9aa:	c9 01       	movw	r24, r18
     9ac:	88 27       	eor	r24, r24
     9ae:	b7 fd       	sbrc	r27, 7
     9b0:	83 95       	inc	r24
     9b2:	99 27       	eor	r25, r25
     9b4:	aa 27       	eor	r26, r26
     9b6:	bb 27       	eor	r27, r27
     9b8:	b8 2e       	mov	r11, r24
     9ba:	21 15       	cp	r18, r1
     9bc:	31 05       	cpc	r19, r1
     9be:	41 05       	cpc	r20, r1
     9c0:	51 05       	cpc	r21, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__floatsisf+0x36>
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	89 83       	std	Y+1, r24	; 0x01
     9c8:	3a c0       	rjmp	.+116    	; 0xa3e <__floatsisf+0xaa>
     9ca:	88 23       	and	r24, r24
     9cc:	a9 f0       	breq	.+42     	; 0x9f8 <__floatsisf+0x64>
     9ce:	20 30       	cpi	r18, 0x00	; 0
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	38 07       	cpc	r19, r24
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	48 07       	cpc	r20, r24
     9d8:	80 e8       	ldi	r24, 0x80	; 128
     9da:	58 07       	cpc	r21, r24
     9dc:	29 f4       	brne	.+10     	; 0x9e8 <__floatsisf+0x54>
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	9f ec       	ldi	r25, 0xCF	; 207
     9e6:	30 c0       	rjmp	.+96     	; 0xa48 <__floatsisf+0xb4>
     9e8:	ee 24       	eor	r14, r14
     9ea:	ff 24       	eor	r15, r15
     9ec:	87 01       	movw	r16, r14
     9ee:	e2 1a       	sub	r14, r18
     9f0:	f3 0a       	sbc	r15, r19
     9f2:	04 0b       	sbc	r16, r20
     9f4:	15 0b       	sbc	r17, r21
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <__floatsisf+0x68>
     9f8:	79 01       	movw	r14, r18
     9fa:	8a 01       	movw	r16, r20
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	c8 2e       	mov	r12, r24
     a00:	d1 2c       	mov	r13, r1
     a02:	dc 82       	std	Y+4, r13	; 0x04
     a04:	cb 82       	std	Y+3, r12	; 0x03
     a06:	ed 82       	std	Y+5, r14	; 0x05
     a08:	fe 82       	std	Y+6, r15	; 0x06
     a0a:	0f 83       	std	Y+7, r16	; 0x07
     a0c:	18 87       	std	Y+8, r17	; 0x08
     a0e:	c8 01       	movw	r24, r16
     a10:	b7 01       	movw	r22, r14
     a12:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__clzsi2>
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	18 16       	cp	r1, r24
     a1a:	19 06       	cpc	r1, r25
     a1c:	84 f4       	brge	.+32     	; 0xa3e <__floatsisf+0xaa>
     a1e:	08 2e       	mov	r0, r24
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__floatsisf+0x96>
     a22:	ee 0c       	add	r14, r14
     a24:	ff 1c       	adc	r15, r15
     a26:	00 1f       	adc	r16, r16
     a28:	11 1f       	adc	r17, r17
     a2a:	0a 94       	dec	r0
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__floatsisf+0x8e>
     a2e:	ed 82       	std	Y+5, r14	; 0x05
     a30:	fe 82       	std	Y+6, r15	; 0x06
     a32:	0f 83       	std	Y+7, r16	; 0x07
     a34:	18 87       	std	Y+8, r17	; 0x08
     a36:	c8 1a       	sub	r12, r24
     a38:	d9 0a       	sbc	r13, r25
     a3a:	dc 82       	std	Y+4, r13	; 0x04
     a3c:	cb 82       	std	Y+3, r12	; 0x03
     a3e:	ba 82       	std	Y+2, r11	; 0x02
     a40:	ce 01       	movw	r24, r28
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	0e 94 cb 05 	call	0xb96	; 0xb96 <__pack_f>
     a48:	28 96       	adiw	r28, 0x08	; 8
     a4a:	e9 e0       	ldi	r30, 0x09	; 9
     a4c:	0c 94 08 26 	jmp	0x4c10	; 0x4c10 <__epilogue_restores__+0x12>

00000a50 <__fixsfsi>:
     a50:	ac e0       	ldi	r26, 0x0C	; 12
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	ee e2       	ldi	r30, 0x2E	; 46
     a56:	f5 e0       	ldi	r31, 0x05	; 5
     a58:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__prologue_saves__+0x20>
     a5c:	69 83       	std	Y+1, r22	; 0x01
     a5e:	7a 83       	std	Y+2, r23	; 0x02
     a60:	8b 83       	std	Y+3, r24	; 0x03
     a62:	9c 83       	std	Y+4, r25	; 0x04
     a64:	ce 01       	movw	r24, r28
     a66:	01 96       	adiw	r24, 0x01	; 1
     a68:	be 01       	movw	r22, r28
     a6a:	6b 5f       	subi	r22, 0xFB	; 251
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	0e 94 a0 06 	call	0xd40	; 0xd40 <__unpack_f>
     a72:	8d 81       	ldd	r24, Y+5	; 0x05
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	61 f1       	breq	.+88     	; 0xad0 <__fixsfsi+0x80>
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	50 f1       	brcs	.+84     	; 0xad0 <__fixsfsi+0x80>
     a7c:	84 30       	cpi	r24, 0x04	; 4
     a7e:	21 f4       	brne	.+8      	; 0xa88 <__fixsfsi+0x38>
     a80:	8e 81       	ldd	r24, Y+6	; 0x06
     a82:	88 23       	and	r24, r24
     a84:	51 f1       	breq	.+84     	; 0xada <__fixsfsi+0x8a>
     a86:	2e c0       	rjmp	.+92     	; 0xae4 <__fixsfsi+0x94>
     a88:	2f 81       	ldd	r18, Y+7	; 0x07
     a8a:	38 85       	ldd	r19, Y+8	; 0x08
     a8c:	37 fd       	sbrc	r19, 7
     a8e:	20 c0       	rjmp	.+64     	; 0xad0 <__fixsfsi+0x80>
     a90:	6e 81       	ldd	r22, Y+6	; 0x06
     a92:	2f 31       	cpi	r18, 0x1F	; 31
     a94:	31 05       	cpc	r19, r1
     a96:	1c f0       	brlt	.+6      	; 0xa9e <__fixsfsi+0x4e>
     a98:	66 23       	and	r22, r22
     a9a:	f9 f0       	breq	.+62     	; 0xada <__fixsfsi+0x8a>
     a9c:	23 c0       	rjmp	.+70     	; 0xae4 <__fixsfsi+0x94>
     a9e:	8e e1       	ldi	r24, 0x1E	; 30
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	82 1b       	sub	r24, r18
     aa4:	93 0b       	sbc	r25, r19
     aa6:	29 85       	ldd	r18, Y+9	; 0x09
     aa8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aaa:	4b 85       	ldd	r20, Y+11	; 0x0b
     aac:	5c 85       	ldd	r21, Y+12	; 0x0c
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <__fixsfsi+0x68>
     ab0:	56 95       	lsr	r21
     ab2:	47 95       	ror	r20
     ab4:	37 95       	ror	r19
     ab6:	27 95       	ror	r18
     ab8:	8a 95       	dec	r24
     aba:	d2 f7       	brpl	.-12     	; 0xab0 <__fixsfsi+0x60>
     abc:	66 23       	and	r22, r22
     abe:	b1 f0       	breq	.+44     	; 0xaec <__fixsfsi+0x9c>
     ac0:	50 95       	com	r21
     ac2:	40 95       	com	r20
     ac4:	30 95       	com	r19
     ac6:	21 95       	neg	r18
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	4f 4f       	sbci	r20, 0xFF	; 255
     acc:	5f 4f       	sbci	r21, 0xFF	; 255
     ace:	0e c0       	rjmp	.+28     	; 0xaec <__fixsfsi+0x9c>
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	09 c0       	rjmp	.+18     	; 0xaec <__fixsfsi+0x9c>
     ada:	2f ef       	ldi	r18, 0xFF	; 255
     adc:	3f ef       	ldi	r19, 0xFF	; 255
     ade:	4f ef       	ldi	r20, 0xFF	; 255
     ae0:	5f e7       	ldi	r21, 0x7F	; 127
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__fixsfsi+0x9c>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e8       	ldi	r21, 0x80	; 128
     aec:	b9 01       	movw	r22, r18
     aee:	ca 01       	movw	r24, r20
     af0:	2c 96       	adiw	r28, 0x0c	; 12
     af2:	e2 e0       	ldi	r30, 0x02	; 2
     af4:	0c 94 0f 26 	jmp	0x4c1e	; 0x4c1e <__epilogue_restores__+0x20>

00000af8 <__clzsi2>:
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	7b 01       	movw	r14, r22
     b02:	8c 01       	movw	r16, r24
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	e8 16       	cp	r14, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	f8 06       	cpc	r15, r24
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	08 07       	cpc	r16, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	18 07       	cpc	r17, r24
     b14:	88 f4       	brcc	.+34     	; 0xb38 <__clzsi2+0x40>
     b16:	8f ef       	ldi	r24, 0xFF	; 255
     b18:	e8 16       	cp	r14, r24
     b1a:	f1 04       	cpc	r15, r1
     b1c:	01 05       	cpc	r16, r1
     b1e:	11 05       	cpc	r17, r1
     b20:	31 f0       	breq	.+12     	; 0xb2e <__clzsi2+0x36>
     b22:	28 f0       	brcs	.+10     	; 0xb2e <__clzsi2+0x36>
     b24:	88 e0       	ldi	r24, 0x08	; 8
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	17 c0       	rjmp	.+46     	; 0xb5c <__clzsi2+0x64>
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	12 c0       	rjmp	.+36     	; 0xb5c <__clzsi2+0x64>
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	e8 16       	cp	r14, r24
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	f8 06       	cpc	r15, r24
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	08 07       	cpc	r16, r24
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	18 07       	cpc	r17, r24
     b48:	28 f0       	brcs	.+10     	; 0xb54 <__clzsi2+0x5c>
     b4a:	88 e1       	ldi	r24, 0x18	; 24
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	a0 e0       	ldi	r26, 0x00	; 0
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <__clzsi2+0x64>
     b54:	80 e1       	ldi	r24, 0x10	; 16
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	20 e2       	ldi	r18, 0x20	; 32
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	28 1b       	sub	r18, r24
     b66:	39 0b       	sbc	r19, r25
     b68:	4a 0b       	sbc	r20, r26
     b6a:	5b 0b       	sbc	r21, r27
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <__clzsi2+0x7e>
     b6e:	16 95       	lsr	r17
     b70:	07 95       	ror	r16
     b72:	f7 94       	ror	r15
     b74:	e7 94       	ror	r14
     b76:	8a 95       	dec	r24
     b78:	d2 f7       	brpl	.-12     	; 0xb6e <__clzsi2+0x76>
     b7a:	f7 01       	movw	r30, r14
     b7c:	ea 57       	subi	r30, 0x7A	; 122
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	80 81       	ld	r24, Z
     b82:	28 1b       	sub	r18, r24
     b84:	31 09       	sbc	r19, r1
     b86:	41 09       	sbc	r20, r1
     b88:	51 09       	sbc	r21, r1
     b8a:	c9 01       	movw	r24, r18
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	08 95       	ret

00000b96 <__pack_f>:
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	fc 01       	movw	r30, r24
     ba2:	e4 80       	ldd	r14, Z+4	; 0x04
     ba4:	f5 80       	ldd	r15, Z+5	; 0x05
     ba6:	06 81       	ldd	r16, Z+6	; 0x06
     ba8:	17 81       	ldd	r17, Z+7	; 0x07
     baa:	d1 80       	ldd	r13, Z+1	; 0x01
     bac:	80 81       	ld	r24, Z
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	48 f4       	brcc	.+18     	; 0xbc4 <__pack_f+0x2e>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e1       	ldi	r26, 0x10	; 16
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e8 2a       	or	r14, r24
     bbc:	f9 2a       	or	r15, r25
     bbe:	0a 2b       	or	r16, r26
     bc0:	1b 2b       	or	r17, r27
     bc2:	a5 c0       	rjmp	.+330    	; 0xd0e <__pack_f+0x178>
     bc4:	84 30       	cpi	r24, 0x04	; 4
     bc6:	09 f4       	brne	.+2      	; 0xbca <__pack_f+0x34>
     bc8:	9f c0       	rjmp	.+318    	; 0xd08 <__pack_f+0x172>
     bca:	82 30       	cpi	r24, 0x02	; 2
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__pack_f+0x40>
     bce:	ee 24       	eor	r14, r14
     bd0:	ff 24       	eor	r15, r15
     bd2:	87 01       	movw	r16, r14
     bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <__pack_f+0x4a>
     bd6:	e1 14       	cp	r14, r1
     bd8:	f1 04       	cpc	r15, r1
     bda:	01 05       	cpc	r16, r1
     bdc:	11 05       	cpc	r17, r1
     bde:	19 f4       	brne	.+6      	; 0xbe6 <__pack_f+0x50>
     be0:	e0 e0       	ldi	r30, 0x00	; 0
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	96 c0       	rjmp	.+300    	; 0xd12 <__pack_f+0x17c>
     be6:	62 81       	ldd	r22, Z+2	; 0x02
     be8:	73 81       	ldd	r23, Z+3	; 0x03
     bea:	9f ef       	ldi	r25, 0xFF	; 255
     bec:	62 38       	cpi	r22, 0x82	; 130
     bee:	79 07       	cpc	r23, r25
     bf0:	0c f0       	brlt	.+2      	; 0xbf4 <__pack_f+0x5e>
     bf2:	5b c0       	rjmp	.+182    	; 0xcaa <__pack_f+0x114>
     bf4:	22 e8       	ldi	r18, 0x82	; 130
     bf6:	3f ef       	ldi	r19, 0xFF	; 255
     bf8:	26 1b       	sub	r18, r22
     bfa:	37 0b       	sbc	r19, r23
     bfc:	2a 31       	cpi	r18, 0x1A	; 26
     bfe:	31 05       	cpc	r19, r1
     c00:	2c f0       	brlt	.+10     	; 0xc0c <__pack_f+0x76>
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	2a c0       	rjmp	.+84     	; 0xc60 <__pack_f+0xca>
     c0c:	b8 01       	movw	r22, r16
     c0e:	a7 01       	movw	r20, r14
     c10:	02 2e       	mov	r0, r18
     c12:	04 c0       	rjmp	.+8      	; 0xc1c <__pack_f+0x86>
     c14:	76 95       	lsr	r23
     c16:	67 95       	ror	r22
     c18:	57 95       	ror	r21
     c1a:	47 95       	ror	r20
     c1c:	0a 94       	dec	r0
     c1e:	d2 f7       	brpl	.-12     	; 0xc14 <__pack_f+0x7e>
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	a0 e0       	ldi	r26, 0x00	; 0
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <__pack_f+0x9c>
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	aa 1f       	adc	r26, r26
     c30:	bb 1f       	adc	r27, r27
     c32:	2a 95       	dec	r18
     c34:	d2 f7       	brpl	.-12     	; 0xc2a <__pack_f+0x94>
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	a1 09       	sbc	r26, r1
     c3a:	b1 09       	sbc	r27, r1
     c3c:	8e 21       	and	r24, r14
     c3e:	9f 21       	and	r25, r15
     c40:	a0 23       	and	r26, r16
     c42:	b1 23       	and	r27, r17
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	a1 05       	cpc	r26, r1
     c48:	b1 05       	cpc	r27, r1
     c4a:	21 f0       	breq	.+8      	; 0xc54 <__pack_f+0xbe>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	9a 01       	movw	r18, r20
     c56:	ab 01       	movw	r20, r22
     c58:	28 2b       	or	r18, r24
     c5a:	39 2b       	or	r19, r25
     c5c:	4a 2b       	or	r20, r26
     c5e:	5b 2b       	or	r21, r27
     c60:	da 01       	movw	r26, r20
     c62:	c9 01       	movw	r24, r18
     c64:	8f 77       	andi	r24, 0x7F	; 127
     c66:	90 70       	andi	r25, 0x00	; 0
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	80 34       	cpi	r24, 0x40	; 64
     c6e:	91 05       	cpc	r25, r1
     c70:	a1 05       	cpc	r26, r1
     c72:	b1 05       	cpc	r27, r1
     c74:	39 f4       	brne	.+14     	; 0xc84 <__pack_f+0xee>
     c76:	27 ff       	sbrs	r18, 7
     c78:	09 c0       	rjmp	.+18     	; 0xc8c <__pack_f+0xf6>
     c7a:	20 5c       	subi	r18, 0xC0	; 192
     c7c:	3f 4f       	sbci	r19, 0xFF	; 255
     c7e:	4f 4f       	sbci	r20, 0xFF	; 255
     c80:	5f 4f       	sbci	r21, 0xFF	; 255
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <__pack_f+0xf6>
     c84:	21 5c       	subi	r18, 0xC1	; 193
     c86:	3f 4f       	sbci	r19, 0xFF	; 255
     c88:	4f 4f       	sbci	r20, 0xFF	; 255
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	e0 e0       	ldi	r30, 0x00	; 0
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	20 30       	cpi	r18, 0x00	; 0
     c92:	a0 e0       	ldi	r26, 0x00	; 0
     c94:	3a 07       	cpc	r19, r26
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	4a 07       	cpc	r20, r26
     c9a:	a0 e4       	ldi	r26, 0x40	; 64
     c9c:	5a 07       	cpc	r21, r26
     c9e:	10 f0       	brcs	.+4      	; 0xca4 <__pack_f+0x10e>
     ca0:	e1 e0       	ldi	r30, 0x01	; 1
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	79 01       	movw	r14, r18
     ca6:	8a 01       	movw	r16, r20
     ca8:	27 c0       	rjmp	.+78     	; 0xcf8 <__pack_f+0x162>
     caa:	60 38       	cpi	r22, 0x80	; 128
     cac:	71 05       	cpc	r23, r1
     cae:	64 f5       	brge	.+88     	; 0xd08 <__pack_f+0x172>
     cb0:	fb 01       	movw	r30, r22
     cb2:	e1 58       	subi	r30, 0x81	; 129
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	d8 01       	movw	r26, r16
     cb8:	c7 01       	movw	r24, r14
     cba:	8f 77       	andi	r24, 0x7F	; 127
     cbc:	90 70       	andi	r25, 0x00	; 0
     cbe:	a0 70       	andi	r26, 0x00	; 0
     cc0:	b0 70       	andi	r27, 0x00	; 0
     cc2:	80 34       	cpi	r24, 0x40	; 64
     cc4:	91 05       	cpc	r25, r1
     cc6:	a1 05       	cpc	r26, r1
     cc8:	b1 05       	cpc	r27, r1
     cca:	39 f4       	brne	.+14     	; 0xcda <__pack_f+0x144>
     ccc:	e7 fe       	sbrs	r14, 7
     cce:	0d c0       	rjmp	.+26     	; 0xcea <__pack_f+0x154>
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	a0 e0       	ldi	r26, 0x00	; 0
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__pack_f+0x14c>
     cda:	8f e3       	ldi	r24, 0x3F	; 63
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e8 0e       	add	r14, r24
     ce4:	f9 1e       	adc	r15, r25
     ce6:	0a 1f       	adc	r16, r26
     ce8:	1b 1f       	adc	r17, r27
     cea:	17 ff       	sbrs	r17, 7
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <__pack_f+0x162>
     cee:	16 95       	lsr	r17
     cf0:	07 95       	ror	r16
     cf2:	f7 94       	ror	r15
     cf4:	e7 94       	ror	r14
     cf6:	31 96       	adiw	r30, 0x01	; 1
     cf8:	87 e0       	ldi	r24, 0x07	; 7
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	8a 95       	dec	r24
     d04:	d1 f7       	brne	.-12     	; 0xcfa <__pack_f+0x164>
     d06:	05 c0       	rjmp	.+10     	; 0xd12 <__pack_f+0x17c>
     d08:	ee 24       	eor	r14, r14
     d0a:	ff 24       	eor	r15, r15
     d0c:	87 01       	movw	r16, r14
     d0e:	ef ef       	ldi	r30, 0xFF	; 255
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	6e 2f       	mov	r22, r30
     d14:	67 95       	ror	r22
     d16:	66 27       	eor	r22, r22
     d18:	67 95       	ror	r22
     d1a:	90 2f       	mov	r25, r16
     d1c:	9f 77       	andi	r25, 0x7F	; 127
     d1e:	d7 94       	ror	r13
     d20:	dd 24       	eor	r13, r13
     d22:	d7 94       	ror	r13
     d24:	8e 2f       	mov	r24, r30
     d26:	86 95       	lsr	r24
     d28:	49 2f       	mov	r20, r25
     d2a:	46 2b       	or	r20, r22
     d2c:	58 2f       	mov	r21, r24
     d2e:	5d 29       	or	r21, r13
     d30:	b7 01       	movw	r22, r14
     d32:	ca 01       	movw	r24, r20
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	08 95       	ret

00000d40 <__unpack_f>:
     d40:	fc 01       	movw	r30, r24
     d42:	db 01       	movw	r26, r22
     d44:	40 81       	ld	r20, Z
     d46:	51 81       	ldd	r21, Z+1	; 0x01
     d48:	22 81       	ldd	r18, Z+2	; 0x02
     d4a:	62 2f       	mov	r22, r18
     d4c:	6f 77       	andi	r22, 0x7F	; 127
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	22 1f       	adc	r18, r18
     d52:	22 27       	eor	r18, r18
     d54:	22 1f       	adc	r18, r18
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	89 2f       	mov	r24, r25
     d5a:	88 0f       	add	r24, r24
     d5c:	82 2b       	or	r24, r18
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	99 1f       	adc	r25, r25
     d64:	99 27       	eor	r25, r25
     d66:	99 1f       	adc	r25, r25
     d68:	11 96       	adiw	r26, 0x01	; 1
     d6a:	9c 93       	st	X, r25
     d6c:	11 97       	sbiw	r26, 0x01	; 1
     d6e:	21 15       	cp	r18, r1
     d70:	31 05       	cpc	r19, r1
     d72:	a9 f5       	brne	.+106    	; 0xdde <__unpack_f+0x9e>
     d74:	41 15       	cp	r20, r1
     d76:	51 05       	cpc	r21, r1
     d78:	61 05       	cpc	r22, r1
     d7a:	71 05       	cpc	r23, r1
     d7c:	11 f4       	brne	.+4      	; 0xd82 <__unpack_f+0x42>
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	37 c0       	rjmp	.+110    	; 0xdf0 <__unpack_f+0xb0>
     d82:	82 e8       	ldi	r24, 0x82	; 130
     d84:	9f ef       	ldi	r25, 0xFF	; 255
     d86:	13 96       	adiw	r26, 0x03	; 3
     d88:	9c 93       	st	X, r25
     d8a:	8e 93       	st	-X, r24
     d8c:	12 97       	sbiw	r26, 0x02	; 2
     d8e:	9a 01       	movw	r18, r20
     d90:	ab 01       	movw	r20, r22
     d92:	67 e0       	ldi	r22, 0x07	; 7
     d94:	22 0f       	add	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	44 1f       	adc	r20, r20
     d9a:	55 1f       	adc	r21, r21
     d9c:	6a 95       	dec	r22
     d9e:	d1 f7       	brne	.-12     	; 0xd94 <__unpack_f+0x54>
     da0:	83 e0       	ldi	r24, 0x03	; 3
     da2:	8c 93       	st	X, r24
     da4:	0d c0       	rjmp	.+26     	; 0xdc0 <__unpack_f+0x80>
     da6:	22 0f       	add	r18, r18
     da8:	33 1f       	adc	r19, r19
     daa:	44 1f       	adc	r20, r20
     dac:	55 1f       	adc	r21, r21
     dae:	12 96       	adiw	r26, 0x02	; 2
     db0:	8d 91       	ld	r24, X+
     db2:	9c 91       	ld	r25, X
     db4:	13 97       	sbiw	r26, 0x03	; 3
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	13 96       	adiw	r26, 0x03	; 3
     dba:	9c 93       	st	X, r25
     dbc:	8e 93       	st	-X, r24
     dbe:	12 97       	sbiw	r26, 0x02	; 2
     dc0:	20 30       	cpi	r18, 0x00	; 0
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	38 07       	cpc	r19, r24
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	48 07       	cpc	r20, r24
     dca:	80 e4       	ldi	r24, 0x40	; 64
     dcc:	58 07       	cpc	r21, r24
     dce:	58 f3       	brcs	.-42     	; 0xda6 <__unpack_f+0x66>
     dd0:	14 96       	adiw	r26, 0x04	; 4
     dd2:	2d 93       	st	X+, r18
     dd4:	3d 93       	st	X+, r19
     dd6:	4d 93       	st	X+, r20
     dd8:	5c 93       	st	X, r21
     dda:	17 97       	sbiw	r26, 0x07	; 7
     ddc:	08 95       	ret
     dde:	2f 3f       	cpi	r18, 0xFF	; 255
     de0:	31 05       	cpc	r19, r1
     de2:	79 f4       	brne	.+30     	; 0xe02 <__unpack_f+0xc2>
     de4:	41 15       	cp	r20, r1
     de6:	51 05       	cpc	r21, r1
     de8:	61 05       	cpc	r22, r1
     dea:	71 05       	cpc	r23, r1
     dec:	19 f4       	brne	.+6      	; 0xdf4 <__unpack_f+0xb4>
     dee:	84 e0       	ldi	r24, 0x04	; 4
     df0:	8c 93       	st	X, r24
     df2:	08 95       	ret
     df4:	64 ff       	sbrs	r22, 4
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <__unpack_f+0xbe>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	8c 93       	st	X, r24
     dfc:	12 c0       	rjmp	.+36     	; 0xe22 <__unpack_f+0xe2>
     dfe:	1c 92       	st	X, r1
     e00:	10 c0       	rjmp	.+32     	; 0xe22 <__unpack_f+0xe2>
     e02:	2f 57       	subi	r18, 0x7F	; 127
     e04:	30 40       	sbci	r19, 0x00	; 0
     e06:	13 96       	adiw	r26, 0x03	; 3
     e08:	3c 93       	st	X, r19
     e0a:	2e 93       	st	-X, r18
     e0c:	12 97       	sbiw	r26, 0x02	; 2
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	8c 93       	st	X, r24
     e12:	87 e0       	ldi	r24, 0x07	; 7
     e14:	44 0f       	add	r20, r20
     e16:	55 1f       	adc	r21, r21
     e18:	66 1f       	adc	r22, r22
     e1a:	77 1f       	adc	r23, r23
     e1c:	8a 95       	dec	r24
     e1e:	d1 f7       	brne	.-12     	; 0xe14 <__unpack_f+0xd4>
     e20:	70 64       	ori	r23, 0x40	; 64
     e22:	14 96       	adiw	r26, 0x04	; 4
     e24:	4d 93       	st	X+, r20
     e26:	5d 93       	st	X+, r21
     e28:	6d 93       	st	X+, r22
     e2a:	7c 93       	st	X, r23
     e2c:	17 97       	sbiw	r26, 0x07	; 7
     e2e:	08 95       	ret

00000e30 <__fpcmp_parts_f>:
     e30:	1f 93       	push	r17
     e32:	dc 01       	movw	r26, r24
     e34:	fb 01       	movw	r30, r22
     e36:	9c 91       	ld	r25, X
     e38:	92 30       	cpi	r25, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0xe>
     e3c:	47 c0       	rjmp	.+142    	; 0xecc <__fpcmp_parts_f+0x9c>
     e3e:	80 81       	ld	r24, Z
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0x16>
     e44:	43 c0       	rjmp	.+134    	; 0xecc <__fpcmp_parts_f+0x9c>
     e46:	94 30       	cpi	r25, 0x04	; 4
     e48:	51 f4       	brne	.+20     	; 0xe5e <__fpcmp_parts_f+0x2e>
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	1c 91       	ld	r17, X
     e4e:	84 30       	cpi	r24, 0x04	; 4
     e50:	99 f5       	brne	.+102    	; 0xeb8 <__fpcmp_parts_f+0x88>
     e52:	81 81       	ldd	r24, Z+1	; 0x01
     e54:	68 2f       	mov	r22, r24
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	61 1b       	sub	r22, r17
     e5a:	71 09       	sbc	r23, r1
     e5c:	3f c0       	rjmp	.+126    	; 0xedc <__fpcmp_parts_f+0xac>
     e5e:	84 30       	cpi	r24, 0x04	; 4
     e60:	21 f0       	breq	.+8      	; 0xe6a <__fpcmp_parts_f+0x3a>
     e62:	92 30       	cpi	r25, 0x02	; 2
     e64:	31 f4       	brne	.+12     	; 0xe72 <__fpcmp_parts_f+0x42>
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	b9 f1       	breq	.+110    	; 0xed8 <__fpcmp_parts_f+0xa8>
     e6a:	81 81       	ldd	r24, Z+1	; 0x01
     e6c:	88 23       	and	r24, r24
     e6e:	89 f1       	breq	.+98     	; 0xed2 <__fpcmp_parts_f+0xa2>
     e70:	2d c0       	rjmp	.+90     	; 0xecc <__fpcmp_parts_f+0x9c>
     e72:	11 96       	adiw	r26, 0x01	; 1
     e74:	1c 91       	ld	r17, X
     e76:	11 97       	sbiw	r26, 0x01	; 1
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	f1 f0       	breq	.+60     	; 0xeb8 <__fpcmp_parts_f+0x88>
     e7c:	81 81       	ldd	r24, Z+1	; 0x01
     e7e:	18 17       	cp	r17, r24
     e80:	d9 f4       	brne	.+54     	; 0xeb8 <__fpcmp_parts_f+0x88>
     e82:	12 96       	adiw	r26, 0x02	; 2
     e84:	2d 91       	ld	r18, X+
     e86:	3c 91       	ld	r19, X
     e88:	13 97       	sbiw	r26, 0x03	; 3
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	82 17       	cp	r24, r18
     e90:	93 07       	cpc	r25, r19
     e92:	94 f0       	brlt	.+36     	; 0xeb8 <__fpcmp_parts_f+0x88>
     e94:	28 17       	cp	r18, r24
     e96:	39 07       	cpc	r19, r25
     e98:	bc f0       	brlt	.+46     	; 0xec8 <__fpcmp_parts_f+0x98>
     e9a:	14 96       	adiw	r26, 0x04	; 4
     e9c:	8d 91       	ld	r24, X+
     e9e:	9d 91       	ld	r25, X+
     ea0:	0d 90       	ld	r0, X+
     ea2:	bc 91       	ld	r27, X
     ea4:	a0 2d       	mov	r26, r0
     ea6:	24 81       	ldd	r18, Z+4	; 0x04
     ea8:	35 81       	ldd	r19, Z+5	; 0x05
     eaa:	46 81       	ldd	r20, Z+6	; 0x06
     eac:	57 81       	ldd	r21, Z+7	; 0x07
     eae:	28 17       	cp	r18, r24
     eb0:	39 07       	cpc	r19, r25
     eb2:	4a 07       	cpc	r20, r26
     eb4:	5b 07       	cpc	r21, r27
     eb6:	18 f4       	brcc	.+6      	; 0xebe <__fpcmp_parts_f+0x8e>
     eb8:	11 23       	and	r17, r17
     eba:	41 f0       	breq	.+16     	; 0xecc <__fpcmp_parts_f+0x9c>
     ebc:	0a c0       	rjmp	.+20     	; 0xed2 <__fpcmp_parts_f+0xa2>
     ebe:	82 17       	cp	r24, r18
     ec0:	93 07       	cpc	r25, r19
     ec2:	a4 07       	cpc	r26, r20
     ec4:	b5 07       	cpc	r27, r21
     ec6:	40 f4       	brcc	.+16     	; 0xed8 <__fpcmp_parts_f+0xa8>
     ec8:	11 23       	and	r17, r17
     eca:	19 f0       	breq	.+6      	; 0xed2 <__fpcmp_parts_f+0xa2>
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <__fpcmp_parts_f+0xac>
     ed2:	6f ef       	ldi	r22, 0xFF	; 255
     ed4:	7f ef       	ldi	r23, 0xFF	; 255
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <__fpcmp_parts_f+0xac>
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	cb 01       	movw	r24, r22
     ede:	1f 91       	pop	r17
     ee0:	08 95       	ret

00000ee2 <keypad_init>:

#include"keypad.h"

void keypad_init(){
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	0f 92       	push	r0
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
keypad_DDR|=0X0F;
     eec:	a7 e3       	ldi	r26, 0x37	; 55
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e7 e3       	ldi	r30, 0x37	; 55
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8f 60       	ori	r24, 0x0F	; 15
     ef8:	8c 93       	st	X, r24
keypad_PORT|=0XFF;
     efa:	e8 e3       	ldi	r30, 0x38	; 56
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	e8 e3       	ldi	r30, 0x38	; 56
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	80 83       	st	Z, r24
 }
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <keypad_press>:
 unsigned int keypad_press(){
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	c2 5e       	subi	r28, 0xE2	; 226
     f1e:	d0 40       	sbci	r29, 0x00	; 0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
	 unsigned int key;
keypad_PORT=0XFE;
     f2a:	e8 e3       	ldi	r30, 0x38	; 56
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	8e ef       	ldi	r24, 0xFE	; 254
     f30:	80 83       	st	Z, r24
if (!(keypad_PIN &(1<<4))){
     f32:	e6 e3       	ldi	r30, 0x36	; 54
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	80 71       	andi	r24, 0x10	; 16
     f3e:	90 70       	andi	r25, 0x00	; 0
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	09 f0       	breq	.+2      	; 0xf46 <keypad_press+0x36>
     f44:	c5 c0       	rjmp	.+394    	; 0x10d0 <keypad_press+0x1c0>
     f46:	fe 01       	movw	r30, r28
     f48:	e3 52       	subi	r30, 0x23	; 35
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	b0 e4       	ldi	r27, 0x40	; 64
     f54:	80 83       	st	Z, r24
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	a2 83       	std	Z+2, r26	; 0x02
     f5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	8e 01       	movw	r16, r28
     f5e:	07 52       	subi	r16, 0x27	; 39
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	fe 01       	movw	r30, r28
     f64:	e3 52       	subi	r30, 0x23	; 35
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	60 81       	ld	r22, Z
     f6a:	71 81       	ldd	r23, Z+1	; 0x01
     f6c:	82 81       	ldd	r24, Z+2	; 0x02
     f6e:	93 81       	ldd	r25, Z+3	; 0x03
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4a ef       	ldi	r20, 0xFA	; 250
     f76:	54 e4       	ldi	r21, 0x44	; 68
     f78:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	f8 01       	movw	r30, r16
     f82:	80 83       	st	Z, r24
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	a2 83       	std	Z+2, r26	; 0x02
     f88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f8a:	fe 01       	movw	r30, r28
     f8c:	e7 52       	subi	r30, 0x27	; 39
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e8       	ldi	r20, 0x80	; 128
     f9e:	5f e3       	ldi	r21, 0x3F	; 63
     fa0:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	44 f4       	brge	.+16     	; 0xfb8 <keypad_press+0xa8>
		__ticks = 1;
     fa8:	fe 01       	movw	r30, r28
     faa:	e9 52       	subi	r30, 0x29	; 41
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	80 83       	st	Z, r24
     fb6:	64 c0       	rjmp	.+200    	; 0x1080 <keypad_press+0x170>
	else if (__tmp > 65535)
     fb8:	fe 01       	movw	r30, r28
     fba:	e7 52       	subi	r30, 0x27	; 39
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	93 81       	ldd	r25, Z+3	; 0x03
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	0c f0       	brlt	.+2      	; 0xfd8 <keypad_press+0xc8>
     fd6:	43 c0       	rjmp	.+134    	; 0x105e <keypad_press+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd8:	fe 01       	movw	r30, r28
     fda:	e3 52       	subi	r30, 0x23	; 35
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e2       	ldi	r20, 0x20	; 32
     fec:	51 e4       	ldi	r21, 0x41	; 65
     fee:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	8e 01       	movw	r16, r28
     ff8:	09 52       	subi	r16, 0x29	; 41
     ffa:	1f 4f       	sbci	r17, 0xFF	; 255
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	f8 01       	movw	r30, r16
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	80 83       	st	Z, r24
    100e:	1f c0       	rjmp	.+62     	; 0x104e <keypad_press+0x13e>
    1010:	fe 01       	movw	r30, r28
    1012:	eb 52       	subi	r30, 0x2B	; 43
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	88 ec       	ldi	r24, 0xC8	; 200
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    101e:	fe 01       	movw	r30, r28
    1020:	eb 52       	subi	r30, 0x2B	; 43
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <keypad_press+0x118>
    102c:	fe 01       	movw	r30, r28
    102e:	eb 52       	subi	r30, 0x2B	; 43
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1036:	de 01       	movw	r26, r28
    1038:	a9 52       	subi	r26, 0x29	; 41
    103a:	bf 4f       	sbci	r27, 0xFF	; 255
    103c:	fe 01       	movw	r30, r28
    103e:	e9 52       	subi	r30, 0x29	; 41
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	9c 93       	st	X, r25
    104c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104e:	fe 01       	movw	r30, r28
    1050:	e9 52       	subi	r30, 0x29	; 41
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	d1 f6       	brne	.-76     	; 0x1010 <keypad_press+0x100>
    105c:	28 c0       	rjmp	.+80     	; 0x10ae <keypad_press+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105e:	8e 01       	movw	r16, r28
    1060:	09 52       	subi	r16, 0x29	; 41
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    1064:	fe 01       	movw	r30, r28
    1066:	e7 52       	subi	r30, 0x27	; 39
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	60 81       	ld	r22, Z
    106c:	71 81       	ldd	r23, Z+1	; 0x01
    106e:	82 81       	ldd	r24, Z+2	; 0x02
    1070:	93 81       	ldd	r25, Z+3	; 0x03
    1072:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	f8 01       	movw	r30, r16
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	80 83       	st	Z, r24
    1080:	de 01       	movw	r26, r28
    1082:	ad 52       	subi	r26, 0x2D	; 45
    1084:	bf 4f       	sbci	r27, 0xFF	; 255
    1086:	fe 01       	movw	r30, r28
    1088:	e9 52       	subi	r30, 0x29	; 41
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	80 81       	ld	r24, Z
    108e:	91 81       	ldd	r25, Z+1	; 0x01
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	9c 93       	st	X, r25
    1094:	8e 93       	st	-X, r24
    1096:	fe 01       	movw	r30, r28
    1098:	ed 52       	subi	r30, 0x2D	; 45
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <keypad_press+0x190>
    10a4:	fe 01       	movw	r30, r28
    10a6:	ed 52       	subi	r30, 0x2D	; 45
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	91 83       	std	Z+1, r25	; 0x01
    10ac:	80 83       	st	Z, r24
_delay_ms(2);
while(!(keypad_PIN &(1<<4)));
    10ae:	e6 e3       	ldi	r30, 0x36	; 54
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	80 71       	andi	r24, 0x10	; 16
    10ba:	90 70       	andi	r25, 0x00	; 0
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	b9 f3       	breq	.-18     	; 0x10ae <keypad_press+0x19e>
key=1;
    10c0:	fe 01       	movw	r30, r28
    10c2:	ef 51       	subi	r30, 0x1F	; 31
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
    10ce:	64 c2       	rjmp	.+1224   	; 0x1598 <keypad_press+0x688>
}
else if (!(keypad_PIN &(1<<5))){
    10d0:	e6 e3       	ldi	r30, 0x36	; 54
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	80 72       	andi	r24, 0x20	; 32
    10dc:	90 70       	andi	r25, 0x00	; 0
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <keypad_press+0x1d4>
    10e2:	c5 c0       	rjmp	.+394    	; 0x126e <keypad_press+0x35e>
    10e4:	fe 01       	movw	r30, r28
    10e6:	e1 53       	subi	r30, 0x31	; 49
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a0 e0       	ldi	r26, 0x00	; 0
    10f0:	b0 e4       	ldi	r27, 0x40	; 64
    10f2:	80 83       	st	Z, r24
    10f4:	91 83       	std	Z+1, r25	; 0x01
    10f6:	a2 83       	std	Z+2, r26	; 0x02
    10f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fa:	8e 01       	movw	r16, r28
    10fc:	05 53       	subi	r16, 0x35	; 53
    10fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1100:	fe 01       	movw	r30, r28
    1102:	e1 53       	subi	r30, 0x31	; 49
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	82 81       	ldd	r24, Z+2	; 0x02
    110c:	93 81       	ldd	r25, Z+3	; 0x03
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	4a ef       	ldi	r20, 0xFA	; 250
    1114:	54 e4       	ldi	r21, 0x44	; 68
    1116:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	f8 01       	movw	r30, r16
    1120:	80 83       	st	Z, r24
    1122:	91 83       	std	Z+1, r25	; 0x01
    1124:	a2 83       	std	Z+2, r26	; 0x02
    1126:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1128:	fe 01       	movw	r30, r28
    112a:	e5 53       	subi	r30, 0x35	; 53
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	60 81       	ld	r22, Z
    1130:	71 81       	ldd	r23, Z+1	; 0x01
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	93 81       	ldd	r25, Z+3	; 0x03
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e8       	ldi	r20, 0x80	; 128
    113c:	5f e3       	ldi	r21, 0x3F	; 63
    113e:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1142:	88 23       	and	r24, r24
    1144:	44 f4       	brge	.+16     	; 0x1156 <keypad_press+0x246>
		__ticks = 1;
    1146:	fe 01       	movw	r30, r28
    1148:	e7 53       	subi	r30, 0x37	; 55
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	91 83       	std	Z+1, r25	; 0x01
    1152:	80 83       	st	Z, r24
    1154:	64 c0       	rjmp	.+200    	; 0x121e <keypad_press+0x30e>
	else if (__tmp > 65535)
    1156:	fe 01       	movw	r30, r28
    1158:	e5 53       	subi	r30, 0x35	; 53
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	60 81       	ld	r22, Z
    115e:	71 81       	ldd	r23, Z+1	; 0x01
    1160:	82 81       	ldd	r24, Z+2	; 0x02
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	3f ef       	ldi	r19, 0xFF	; 255
    1168:	4f e7       	ldi	r20, 0x7F	; 127
    116a:	57 e4       	ldi	r21, 0x47	; 71
    116c:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1170:	18 16       	cp	r1, r24
    1172:	0c f0       	brlt	.+2      	; 0x1176 <keypad_press+0x266>
    1174:	43 c0       	rjmp	.+134    	; 0x11fc <keypad_press+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1176:	fe 01       	movw	r30, r28
    1178:	e1 53       	subi	r30, 0x31	; 49
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	60 81       	ld	r22, Z
    117e:	71 81       	ldd	r23, Z+1	; 0x01
    1180:	82 81       	ldd	r24, Z+2	; 0x02
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e2       	ldi	r20, 0x20	; 32
    118a:	51 e4       	ldi	r21, 0x41	; 65
    118c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	8e 01       	movw	r16, r28
    1196:	07 53       	subi	r16, 0x37	; 55
    1198:	1f 4f       	sbci	r17, 0xFF	; 255
    119a:	bc 01       	movw	r22, r24
    119c:	cd 01       	movw	r24, r26
    119e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	f8 01       	movw	r30, r16
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	80 83       	st	Z, r24
    11ac:	1f c0       	rjmp	.+62     	; 0x11ec <keypad_press+0x2dc>
    11ae:	fe 01       	movw	r30, r28
    11b0:	e9 53       	subi	r30, 0x39	; 57
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	88 ec       	ldi	r24, 0xC8	; 200
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
    11bc:	fe 01       	movw	r30, r28
    11be:	e9 53       	subi	r30, 0x39	; 57
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <keypad_press+0x2b6>
    11ca:	fe 01       	movw	r30, r28
    11cc:	e9 53       	subi	r30, 0x39	; 57
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	91 83       	std	Z+1, r25	; 0x01
    11d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d4:	de 01       	movw	r26, r28
    11d6:	a7 53       	subi	r26, 0x37	; 55
    11d8:	bf 4f       	sbci	r27, 0xFF	; 255
    11da:	fe 01       	movw	r30, r28
    11dc:	e7 53       	subi	r30, 0x37	; 55
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	80 81       	ld	r24, Z
    11e2:	91 81       	ldd	r25, Z+1	; 0x01
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	11 96       	adiw	r26, 0x01	; 1
    11e8:	9c 93       	st	X, r25
    11ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ec:	fe 01       	movw	r30, r28
    11ee:	e7 53       	subi	r30, 0x37	; 55
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	80 81       	ld	r24, Z
    11f4:	91 81       	ldd	r25, Z+1	; 0x01
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	d1 f6       	brne	.-76     	; 0x11ae <keypad_press+0x29e>
    11fa:	28 c0       	rjmp	.+80     	; 0x124c <keypad_press+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fc:	8e 01       	movw	r16, r28
    11fe:	07 53       	subi	r16, 0x37	; 55
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	fe 01       	movw	r30, r28
    1204:	e5 53       	subi	r30, 0x35	; 53
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	f8 01       	movw	r30, r16
    121a:	91 83       	std	Z+1, r25	; 0x01
    121c:	80 83       	st	Z, r24
    121e:	de 01       	movw	r26, r28
    1220:	ab 53       	subi	r26, 0x3B	; 59
    1222:	bf 4f       	sbci	r27, 0xFF	; 255
    1224:	fe 01       	movw	r30, r28
    1226:	e7 53       	subi	r30, 0x37	; 55
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	80 81       	ld	r24, Z
    122c:	91 81       	ldd	r25, Z+1	; 0x01
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	9c 93       	st	X, r25
    1232:	8e 93       	st	-X, r24
    1234:	fe 01       	movw	r30, r28
    1236:	eb 53       	subi	r30, 0x3B	; 59
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	80 81       	ld	r24, Z
    123c:	91 81       	ldd	r25, Z+1	; 0x01
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <keypad_press+0x32e>
    1242:	fe 01       	movw	r30, r28
    1244:	eb 53       	subi	r30, 0x3B	; 59
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	91 83       	std	Z+1, r25	; 0x01
    124a:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<5)));
    124c:	e6 e3       	ldi	r30, 0x36	; 54
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	80 72       	andi	r24, 0x20	; 32
    1258:	90 70       	andi	r25, 0x00	; 0
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	b9 f3       	breq	.-18     	; 0x124c <keypad_press+0x33c>
	key=2;
    125e:	fe 01       	movw	r30, r28
    1260:	ef 51       	subi	r30, 0x1F	; 31
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	91 83       	std	Z+1, r25	; 0x01
    126a:	80 83       	st	Z, r24
    126c:	95 c1       	rjmp	.+810    	; 0x1598 <keypad_press+0x688>
	}
else if (!(keypad_PIN &(1<<6))){
    126e:	e6 e3       	ldi	r30, 0x36	; 54
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	80 74       	andi	r24, 0x40	; 64
    127a:	90 70       	andi	r25, 0x00	; 0
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	09 f0       	breq	.+2      	; 0x1282 <keypad_press+0x372>
    1280:	c5 c0       	rjmp	.+394    	; 0x140c <keypad_press+0x4fc>
    1282:	fe 01       	movw	r30, r28
    1284:	ef 53       	subi	r30, 0x3F	; 63
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a0 e0       	ldi	r26, 0x00	; 0
    128e:	b0 e4       	ldi	r27, 0x40	; 64
    1290:	80 83       	st	Z, r24
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	a2 83       	std	Z+2, r26	; 0x02
    1296:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1298:	8e 01       	movw	r16, r28
    129a:	03 54       	subi	r16, 0x43	; 67
    129c:	1f 4f       	sbci	r17, 0xFF	; 255
    129e:	fe 01       	movw	r30, r28
    12a0:	ef 53       	subi	r30, 0x3F	; 63
    12a2:	ff 4f       	sbci	r31, 0xFF	; 255
    12a4:	60 81       	ld	r22, Z
    12a6:	71 81       	ldd	r23, Z+1	; 0x01
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
    12aa:	93 81       	ldd	r25, Z+3	; 0x03
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	4a ef       	ldi	r20, 0xFA	; 250
    12b2:	54 e4       	ldi	r21, 0x44	; 68
    12b4:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	f8 01       	movw	r30, r16
    12be:	80 83       	st	Z, r24
    12c0:	91 83       	std	Z+1, r25	; 0x01
    12c2:	a2 83       	std	Z+2, r26	; 0x02
    12c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12c6:	fe 01       	movw	r30, r28
    12c8:	e3 54       	subi	r30, 0x43	; 67
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	60 81       	ld	r22, Z
    12ce:	71 81       	ldd	r23, Z+1	; 0x01
    12d0:	82 81       	ldd	r24, Z+2	; 0x02
    12d2:	93 81       	ldd	r25, Z+3	; 0x03
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e8       	ldi	r20, 0x80	; 128
    12da:	5f e3       	ldi	r21, 0x3F	; 63
    12dc:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    12e0:	88 23       	and	r24, r24
    12e2:	44 f4       	brge	.+16     	; 0x12f4 <keypad_press+0x3e4>
		__ticks = 1;
    12e4:	fe 01       	movw	r30, r28
    12e6:	e5 54       	subi	r30, 0x45	; 69
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	91 83       	std	Z+1, r25	; 0x01
    12f0:	80 83       	st	Z, r24
    12f2:	64 c0       	rjmp	.+200    	; 0x13bc <keypad_press+0x4ac>
	else if (__tmp > 65535)
    12f4:	fe 01       	movw	r30, r28
    12f6:	e3 54       	subi	r30, 0x43	; 67
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	60 81       	ld	r22, Z
    12fc:	71 81       	ldd	r23, Z+1	; 0x01
    12fe:	82 81       	ldd	r24, Z+2	; 0x02
    1300:	93 81       	ldd	r25, Z+3	; 0x03
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	3f ef       	ldi	r19, 0xFF	; 255
    1306:	4f e7       	ldi	r20, 0x7F	; 127
    1308:	57 e4       	ldi	r21, 0x47	; 71
    130a:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    130e:	18 16       	cp	r1, r24
    1310:	0c f0       	brlt	.+2      	; 0x1314 <keypad_press+0x404>
    1312:	43 c0       	rjmp	.+134    	; 0x139a <keypad_press+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1314:	fe 01       	movw	r30, r28
    1316:	ef 53       	subi	r30, 0x3F	; 63
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	60 81       	ld	r22, Z
    131c:	71 81       	ldd	r23, Z+1	; 0x01
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	93 81       	ldd	r25, Z+3	; 0x03
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e2       	ldi	r20, 0x20	; 32
    1328:	51 e4       	ldi	r21, 0x41	; 65
    132a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	8e 01       	movw	r16, r28
    1334:	05 54       	subi	r16, 0x45	; 69
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	f8 01       	movw	r30, r16
    1346:	91 83       	std	Z+1, r25	; 0x01
    1348:	80 83       	st	Z, r24
    134a:	1f c0       	rjmp	.+62     	; 0x138a <keypad_press+0x47a>
    134c:	fe 01       	movw	r30, r28
    134e:	e7 54       	subi	r30, 0x47	; 71
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	88 ec       	ldi	r24, 0xC8	; 200
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	91 83       	std	Z+1, r25	; 0x01
    1358:	80 83       	st	Z, r24
    135a:	fe 01       	movw	r30, r28
    135c:	e7 54       	subi	r30, 0x47	; 71
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	80 81       	ld	r24, Z
    1362:	91 81       	ldd	r25, Z+1	; 0x01
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <keypad_press+0x454>
    1368:	fe 01       	movw	r30, r28
    136a:	e7 54       	subi	r30, 0x47	; 71
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1372:	de 01       	movw	r26, r28
    1374:	a5 54       	subi	r26, 0x45	; 69
    1376:	bf 4f       	sbci	r27, 0xFF	; 255
    1378:	fe 01       	movw	r30, r28
    137a:	e5 54       	subi	r30, 0x45	; 69
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	80 81       	ld	r24, Z
    1380:	91 81       	ldd	r25, Z+1	; 0x01
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	11 96       	adiw	r26, 0x01	; 1
    1386:	9c 93       	st	X, r25
    1388:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138a:	fe 01       	movw	r30, r28
    138c:	e5 54       	subi	r30, 0x45	; 69
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	80 81       	ld	r24, Z
    1392:	91 81       	ldd	r25, Z+1	; 0x01
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	d1 f6       	brne	.-76     	; 0x134c <keypad_press+0x43c>
    1398:	28 c0       	rjmp	.+80     	; 0x13ea <keypad_press+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139a:	8e 01       	movw	r16, r28
    139c:	05 54       	subi	r16, 0x45	; 69
    139e:	1f 4f       	sbci	r17, 0xFF	; 255
    13a0:	fe 01       	movw	r30, r28
    13a2:	e3 54       	subi	r30, 0x43	; 67
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	60 81       	ld	r22, Z
    13a8:	71 81       	ldd	r23, Z+1	; 0x01
    13aa:	82 81       	ldd	r24, Z+2	; 0x02
    13ac:	93 81       	ldd	r25, Z+3	; 0x03
    13ae:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	f8 01       	movw	r30, r16
    13b8:	91 83       	std	Z+1, r25	; 0x01
    13ba:	80 83       	st	Z, r24
    13bc:	de 01       	movw	r26, r28
    13be:	a9 54       	subi	r26, 0x49	; 73
    13c0:	bf 4f       	sbci	r27, 0xFF	; 255
    13c2:	fe 01       	movw	r30, r28
    13c4:	e5 54       	subi	r30, 0x45	; 69
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	11 96       	adiw	r26, 0x01	; 1
    13ce:	9c 93       	st	X, r25
    13d0:	8e 93       	st	-X, r24
    13d2:	fe 01       	movw	r30, r28
    13d4:	e9 54       	subi	r30, 0x49	; 73
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <keypad_press+0x4cc>
    13e0:	fe 01       	movw	r30, r28
    13e2:	e9 54       	subi	r30, 0x49	; 73
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<6)));
    13ea:	e6 e3       	ldi	r30, 0x36	; 54
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	80 74       	andi	r24, 0x40	; 64
    13f6:	90 70       	andi	r25, 0x00	; 0
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	b9 f3       	breq	.-18     	; 0x13ea <keypad_press+0x4da>
	key=3;
    13fc:	fe 01       	movw	r30, r28
    13fe:	ef 51       	subi	r30, 0x1F	; 31
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	83 e0       	ldi	r24, 0x03	; 3
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	c6 c0       	rjmp	.+396    	; 0x1598 <keypad_press+0x688>
	}
else if (!(keypad_PIN &(1<<7))){
    140c:	e6 e3       	ldi	r30, 0x36	; 54
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	88 23       	and	r24, r24
    1414:	0c f4       	brge	.+2      	; 0x1418 <keypad_press+0x508>
    1416:	c0 c0       	rjmp	.+384    	; 0x1598 <keypad_press+0x688>
    1418:	fe 01       	movw	r30, r28
    141a:	ed 54       	subi	r30, 0x4D	; 77
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	a0 e0       	ldi	r26, 0x00	; 0
    1424:	b0 e4       	ldi	r27, 0x40	; 64
    1426:	80 83       	st	Z, r24
    1428:	91 83       	std	Z+1, r25	; 0x01
    142a:	a2 83       	std	Z+2, r26	; 0x02
    142c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142e:	8e 01       	movw	r16, r28
    1430:	01 55       	subi	r16, 0x51	; 81
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	fe 01       	movw	r30, r28
    1436:	ed 54       	subi	r30, 0x4D	; 77
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	60 81       	ld	r22, Z
    143c:	71 81       	ldd	r23, Z+1	; 0x01
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	4a ef       	ldi	r20, 0xFA	; 250
    1448:	54 e4       	ldi	r21, 0x44	; 68
    144a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	f8 01       	movw	r30, r16
    1454:	80 83       	st	Z, r24
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	a2 83       	std	Z+2, r26	; 0x02
    145a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    145c:	fe 01       	movw	r30, r28
    145e:	e1 55       	subi	r30, 0x51	; 81
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	60 81       	ld	r22, Z
    1464:	71 81       	ldd	r23, Z+1	; 0x01
    1466:	82 81       	ldd	r24, Z+2	; 0x02
    1468:	93 81       	ldd	r25, Z+3	; 0x03
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e8       	ldi	r20, 0x80	; 128
    1470:	5f e3       	ldi	r21, 0x3F	; 63
    1472:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1476:	88 23       	and	r24, r24
    1478:	44 f4       	brge	.+16     	; 0x148a <keypad_press+0x57a>
		__ticks = 1;
    147a:	fe 01       	movw	r30, r28
    147c:	e3 55       	subi	r30, 0x53	; 83
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	80 83       	st	Z, r24
    1488:	64 c0       	rjmp	.+200    	; 0x1552 <keypad_press+0x642>
	else if (__tmp > 65535)
    148a:	fe 01       	movw	r30, r28
    148c:	e1 55       	subi	r30, 0x51	; 81
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	60 81       	ld	r22, Z
    1492:	71 81       	ldd	r23, Z+1	; 0x01
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	93 81       	ldd	r25, Z+3	; 0x03
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	3f ef       	ldi	r19, 0xFF	; 255
    149c:	4f e7       	ldi	r20, 0x7F	; 127
    149e:	57 e4       	ldi	r21, 0x47	; 71
    14a0:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    14a4:	18 16       	cp	r1, r24
    14a6:	0c f0       	brlt	.+2      	; 0x14aa <keypad_press+0x59a>
    14a8:	43 c0       	rjmp	.+134    	; 0x1530 <keypad_press+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14aa:	fe 01       	movw	r30, r28
    14ac:	ed 54       	subi	r30, 0x4D	; 77
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	60 81       	ld	r22, Z
    14b2:	71 81       	ldd	r23, Z+1	; 0x01
    14b4:	82 81       	ldd	r24, Z+2	; 0x02
    14b6:	93 81       	ldd	r25, Z+3	; 0x03
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e2       	ldi	r20, 0x20	; 32
    14be:	51 e4       	ldi	r21, 0x41	; 65
    14c0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	8e 01       	movw	r16, r28
    14ca:	03 55       	subi	r16, 0x53	; 83
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
    14ce:	bc 01       	movw	r22, r24
    14d0:	cd 01       	movw	r24, r26
    14d2:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	f8 01       	movw	r30, r16
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
    14e0:	1f c0       	rjmp	.+62     	; 0x1520 <keypad_press+0x610>
    14e2:	fe 01       	movw	r30, r28
    14e4:	e5 55       	subi	r30, 0x55	; 85
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	88 ec       	ldi	r24, 0xC8	; 200
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	80 83       	st	Z, r24
    14f0:	fe 01       	movw	r30, r28
    14f2:	e5 55       	subi	r30, 0x55	; 85
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	80 81       	ld	r24, Z
    14f8:	91 81       	ldd	r25, Z+1	; 0x01
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <keypad_press+0x5ea>
    14fe:	fe 01       	movw	r30, r28
    1500:	e5 55       	subi	r30, 0x55	; 85
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	de 01       	movw	r26, r28
    150a:	a3 55       	subi	r26, 0x53	; 83
    150c:	bf 4f       	sbci	r27, 0xFF	; 255
    150e:	fe 01       	movw	r30, r28
    1510:	e3 55       	subi	r30, 0x53	; 83
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 81       	ld	r24, Z
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	11 96       	adiw	r26, 0x01	; 1
    151c:	9c 93       	st	X, r25
    151e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1520:	fe 01       	movw	r30, r28
    1522:	e3 55       	subi	r30, 0x53	; 83
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	d1 f6       	brne	.-76     	; 0x14e2 <keypad_press+0x5d2>
    152e:	28 c0       	rjmp	.+80     	; 0x1580 <keypad_press+0x670>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1530:	8e 01       	movw	r16, r28
    1532:	03 55       	subi	r16, 0x53	; 83
    1534:	1f 4f       	sbci	r17, 0xFF	; 255
    1536:	fe 01       	movw	r30, r28
    1538:	e1 55       	subi	r30, 0x51	; 81
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	60 81       	ld	r22, Z
    153e:	71 81       	ldd	r23, Z+1	; 0x01
    1540:	82 81       	ldd	r24, Z+2	; 0x02
    1542:	93 81       	ldd	r25, Z+3	; 0x03
    1544:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	f8 01       	movw	r30, r16
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	80 83       	st	Z, r24
    1552:	de 01       	movw	r26, r28
    1554:	a7 55       	subi	r26, 0x57	; 87
    1556:	bf 4f       	sbci	r27, 0xFF	; 255
    1558:	fe 01       	movw	r30, r28
    155a:	e3 55       	subi	r30, 0x53	; 83
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	80 81       	ld	r24, Z
    1560:	91 81       	ldd	r25, Z+1	; 0x01
    1562:	11 96       	adiw	r26, 0x01	; 1
    1564:	9c 93       	st	X, r25
    1566:	8e 93       	st	-X, r24
    1568:	fe 01       	movw	r30, r28
    156a:	e7 55       	subi	r30, 0x57	; 87
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 81       	ld	r24, Z
    1570:	91 81       	ldd	r25, Z+1	; 0x01
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <keypad_press+0x662>
    1576:	fe 01       	movw	r30, r28
    1578:	e7 55       	subi	r30, 0x57	; 87
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<7)));
    1580:	e6 e3       	ldi	r30, 0x36	; 54
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	88 23       	and	r24, r24
    1588:	dc f7       	brge	.-10     	; 0x1580 <keypad_press+0x670>
	key=4;
    158a:	fe 01       	movw	r30, r28
    158c:	ef 51       	subi	r30, 0x1F	; 31
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	84 e0       	ldi	r24, 0x04	; 4
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	91 83       	std	Z+1, r25	; 0x01
    1596:	80 83       	st	Z, r24
	}
keypad_PORT=0XFD;
    1598:	e8 e3       	ldi	r30, 0x38	; 56
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	8d ef       	ldi	r24, 0xFD	; 253
    159e:	80 83       	st	Z, r24
if (!(keypad_PIN &(1<<4))){
    15a0:	e6 e3       	ldi	r30, 0x36	; 54
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	80 71       	andi	r24, 0x10	; 16
    15ac:	90 70       	andi	r25, 0x00	; 0
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <keypad_press+0x6a4>
    15b2:	c5 c0       	rjmp	.+394    	; 0x173e <keypad_press+0x82e>
    15b4:	fe 01       	movw	r30, r28
    15b6:	eb 55       	subi	r30, 0x5B	; 91
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a0 e0       	ldi	r26, 0x00	; 0
    15c0:	b0 e4       	ldi	r27, 0x40	; 64
    15c2:	80 83       	st	Z, r24
    15c4:	91 83       	std	Z+1, r25	; 0x01
    15c6:	a2 83       	std	Z+2, r26	; 0x02
    15c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ca:	8e 01       	movw	r16, r28
    15cc:	0f 55       	subi	r16, 0x5F	; 95
    15ce:	1f 4f       	sbci	r17, 0xFF	; 255
    15d0:	fe 01       	movw	r30, r28
    15d2:	eb 55       	subi	r30, 0x5B	; 91
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	4a ef       	ldi	r20, 0xFA	; 250
    15e4:	54 e4       	ldi	r21, 0x44	; 68
    15e6:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	f8 01       	movw	r30, r16
    15f0:	80 83       	st	Z, r24
    15f2:	91 83       	std	Z+1, r25	; 0x01
    15f4:	a2 83       	std	Z+2, r26	; 0x02
    15f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15f8:	fe 01       	movw	r30, r28
    15fa:	ef 55       	subi	r30, 0x5F	; 95
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	60 81       	ld	r22, Z
    1600:	71 81       	ldd	r23, Z+1	; 0x01
    1602:	82 81       	ldd	r24, Z+2	; 0x02
    1604:	93 81       	ldd	r25, Z+3	; 0x03
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e8       	ldi	r20, 0x80	; 128
    160c:	5f e3       	ldi	r21, 0x3F	; 63
    160e:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1612:	88 23       	and	r24, r24
    1614:	44 f4       	brge	.+16     	; 0x1626 <keypad_press+0x716>
		__ticks = 1;
    1616:	fe 01       	movw	r30, r28
    1618:	e1 56       	subi	r30, 0x61	; 97
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	80 83       	st	Z, r24
    1624:	64 c0       	rjmp	.+200    	; 0x16ee <keypad_press+0x7de>
	else if (__tmp > 65535)
    1626:	fe 01       	movw	r30, r28
    1628:	ef 55       	subi	r30, 0x5F	; 95
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	3f ef       	ldi	r19, 0xFF	; 255
    1638:	4f e7       	ldi	r20, 0x7F	; 127
    163a:	57 e4       	ldi	r21, 0x47	; 71
    163c:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1640:	18 16       	cp	r1, r24
    1642:	0c f0       	brlt	.+2      	; 0x1646 <keypad_press+0x736>
    1644:	43 c0       	rjmp	.+134    	; 0x16cc <keypad_press+0x7bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1646:	fe 01       	movw	r30, r28
    1648:	eb 55       	subi	r30, 0x5B	; 91
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	60 81       	ld	r22, Z
    164e:	71 81       	ldd	r23, Z+1	; 0x01
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	93 81       	ldd	r25, Z+3	; 0x03
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e2       	ldi	r20, 0x20	; 32
    165a:	51 e4       	ldi	r21, 0x41	; 65
    165c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	8e 01       	movw	r16, r28
    1666:	01 56       	subi	r16, 0x61	; 97
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	f8 01       	movw	r30, r16
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
    167c:	1f c0       	rjmp	.+62     	; 0x16bc <keypad_press+0x7ac>
    167e:	fe 01       	movw	r30, r28
    1680:	e3 56       	subi	r30, 0x63	; 99
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	88 ec       	ldi	r24, 0xC8	; 200
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
    168c:	fe 01       	movw	r30, r28
    168e:	e3 56       	subi	r30, 0x63	; 99
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <keypad_press+0x786>
    169a:	fe 01       	movw	r30, r28
    169c:	e3 56       	subi	r30, 0x63	; 99
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a4:	de 01       	movw	r26, r28
    16a6:	a1 56       	subi	r26, 0x61	; 97
    16a8:	bf 4f       	sbci	r27, 0xFF	; 255
    16aa:	fe 01       	movw	r30, r28
    16ac:	e1 56       	subi	r30, 0x61	; 97
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	80 81       	ld	r24, Z
    16b2:	91 81       	ldd	r25, Z+1	; 0x01
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	11 96       	adiw	r26, 0x01	; 1
    16b8:	9c 93       	st	X, r25
    16ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16bc:	fe 01       	movw	r30, r28
    16be:	e1 56       	subi	r30, 0x61	; 97
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	d1 f6       	brne	.-76     	; 0x167e <keypad_press+0x76e>
    16ca:	28 c0       	rjmp	.+80     	; 0x171c <keypad_press+0x80c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16cc:	8e 01       	movw	r16, r28
    16ce:	01 56       	subi	r16, 0x61	; 97
    16d0:	1f 4f       	sbci	r17, 0xFF	; 255
    16d2:	fe 01       	movw	r30, r28
    16d4:	ef 55       	subi	r30, 0x5F	; 95
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	f8 01       	movw	r30, r16
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
    16ee:	de 01       	movw	r26, r28
    16f0:	a5 56       	subi	r26, 0x65	; 101
    16f2:	bf 4f       	sbci	r27, 0xFF	; 255
    16f4:	fe 01       	movw	r30, r28
    16f6:	e1 56       	subi	r30, 0x61	; 97
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	11 96       	adiw	r26, 0x01	; 1
    1700:	9c 93       	st	X, r25
    1702:	8e 93       	st	-X, r24
    1704:	fe 01       	movw	r30, r28
    1706:	e5 56       	subi	r30, 0x65	; 101
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 81       	ld	r24, Z
    170c:	91 81       	ldd	r25, Z+1	; 0x01
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <keypad_press+0x7fe>
    1712:	fe 01       	movw	r30, r28
    1714:	e5 56       	subi	r30, 0x65	; 101
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	80 83       	st	Z, r24
_delay_ms(2);
while(!(keypad_PIN &(1<<4)));
    171c:	e6 e3       	ldi	r30, 0x36	; 54
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	80 71       	andi	r24, 0x10	; 16
    1728:	90 70       	andi	r25, 0x00	; 0
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	b9 f3       	breq	.-18     	; 0x171c <keypad_press+0x80c>
key=5;
    172e:	fe 01       	movw	r30, r28
    1730:	ef 51       	subi	r30, 0x1F	; 31
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	85 e0       	ldi	r24, 0x05	; 5
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	80 83       	st	Z, r24
    173c:	64 c2       	rjmp	.+1224   	; 0x1c06 <keypad_press+0xcf6>
}
else if (!(keypad_PIN &(1<<5))){
    173e:	e6 e3       	ldi	r30, 0x36	; 54
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	80 72       	andi	r24, 0x20	; 32
    174a:	90 70       	andi	r25, 0x00	; 0
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	09 f0       	breq	.+2      	; 0x1752 <keypad_press+0x842>
    1750:	c5 c0       	rjmp	.+394    	; 0x18dc <keypad_press+0x9cc>
    1752:	fe 01       	movw	r30, r28
    1754:	e9 56       	subi	r30, 0x69	; 105
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a0 e0       	ldi	r26, 0x00	; 0
    175e:	b0 e4       	ldi	r27, 0x40	; 64
    1760:	80 83       	st	Z, r24
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	a2 83       	std	Z+2, r26	; 0x02
    1766:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1768:	8e 01       	movw	r16, r28
    176a:	0d 56       	subi	r16, 0x6D	; 109
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	fe 01       	movw	r30, r28
    1770:	e9 56       	subi	r30, 0x69	; 105
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a ef       	ldi	r20, 0xFA	; 250
    1782:	54 e4       	ldi	r21, 0x44	; 68
    1784:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	f8 01       	movw	r30, r16
    178e:	80 83       	st	Z, r24
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	a2 83       	std	Z+2, r26	; 0x02
    1794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1796:	fe 01       	movw	r30, r28
    1798:	ed 56       	subi	r30, 0x6D	; 109
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	44 f4       	brge	.+16     	; 0x17c4 <keypad_press+0x8b4>
		__ticks = 1;
    17b4:	fe 01       	movw	r30, r28
    17b6:	ef 56       	subi	r30, 0x6F	; 111
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
    17c2:	64 c0       	rjmp	.+200    	; 0x188c <keypad_press+0x97c>
	else if (__tmp > 65535)
    17c4:	fe 01       	movw	r30, r28
    17c6:	ed 56       	subi	r30, 0x6D	; 109
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	57 e4       	ldi	r21, 0x47	; 71
    17da:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	0c f0       	brlt	.+2      	; 0x17e4 <keypad_press+0x8d4>
    17e2:	43 c0       	rjmp	.+134    	; 0x186a <keypad_press+0x95a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e4:	fe 01       	movw	r30, r28
    17e6:	e9 56       	subi	r30, 0x69	; 105
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8e 01       	movw	r16, r28
    1804:	0f 56       	subi	r16, 0x6F	; 111
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	f8 01       	movw	r30, r16
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	1f c0       	rjmp	.+62     	; 0x185a <keypad_press+0x94a>
    181c:	fe 01       	movw	r30, r28
    181e:	e1 57       	subi	r30, 0x71	; 113
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	88 ec       	ldi	r24, 0xC8	; 200
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	fe 01       	movw	r30, r28
    182c:	e1 57       	subi	r30, 0x71	; 113
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <keypad_press+0x924>
    1838:	fe 01       	movw	r30, r28
    183a:	e1 57       	subi	r30, 0x71	; 113
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	de 01       	movw	r26, r28
    1844:	af 56       	subi	r26, 0x6F	; 111
    1846:	bf 4f       	sbci	r27, 0xFF	; 255
    1848:	fe 01       	movw	r30, r28
    184a:	ef 56       	subi	r30, 0x6F	; 111
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	11 96       	adiw	r26, 0x01	; 1
    1856:	9c 93       	st	X, r25
    1858:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	fe 01       	movw	r30, r28
    185c:	ef 56       	subi	r30, 0x6F	; 111
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	d1 f6       	brne	.-76     	; 0x181c <keypad_press+0x90c>
    1868:	28 c0       	rjmp	.+80     	; 0x18ba <keypad_press+0x9aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	8e 01       	movw	r16, r28
    186c:	0f 56       	subi	r16, 0x6F	; 111
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	fe 01       	movw	r30, r28
    1872:	ed 56       	subi	r30, 0x6D	; 109
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	f8 01       	movw	r30, r16
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    188c:	de 01       	movw	r26, r28
    188e:	a3 57       	subi	r26, 0x73	; 115
    1890:	bf 4f       	sbci	r27, 0xFF	; 255
    1892:	fe 01       	movw	r30, r28
    1894:	ef 56       	subi	r30, 0x6F	; 111
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	11 96       	adiw	r26, 0x01	; 1
    189e:	9c 93       	st	X, r25
    18a0:	8e 93       	st	-X, r24
    18a2:	fe 01       	movw	r30, r28
    18a4:	e3 57       	subi	r30, 0x73	; 115
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <keypad_press+0x99c>
    18b0:	fe 01       	movw	r30, r28
    18b2:	e3 57       	subi	r30, 0x73	; 115
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<5)));
    18ba:	e6 e3       	ldi	r30, 0x36	; 54
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	80 72       	andi	r24, 0x20	; 32
    18c6:	90 70       	andi	r25, 0x00	; 0
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	b9 f3       	breq	.-18     	; 0x18ba <keypad_press+0x9aa>
	key=6;
    18cc:	fe 01       	movw	r30, r28
    18ce:	ef 51       	subi	r30, 0x1F	; 31
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	86 e0       	ldi	r24, 0x06	; 6
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	80 83       	st	Z, r24
    18da:	95 c1       	rjmp	.+810    	; 0x1c06 <keypad_press+0xcf6>
	}
else if (!(keypad_PIN &(1<<6))){
    18dc:	e6 e3       	ldi	r30, 0x36	; 54
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	80 74       	andi	r24, 0x40	; 64
    18e8:	90 70       	andi	r25, 0x00	; 0
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <keypad_press+0x9e0>
    18ee:	c5 c0       	rjmp	.+394    	; 0x1a7a <keypad_press+0xb6a>
    18f0:	fe 01       	movw	r30, r28
    18f2:	e7 57       	subi	r30, 0x77	; 119
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e0       	ldi	r26, 0x00	; 0
    18fc:	b0 e4       	ldi	r27, 0x40	; 64
    18fe:	80 83       	st	Z, r24
    1900:	91 83       	std	Z+1, r25	; 0x01
    1902:	a2 83       	std	Z+2, r26	; 0x02
    1904:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1906:	8e 01       	movw	r16, r28
    1908:	0b 57       	subi	r16, 0x7B	; 123
    190a:	1f 4f       	sbci	r17, 0xFF	; 255
    190c:	fe 01       	movw	r30, r28
    190e:	e7 57       	subi	r30, 0x77	; 119
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	60 81       	ld	r22, Z
    1914:	71 81       	ldd	r23, Z+1	; 0x01
    1916:	82 81       	ldd	r24, Z+2	; 0x02
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	4a ef       	ldi	r20, 0xFA	; 250
    1920:	54 e4       	ldi	r21, 0x44	; 68
    1922:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	f8 01       	movw	r30, r16
    192c:	80 83       	st	Z, r24
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	a2 83       	std	Z+2, r26	; 0x02
    1932:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1934:	fe 01       	movw	r30, r28
    1936:	eb 57       	subi	r30, 0x7B	; 123
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	60 81       	ld	r22, Z
    193c:	71 81       	ldd	r23, Z+1	; 0x01
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	93 81       	ldd	r25, Z+3	; 0x03
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e8       	ldi	r20, 0x80	; 128
    1948:	5f e3       	ldi	r21, 0x3F	; 63
    194a:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    194e:	88 23       	and	r24, r24
    1950:	44 f4       	brge	.+16     	; 0x1962 <keypad_press+0xa52>
		__ticks = 1;
    1952:	fe 01       	movw	r30, r28
    1954:	ed 57       	subi	r30, 0x7D	; 125
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
    1960:	64 c0       	rjmp	.+200    	; 0x1a2a <keypad_press+0xb1a>
	else if (__tmp > 65535)
    1962:	fe 01       	movw	r30, r28
    1964:	eb 57       	subi	r30, 0x7B	; 123
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	3f ef       	ldi	r19, 0xFF	; 255
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	57 e4       	ldi	r21, 0x47	; 71
    1978:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    197c:	18 16       	cp	r1, r24
    197e:	0c f0       	brlt	.+2      	; 0x1982 <keypad_press+0xa72>
    1980:	43 c0       	rjmp	.+134    	; 0x1a08 <keypad_press+0xaf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1982:	fe 01       	movw	r30, r28
    1984:	e7 57       	subi	r30, 0x77	; 119
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	60 81       	ld	r22, Z
    198a:	71 81       	ldd	r23, Z+1	; 0x01
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	93 81       	ldd	r25, Z+3	; 0x03
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e2       	ldi	r20, 0x20	; 32
    1996:	51 e4       	ldi	r21, 0x41	; 65
    1998:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8e 01       	movw	r16, r28
    19a2:	0d 57       	subi	r16, 0x7D	; 125
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	f8 01       	movw	r30, r16
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	80 83       	st	Z, r24
    19b8:	1f c0       	rjmp	.+62     	; 0x19f8 <keypad_press+0xae8>
    19ba:	fe 01       	movw	r30, r28
    19bc:	ef 57       	subi	r30, 0x7F	; 127
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	88 ec       	ldi	r24, 0xC8	; 200
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
    19c8:	fe 01       	movw	r30, r28
    19ca:	ef 57       	subi	r30, 0x7F	; 127
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <keypad_press+0xac2>
    19d6:	fe 01       	movw	r30, r28
    19d8:	ef 57       	subi	r30, 0x7F	; 127
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e0:	de 01       	movw	r26, r28
    19e2:	ad 57       	subi	r26, 0x7D	; 125
    19e4:	bf 4f       	sbci	r27, 0xFF	; 255
    19e6:	fe 01       	movw	r30, r28
    19e8:	ed 57       	subi	r30, 0x7D	; 125
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	11 96       	adiw	r26, 0x01	; 1
    19f4:	9c 93       	st	X, r25
    19f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f8:	fe 01       	movw	r30, r28
    19fa:	ed 57       	subi	r30, 0x7D	; 125
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	d1 f6       	brne	.-76     	; 0x19ba <keypad_press+0xaaa>
    1a06:	28 c0       	rjmp	.+80     	; 0x1a58 <keypad_press+0xb48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a08:	8e 01       	movw	r16, r28
    1a0a:	0d 57       	subi	r16, 0x7D	; 125
    1a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0e:	fe 01       	movw	r30, r28
    1a10:	eb 57       	subi	r30, 0x7B	; 123
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	60 81       	ld	r22, Z
    1a16:	71 81       	ldd	r23, Z+1	; 0x01
    1a18:	82 81       	ldd	r24, Z+2	; 0x02
    1a1a:	93 81       	ldd	r25, Z+3	; 0x03
    1a1c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	f8 01       	movw	r30, r16
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
    1a2a:	de 01       	movw	r26, r28
    1a2c:	a1 58       	subi	r26, 0x81	; 129
    1a2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a30:	fe 01       	movw	r30, r28
    1a32:	ed 57       	subi	r30, 0x7D	; 125
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	11 96       	adiw	r26, 0x01	; 1
    1a3c:	9c 93       	st	X, r25
    1a3e:	8e 93       	st	-X, r24
    1a40:	fe 01       	movw	r30, r28
    1a42:	e1 58       	subi	r30, 0x81	; 129
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <keypad_press+0xb3a>
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e1 58       	subi	r30, 0x81	; 129
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<6)));
    1a58:	e6 e3       	ldi	r30, 0x36	; 54
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	80 74       	andi	r24, 0x40	; 64
    1a64:	90 70       	andi	r25, 0x00	; 0
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	b9 f3       	breq	.-18     	; 0x1a58 <keypad_press+0xb48>
	key=7;
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ef 51       	subi	r30, 0x1F	; 31
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	87 e0       	ldi	r24, 0x07	; 7
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	80 83       	st	Z, r24
    1a78:	c6 c0       	rjmp	.+396    	; 0x1c06 <keypad_press+0xcf6>
	}
else if (!(keypad_PIN &(1<<7))){
    1a7a:	e6 e3       	ldi	r30, 0x36	; 54
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	88 23       	and	r24, r24
    1a82:	0c f4       	brge	.+2      	; 0x1a86 <keypad_press+0xb76>
    1a84:	c0 c0       	rjmp	.+384    	; 0x1c06 <keypad_press+0xcf6>
    1a86:	fe 01       	movw	r30, r28
    1a88:	e5 58       	subi	r30, 0x85	; 133
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e0       	ldi	r26, 0x00	; 0
    1a92:	b0 e4       	ldi	r27, 0x40	; 64
    1a94:	80 83       	st	Z, r24
    1a96:	91 83       	std	Z+1, r25	; 0x01
    1a98:	a2 83       	std	Z+2, r26	; 0x02
    1a9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9c:	8e 01       	movw	r16, r28
    1a9e:	09 58       	subi	r16, 0x89	; 137
    1aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e5 58       	subi	r30, 0x85	; 133
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	60 81       	ld	r22, Z
    1aaa:	71 81       	ldd	r23, Z+1	; 0x01
    1aac:	82 81       	ldd	r24, Z+2	; 0x02
    1aae:	93 81       	ldd	r25, Z+3	; 0x03
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a ef       	ldi	r20, 0xFA	; 250
    1ab6:	54 e4       	ldi	r21, 0x44	; 68
    1ab8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	80 83       	st	Z, r24
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	a2 83       	std	Z+2, r26	; 0x02
    1ac8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aca:	fe 01       	movw	r30, r28
    1acc:	e9 58       	subi	r30, 0x89	; 137
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	60 81       	ld	r22, Z
    1ad2:	71 81       	ldd	r23, Z+1	; 0x01
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	93 81       	ldd	r25, Z+3	; 0x03
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e8       	ldi	r20, 0x80	; 128
    1ade:	5f e3       	ldi	r21, 0x3F	; 63
    1ae0:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1ae4:	88 23       	and	r24, r24
    1ae6:	44 f4       	brge	.+16     	; 0x1af8 <keypad_press+0xbe8>
		__ticks = 1;
    1ae8:	fe 01       	movw	r30, r28
    1aea:	eb 58       	subi	r30, 0x8B	; 139
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	91 83       	std	Z+1, r25	; 0x01
    1af4:	80 83       	st	Z, r24
    1af6:	64 c0       	rjmp	.+200    	; 0x1bc0 <keypad_press+0xcb0>
	else if (__tmp > 65535)
    1af8:	fe 01       	movw	r30, r28
    1afa:	e9 58       	subi	r30, 0x89	; 137
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	60 81       	ld	r22, Z
    1b00:	71 81       	ldd	r23, Z+1	; 0x01
    1b02:	82 81       	ldd	r24, Z+2	; 0x02
    1b04:	93 81       	ldd	r25, Z+3	; 0x03
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	3f ef       	ldi	r19, 0xFF	; 255
    1b0a:	4f e7       	ldi	r20, 0x7F	; 127
    1b0c:	57 e4       	ldi	r21, 0x47	; 71
    1b0e:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1b12:	18 16       	cp	r1, r24
    1b14:	0c f0       	brlt	.+2      	; 0x1b18 <keypad_press+0xc08>
    1b16:	43 c0       	rjmp	.+134    	; 0x1b9e <keypad_press+0xc8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	fe 01       	movw	r30, r28
    1b1a:	e5 58       	subi	r30, 0x85	; 133
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e2       	ldi	r20, 0x20	; 32
    1b2c:	51 e4       	ldi	r21, 0x41	; 65
    1b2e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	8e 01       	movw	r16, r28
    1b38:	0b 58       	subi	r16, 0x8B	; 139
    1b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	f8 01       	movw	r30, r16
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	80 83       	st	Z, r24
    1b4e:	1f c0       	rjmp	.+62     	; 0x1b8e <keypad_press+0xc7e>
    1b50:	fe 01       	movw	r30, r28
    1b52:	ed 58       	subi	r30, 0x8D	; 141
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	88 ec       	ldi	r24, 0xC8	; 200
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	91 83       	std	Z+1, r25	; 0x01
    1b5c:	80 83       	st	Z, r24
    1b5e:	fe 01       	movw	r30, r28
    1b60:	ed 58       	subi	r30, 0x8D	; 141
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	80 81       	ld	r24, Z
    1b66:	91 81       	ldd	r25, Z+1	; 0x01
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <keypad_press+0xc58>
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ed 58       	subi	r30, 0x8D	; 141
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	91 83       	std	Z+1, r25	; 0x01
    1b74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b76:	de 01       	movw	r26, r28
    1b78:	ab 58       	subi	r26, 0x8B	; 139
    1b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	eb 58       	subi	r30, 0x8B	; 139
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	80 81       	ld	r24, Z
    1b84:	91 81       	ldd	r25, Z+1	; 0x01
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	11 96       	adiw	r26, 0x01	; 1
    1b8a:	9c 93       	st	X, r25
    1b8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8e:	fe 01       	movw	r30, r28
    1b90:	eb 58       	subi	r30, 0x8B	; 139
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	d1 f6       	brne	.-76     	; 0x1b50 <keypad_press+0xc40>
    1b9c:	28 c0       	rjmp	.+80     	; 0x1bee <keypad_press+0xcde>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9e:	8e 01       	movw	r16, r28
    1ba0:	0b 58       	subi	r16, 0x8B	; 139
    1ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e9 58       	subi	r30, 0x89	; 137
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	f8 01       	movw	r30, r16
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	80 83       	st	Z, r24
    1bc0:	de 01       	movw	r26, r28
    1bc2:	af 58       	subi	r26, 0x8F	; 143
    1bc4:	bf 4f       	sbci	r27, 0xFF	; 255
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	eb 58       	subi	r30, 0x8B	; 139
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	80 81       	ld	r24, Z
    1bce:	91 81       	ldd	r25, Z+1	; 0x01
    1bd0:	11 96       	adiw	r26, 0x01	; 1
    1bd2:	9c 93       	st	X, r25
    1bd4:	8e 93       	st	-X, r24
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	ef 58       	subi	r30, 0x8F	; 143
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	80 81       	ld	r24, Z
    1bde:	91 81       	ldd	r25, Z+1	; 0x01
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <keypad_press+0xcd0>
    1be4:	fe 01       	movw	r30, r28
    1be6:	ef 58       	subi	r30, 0x8F	; 143
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<7)));
    1bee:	e6 e3       	ldi	r30, 0x36	; 54
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	88 23       	and	r24, r24
    1bf6:	dc f7       	brge	.-10     	; 0x1bee <keypad_press+0xcde>
	key=8;
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ef 51       	subi	r30, 0x1F	; 31
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	88 e0       	ldi	r24, 0x08	; 8
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	91 83       	std	Z+1, r25	; 0x01
    1c04:	80 83       	st	Z, r24
	}
keypad_PORT=0XFB;
    1c06:	e8 e3       	ldi	r30, 0x38	; 56
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	8b ef       	ldi	r24, 0xFB	; 251
    1c0c:	80 83       	st	Z, r24
if (!(keypad_PIN &(1<<4))){
    1c0e:	e6 e3       	ldi	r30, 0x36	; 54
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	80 71       	andi	r24, 0x10	; 16
    1c1a:	90 70       	andi	r25, 0x00	; 0
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <keypad_press+0xd12>
    1c20:	c5 c0       	rjmp	.+394    	; 0x1dac <keypad_press+0xe9c>
    1c22:	fe 01       	movw	r30, r28
    1c24:	e3 59       	subi	r30, 0x93	; 147
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 e0       	ldi	r26, 0x00	; 0
    1c2e:	b0 e4       	ldi	r27, 0x40	; 64
    1c30:	80 83       	st	Z, r24
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	a2 83       	std	Z+2, r26	; 0x02
    1c36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c38:	8e 01       	movw	r16, r28
    1c3a:	07 59       	subi	r16, 0x97	; 151
    1c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e3 59       	subi	r30, 0x93	; 147
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	60 81       	ld	r22, Z
    1c46:	71 81       	ldd	r23, Z+1	; 0x01
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	4a ef       	ldi	r20, 0xFA	; 250
    1c52:	54 e4       	ldi	r21, 0x44	; 68
    1c54:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	80 83       	st	Z, r24
    1c60:	91 83       	std	Z+1, r25	; 0x01
    1c62:	a2 83       	std	Z+2, r26	; 0x02
    1c64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c66:	fe 01       	movw	r30, r28
    1c68:	e7 59       	subi	r30, 0x97	; 151
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	60 81       	ld	r22, Z
    1c6e:	71 81       	ldd	r23, Z+1	; 0x01
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	93 81       	ldd	r25, Z+3	; 0x03
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	40 e8       	ldi	r20, 0x80	; 128
    1c7a:	5f e3       	ldi	r21, 0x3F	; 63
    1c7c:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1c80:	88 23       	and	r24, r24
    1c82:	44 f4       	brge	.+16     	; 0x1c94 <keypad_press+0xd84>
		__ticks = 1;
    1c84:	fe 01       	movw	r30, r28
    1c86:	e9 59       	subi	r30, 0x99	; 153
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	80 83       	st	Z, r24
    1c92:	64 c0       	rjmp	.+200    	; 0x1d5c <keypad_press+0xe4c>
	else if (__tmp > 65535)
    1c94:	fe 01       	movw	r30, r28
    1c96:	e7 59       	subi	r30, 0x97	; 151
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	60 81       	ld	r22, Z
    1c9c:	71 81       	ldd	r23, Z+1	; 0x01
    1c9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ca0:	93 81       	ldd	r25, Z+3	; 0x03
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	3f ef       	ldi	r19, 0xFF	; 255
    1ca6:	4f e7       	ldi	r20, 0x7F	; 127
    1ca8:	57 e4       	ldi	r21, 0x47	; 71
    1caa:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1cae:	18 16       	cp	r1, r24
    1cb0:	0c f0       	brlt	.+2      	; 0x1cb4 <keypad_press+0xda4>
    1cb2:	43 c0       	rjmp	.+134    	; 0x1d3a <keypad_press+0xe2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e3 59       	subi	r30, 0x93	; 147
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8e 01       	movw	r16, r28
    1cd4:	09 59       	subi	r16, 0x99	; 153
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	80 83       	st	Z, r24
    1cea:	1f c0       	rjmp	.+62     	; 0x1d2a <keypad_press+0xe1a>
    1cec:	fe 01       	movw	r30, r28
    1cee:	eb 59       	subi	r30, 0x9B	; 155
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	88 ec       	ldi	r24, 0xC8	; 200
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	91 83       	std	Z+1, r25	; 0x01
    1cf8:	80 83       	st	Z, r24
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	eb 59       	subi	r30, 0x9B	; 155
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	80 81       	ld	r24, Z
    1d02:	91 81       	ldd	r25, Z+1	; 0x01
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <keypad_press+0xdf4>
    1d08:	fe 01       	movw	r30, r28
    1d0a:	eb 59       	subi	r30, 0x9B	; 155
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d12:	de 01       	movw	r26, r28
    1d14:	a9 59       	subi	r26, 0x99	; 153
    1d16:	bf 4f       	sbci	r27, 0xFF	; 255
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e9 59       	subi	r30, 0x99	; 153
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	11 96       	adiw	r26, 0x01	; 1
    1d26:	9c 93       	st	X, r25
    1d28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e9 59       	subi	r30, 0x99	; 153
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	80 81       	ld	r24, Z
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	d1 f6       	brne	.-76     	; 0x1cec <keypad_press+0xddc>
    1d38:	28 c0       	rjmp	.+80     	; 0x1d8a <keypad_press+0xe7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	8e 01       	movw	r16, r28
    1d3c:	09 59       	subi	r16, 0x99	; 153
    1d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d40:	fe 01       	movw	r30, r28
    1d42:	e7 59       	subi	r30, 0x97	; 151
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	60 81       	ld	r22, Z
    1d48:	71 81       	ldd	r23, Z+1	; 0x01
    1d4a:	82 81       	ldd	r24, Z+2	; 0x02
    1d4c:	93 81       	ldd	r25, Z+3	; 0x03
    1d4e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	f8 01       	movw	r30, r16
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	80 83       	st	Z, r24
    1d5c:	de 01       	movw	r26, r28
    1d5e:	ad 59       	subi	r26, 0x9D	; 157
    1d60:	bf 4f       	sbci	r27, 0xFF	; 255
    1d62:	fe 01       	movw	r30, r28
    1d64:	e9 59       	subi	r30, 0x99	; 153
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	91 81       	ldd	r25, Z+1	; 0x01
    1d6c:	11 96       	adiw	r26, 0x01	; 1
    1d6e:	9c 93       	st	X, r25
    1d70:	8e 93       	st	-X, r24
    1d72:	fe 01       	movw	r30, r28
    1d74:	ed 59       	subi	r30, 0x9D	; 157
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <keypad_press+0xe6c>
    1d80:	fe 01       	movw	r30, r28
    1d82:	ed 59       	subi	r30, 0x9D	; 157
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
_delay_ms(2);
while(!(keypad_PIN &(1<<4)));
    1d8a:	e6 e3       	ldi	r30, 0x36	; 54
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	80 71       	andi	r24, 0x10	; 16
    1d96:	90 70       	andi	r25, 0x00	; 0
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	b9 f3       	breq	.-18     	; 0x1d8a <keypad_press+0xe7a>
key=9;
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	ef 51       	subi	r30, 0x1F	; 31
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	89 e0       	ldi	r24, 0x09	; 9
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	80 83       	st	Z, r24
    1daa:	35 c2       	rjmp	.+1130   	; 0x2216 <keypad_press+0x1306>
}
else if (!(keypad_PIN &(1<<5))){
    1dac:	e6 e3       	ldi	r30, 0x36	; 54
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	80 72       	andi	r24, 0x20	; 32
    1db8:	90 70       	andi	r25, 0x00	; 0
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <keypad_press+0xeb0>
    1dbe:	c5 c0       	rjmp	.+394    	; 0x1f4a <keypad_press+0x103a>
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e1 5a       	subi	r30, 0xA1	; 161
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 e0       	ldi	r26, 0x00	; 0
    1dcc:	b0 e4       	ldi	r27, 0x40	; 64
    1dce:	80 83       	st	Z, r24
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	a2 83       	std	Z+2, r26	; 0x02
    1dd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	8e 01       	movw	r16, r28
    1dd8:	05 5a       	subi	r16, 0xA5	; 165
    1dda:	1f 4f       	sbci	r17, 0xFF	; 255
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e1 5a       	subi	r30, 0xA1	; 161
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	60 81       	ld	r22, Z
    1de4:	71 81       	ldd	r23, Z+1	; 0x01
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	93 81       	ldd	r25, Z+3	; 0x03
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a ef       	ldi	r20, 0xFA	; 250
    1df0:	54 e4       	ldi	r21, 0x44	; 68
    1df2:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	80 83       	st	Z, r24
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	a2 83       	std	Z+2, r26	; 0x02
    1e02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e04:	fe 01       	movw	r30, r28
    1e06:	e5 5a       	subi	r30, 0xA5	; 165
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	60 81       	ld	r22, Z
    1e0c:	71 81       	ldd	r23, Z+1	; 0x01
    1e0e:	82 81       	ldd	r24, Z+2	; 0x02
    1e10:	93 81       	ldd	r25, Z+3	; 0x03
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e8       	ldi	r20, 0x80	; 128
    1e18:	5f e3       	ldi	r21, 0x3F	; 63
    1e1a:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1e1e:	88 23       	and	r24, r24
    1e20:	44 f4       	brge	.+16     	; 0x1e32 <keypad_press+0xf22>
		__ticks = 1;
    1e22:	fe 01       	movw	r30, r28
    1e24:	e7 5a       	subi	r30, 0xA7	; 167
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	80 83       	st	Z, r24
    1e30:	64 c0       	rjmp	.+200    	; 0x1efa <keypad_press+0xfea>
	else if (__tmp > 65535)
    1e32:	fe 01       	movw	r30, r28
    1e34:	e5 5a       	subi	r30, 0xA5	; 165
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	0c f0       	brlt	.+2      	; 0x1e52 <keypad_press+0xf42>
    1e50:	43 c0       	rjmp	.+134    	; 0x1ed8 <keypad_press+0xfc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e52:	fe 01       	movw	r30, r28
    1e54:	e1 5a       	subi	r30, 0xA1	; 161
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e2       	ldi	r20, 0x20	; 32
    1e66:	51 e4       	ldi	r21, 0x41	; 65
    1e68:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	8e 01       	movw	r16, r28
    1e72:	07 5a       	subi	r16, 0xA7	; 167
    1e74:	1f 4f       	sbci	r17, 0xFF	; 255
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	f8 01       	movw	r30, r16
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	80 83       	st	Z, r24
    1e88:	1f c0       	rjmp	.+62     	; 0x1ec8 <keypad_press+0xfb8>
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	e9 5a       	subi	r30, 0xA9	; 169
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	88 ec       	ldi	r24, 0xC8	; 200
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	80 83       	st	Z, r24
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e9 5a       	subi	r30, 0xA9	; 169
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	80 81       	ld	r24, Z
    1ea0:	91 81       	ldd	r25, Z+1	; 0x01
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <keypad_press+0xf92>
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	e9 5a       	subi	r30, 0xA9	; 169
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb0:	de 01       	movw	r26, r28
    1eb2:	a7 5a       	subi	r26, 0xA7	; 167
    1eb4:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	e7 5a       	subi	r30, 0xA7	; 167
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	11 96       	adiw	r26, 0x01	; 1
    1ec4:	9c 93       	st	X, r25
    1ec6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e7 5a       	subi	r30, 0xA7	; 167
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	80 81       	ld	r24, Z
    1ed0:	91 81       	ldd	r25, Z+1	; 0x01
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	d1 f6       	brne	.-76     	; 0x1e8a <keypad_press+0xf7a>
    1ed6:	28 c0       	rjmp	.+80     	; 0x1f28 <keypad_press+0x1018>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed8:	8e 01       	movw	r16, r28
    1eda:	07 5a       	subi	r16, 0xA7	; 167
    1edc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e5 5a       	subi	r30, 0xA5	; 165
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	60 81       	ld	r22, Z
    1ee6:	71 81       	ldd	r23, Z+1	; 0x01
    1ee8:	82 81       	ldd	r24, Z+2	; 0x02
    1eea:	93 81       	ldd	r25, Z+3	; 0x03
    1eec:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	80 83       	st	Z, r24
    1efa:	de 01       	movw	r26, r28
    1efc:	ab 5a       	subi	r26, 0xAB	; 171
    1efe:	bf 4f       	sbci	r27, 0xFF	; 255
    1f00:	fe 01       	movw	r30, r28
    1f02:	e7 5a       	subi	r30, 0xA7	; 167
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	80 81       	ld	r24, Z
    1f08:	91 81       	ldd	r25, Z+1	; 0x01
    1f0a:	11 96       	adiw	r26, 0x01	; 1
    1f0c:	9c 93       	st	X, r25
    1f0e:	8e 93       	st	-X, r24
    1f10:	fe 01       	movw	r30, r28
    1f12:	eb 5a       	subi	r30, 0xAB	; 171
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <keypad_press+0x100a>
    1f1e:	fe 01       	movw	r30, r28
    1f20:	eb 5a       	subi	r30, 0xAB	; 171
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<5)));
    1f28:	e6 e3       	ldi	r30, 0x36	; 54
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	88 2f       	mov	r24, r24
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	80 72       	andi	r24, 0x20	; 32
    1f34:	90 70       	andi	r25, 0x00	; 0
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	b9 f3       	breq	.-18     	; 0x1f28 <keypad_press+0x1018>
	key=10;
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ef 51       	subi	r30, 0x1F	; 31
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	8a e0       	ldi	r24, 0x0A	; 10
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	91 83       	std	Z+1, r25	; 0x01
    1f46:	80 83       	st	Z, r24
    1f48:	66 c1       	rjmp	.+716    	; 0x2216 <keypad_press+0x1306>
	}
else if (!(keypad_PIN &(1<<6))){
    1f4a:	e6 e3       	ldi	r30, 0x36	; 54
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	88 2f       	mov	r24, r24
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	80 74       	andi	r24, 0x40	; 64
    1f56:	90 70       	andi	r25, 0x00	; 0
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <keypad_press+0x104e>
    1f5c:	c5 c0       	rjmp	.+394    	; 0x20e8 <keypad_press+0x11d8>
    1f5e:	fe 01       	movw	r30, r28
    1f60:	ef 5a       	subi	r30, 0xAF	; 175
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e0       	ldi	r26, 0x00	; 0
    1f6a:	b0 e4       	ldi	r27, 0x40	; 64
    1f6c:	80 83       	st	Z, r24
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	a2 83       	std	Z+2, r26	; 0x02
    1f72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f74:	8e 01       	movw	r16, r28
    1f76:	03 5b       	subi	r16, 0xB3	; 179
    1f78:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	ef 5a       	subi	r30, 0xAF	; 175
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a ef       	ldi	r20, 0xFA	; 250
    1f8e:	54 e4       	ldi	r21, 0x44	; 68
    1f90:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	f8 01       	movw	r30, r16
    1f9a:	80 83       	st	Z, r24
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	a2 83       	std	Z+2, r26	; 0x02
    1fa0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e3 5b       	subi	r30, 0xB3	; 179
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	60 81       	ld	r22, Z
    1faa:	71 81       	ldd	r23, Z+1	; 0x01
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e8       	ldi	r20, 0x80	; 128
    1fb6:	5f e3       	ldi	r21, 0x3F	; 63
    1fb8:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	44 f4       	brge	.+16     	; 0x1fd0 <keypad_press+0x10c0>
		__ticks = 1;
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e5 5b       	subi	r30, 0xB5	; 181
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	91 83       	std	Z+1, r25	; 0x01
    1fcc:	80 83       	st	Z, r24
    1fce:	64 c0       	rjmp	.+200    	; 0x2098 <keypad_press+0x1188>
	else if (__tmp > 65535)
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e3 5b       	subi	r30, 0xB3	; 179
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	3f ef       	ldi	r19, 0xFF	; 255
    1fe2:	4f e7       	ldi	r20, 0x7F	; 127
    1fe4:	57 e4       	ldi	r21, 0x47	; 71
    1fe6:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	0c f0       	brlt	.+2      	; 0x1ff0 <keypad_press+0x10e0>
    1fee:	43 c0       	rjmp	.+134    	; 0x2076 <keypad_press+0x1166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	ef 5a       	subi	r30, 0xAF	; 175
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	60 81       	ld	r22, Z
    1ff8:	71 81       	ldd	r23, Z+1	; 0x01
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e2       	ldi	r20, 0x20	; 32
    2004:	51 e4       	ldi	r21, 0x41	; 65
    2006:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	8e 01       	movw	r16, r28
    2010:	05 5b       	subi	r16, 0xB5	; 181
    2012:	1f 4f       	sbci	r17, 0xFF	; 255
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	f8 01       	movw	r30, r16
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
    2026:	1f c0       	rjmp	.+62     	; 0x2066 <keypad_press+0x1156>
    2028:	fe 01       	movw	r30, r28
    202a:	e7 5b       	subi	r30, 0xB7	; 183
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	88 ec       	ldi	r24, 0xC8	; 200
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	91 83       	std	Z+1, r25	; 0x01
    2034:	80 83       	st	Z, r24
    2036:	fe 01       	movw	r30, r28
    2038:	e7 5b       	subi	r30, 0xB7	; 183
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <keypad_press+0x1130>
    2044:	fe 01       	movw	r30, r28
    2046:	e7 5b       	subi	r30, 0xB7	; 183
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204e:	de 01       	movw	r26, r28
    2050:	a5 5b       	subi	r26, 0xB5	; 181
    2052:	bf 4f       	sbci	r27, 0xFF	; 255
    2054:	fe 01       	movw	r30, r28
    2056:	e5 5b       	subi	r30, 0xB5	; 181
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	11 96       	adiw	r26, 0x01	; 1
    2062:	9c 93       	st	X, r25
    2064:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2066:	fe 01       	movw	r30, r28
    2068:	e5 5b       	subi	r30, 0xB5	; 181
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	91 81       	ldd	r25, Z+1	; 0x01
    2070:	00 97       	sbiw	r24, 0x00	; 0
    2072:	d1 f6       	brne	.-76     	; 0x2028 <keypad_press+0x1118>
    2074:	28 c0       	rjmp	.+80     	; 0x20c6 <keypad_press+0x11b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2076:	8e 01       	movw	r16, r28
    2078:	05 5b       	subi	r16, 0xB5	; 181
    207a:	1f 4f       	sbci	r17, 0xFF	; 255
    207c:	fe 01       	movw	r30, r28
    207e:	e3 5b       	subi	r30, 0xB3	; 179
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	60 81       	ld	r22, Z
    2084:	71 81       	ldd	r23, Z+1	; 0x01
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	f8 01       	movw	r30, r16
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	80 83       	st	Z, r24
    2098:	de 01       	movw	r26, r28
    209a:	a9 5b       	subi	r26, 0xB9	; 185
    209c:	bf 4f       	sbci	r27, 0xFF	; 255
    209e:	fe 01       	movw	r30, r28
    20a0:	e5 5b       	subi	r30, 0xB5	; 181
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	11 96       	adiw	r26, 0x01	; 1
    20aa:	9c 93       	st	X, r25
    20ac:	8e 93       	st	-X, r24
    20ae:	fe 01       	movw	r30, r28
    20b0:	e9 5b       	subi	r30, 0xB9	; 185
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 81       	ld	r24, Z
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <keypad_press+0x11a8>
    20bc:	fe 01       	movw	r30, r28
    20be:	e9 5b       	subi	r30, 0xB9	; 185
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	80 83       	st	Z, r24
	_delay_ms(2);
	while(!(keypad_PIN &(1<<6)));
    20c6:	e6 e3       	ldi	r30, 0x36	; 54
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	88 2f       	mov	r24, r24
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	80 74       	andi	r24, 0x40	; 64
    20d2:	90 70       	andi	r25, 0x00	; 0
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	b9 f3       	breq	.-18     	; 0x20c6 <keypad_press+0x11b6>
	key=11;
    20d8:	fe 01       	movw	r30, r28
    20da:	ef 51       	subi	r30, 0x1F	; 31
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	8b e0       	ldi	r24, 0x0B	; 11
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	91 83       	std	Z+1, r25	; 0x01
    20e4:	80 83       	st	Z, r24
    20e6:	97 c0       	rjmp	.+302    	; 0x2216 <keypad_press+0x1306>
	}
else if (!(keypad_PIN &(1<<7))){
    20e8:	e6 e3       	ldi	r30, 0x36	; 54
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	88 23       	and	r24, r24
    20f0:	0c f4       	brge	.+2      	; 0x20f4 <keypad_press+0x11e4>
    20f2:	91 c0       	rjmp	.+290    	; 0x2216 <keypad_press+0x1306>
    20f4:	fe 01       	movw	r30, r28
    20f6:	ed 5b       	subi	r30, 0xBD	; 189
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	a0 e0       	ldi	r26, 0x00	; 0
    2100:	b0 e4       	ldi	r27, 0x40	; 64
    2102:	80 83       	st	Z, r24
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	a2 83       	std	Z+2, r26	; 0x02
    2108:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210a:	8e 01       	movw	r16, r28
    210c:	01 5c       	subi	r16, 0xC1	; 193
    210e:	1f 4f       	sbci	r17, 0xFF	; 255
    2110:	fe 01       	movw	r30, r28
    2112:	ed 5b       	subi	r30, 0xBD	; 189
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	60 81       	ld	r22, Z
    2118:	71 81       	ldd	r23, Z+1	; 0x01
    211a:	82 81       	ldd	r24, Z+2	; 0x02
    211c:	93 81       	ldd	r25, Z+3	; 0x03
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	4a ef       	ldi	r20, 0xFA	; 250
    2124:	54 e4       	ldi	r21, 0x44	; 68
    2126:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	f8 01       	movw	r30, r16
    2130:	80 83       	st	Z, r24
    2132:	91 83       	std	Z+1, r25	; 0x01
    2134:	a2 83       	std	Z+2, r26	; 0x02
    2136:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2138:	fe 01       	movw	r30, r28
    213a:	ff 96       	adiw	r30, 0x3f	; 63
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e8       	ldi	r20, 0x80	; 128
    214a:	5f e3       	ldi	r21, 0x3F	; 63
    214c:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2150:	88 23       	and	r24, r24
    2152:	2c f4       	brge	.+10     	; 0x215e <keypad_press+0x124e>
		__ticks = 1;
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	9e af       	std	Y+62, r25	; 0x3e
    215a:	8d af       	std	Y+61, r24	; 0x3d
    215c:	46 c0       	rjmp	.+140    	; 0x21ea <keypad_press+0x12da>
	else if (__tmp > 65535)
    215e:	fe 01       	movw	r30, r28
    2160:	ff 96       	adiw	r30, 0x3f	; 63
    2162:	60 81       	ld	r22, Z
    2164:	71 81       	ldd	r23, Z+1	; 0x01
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	93 81       	ldd	r25, Z+3	; 0x03
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	3f ef       	ldi	r19, 0xFF	; 255
    216e:	4f e7       	ldi	r20, 0x7F	; 127
    2170:	57 e4       	ldi	r21, 0x47	; 71
    2172:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2176:	18 16       	cp	r1, r24
    2178:	64 f5       	brge	.+88     	; 0x21d2 <keypad_press+0x12c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217a:	fe 01       	movw	r30, r28
    217c:	ed 5b       	subi	r30, 0xBD	; 189
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e2       	ldi	r20, 0x20	; 32
    218e:	51 e4       	ldi	r21, 0x41	; 65
    2190:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9e af       	std	Y+62, r25	; 0x3e
    21a6:	8d af       	std	Y+61, r24	; 0x3d
    21a8:	0f c0       	rjmp	.+30     	; 0x21c8 <keypad_press+0x12b8>
    21aa:	88 ec       	ldi	r24, 0xC8	; 200
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	9c af       	std	Y+60, r25	; 0x3c
    21b0:	8b af       	std	Y+59, r24	; 0x3b
    21b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    21b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <keypad_press+0x12a6>
    21ba:	9c af       	std	Y+60, r25	; 0x3c
    21bc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21be:	8d ad       	ldd	r24, Y+61	; 0x3d
    21c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	9e af       	std	Y+62, r25	; 0x3e
    21c6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    21ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	69 f7       	brne	.-38     	; 0x21aa <keypad_press+0x129a>
    21d0:	16 c0       	rjmp	.+44     	; 0x21fe <keypad_press+0x12ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d2:	fe 01       	movw	r30, r28
    21d4:	ff 96       	adiw	r30, 0x3f	; 63
    21d6:	60 81       	ld	r22, Z
    21d8:	71 81       	ldd	r23, Z+1	; 0x01
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	93 81       	ldd	r25, Z+3	; 0x03
    21de:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9e af       	std	Y+62, r25	; 0x3e
    21e8:	8d af       	std	Y+61, r24	; 0x3d
    21ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    21ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    21ee:	9a af       	std	Y+58, r25	; 0x3a
    21f0:	89 af       	std	Y+57, r24	; 0x39
    21f2:	89 ad       	ldd	r24, Y+57	; 0x39
    21f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <keypad_press+0x12e6>
    21fa:	9a af       	std	Y+58, r25	; 0x3a
    21fc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	while(!(keypad_PIN &(1<<7)));
    21fe:	e6 e3       	ldi	r30, 0x36	; 54
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	88 23       	and	r24, r24
    2206:	dc f7       	brge	.-10     	; 0x21fe <keypad_press+0x12ee>
	key=12;
    2208:	fe 01       	movw	r30, r28
    220a:	ef 51       	subi	r30, 0x1F	; 31
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	8c e0       	ldi	r24, 0x0C	; 12
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	91 83       	std	Z+1, r25	; 0x01
    2214:	80 83       	st	Z, r24
	}
keypad_PORT=0XF7;
    2216:	e8 e3       	ldi	r30, 0x38	; 56
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	87 ef       	ldi	r24, 0xF7	; 247
    221c:	80 83       	st	Z, r24
if (!(keypad_PIN &(1<<4))){
    221e:	e6 e3       	ldi	r30, 0x36	; 54
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	88 2f       	mov	r24, r24
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	80 71       	andi	r24, 0x10	; 16
    222a:	90 70       	andi	r25, 0x00	; 0
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	09 f0       	breq	.+2      	; 0x2232 <keypad_press+0x1322>
    2230:	83 c0       	rjmp	.+262    	; 0x2338 <keypad_press+0x1428>
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	a0 e0       	ldi	r26, 0x00	; 0
    2238:	b0 e4       	ldi	r27, 0x40	; 64
    223a:	8d ab       	std	Y+53, r24	; 0x35
    223c:	9e ab       	std	Y+54, r25	; 0x36
    223e:	af ab       	std	Y+55, r26	; 0x37
    2240:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2242:	6d a9       	ldd	r22, Y+53	; 0x35
    2244:	7e a9       	ldd	r23, Y+54	; 0x36
    2246:	8f a9       	ldd	r24, Y+55	; 0x37
    2248:	98 ad       	ldd	r25, Y+56	; 0x38
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	4a ef       	ldi	r20, 0xFA	; 250
    2250:	54 e4       	ldi	r21, 0x44	; 68
    2252:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	89 ab       	std	Y+49, r24	; 0x31
    225c:	9a ab       	std	Y+50, r25	; 0x32
    225e:	ab ab       	std	Y+51, r26	; 0x33
    2260:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2262:	69 a9       	ldd	r22, Y+49	; 0x31
    2264:	7a a9       	ldd	r23, Y+50	; 0x32
    2266:	8b a9       	ldd	r24, Y+51	; 0x33
    2268:	9c a9       	ldd	r25, Y+52	; 0x34
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e8       	ldi	r20, 0x80	; 128
    2270:	5f e3       	ldi	r21, 0x3F	; 63
    2272:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2276:	88 23       	and	r24, r24
    2278:	2c f4       	brge	.+10     	; 0x2284 <keypad_press+0x1374>
		__ticks = 1;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	98 ab       	std	Y+48, r25	; 0x30
    2280:	8f a7       	std	Y+47, r24	; 0x2f
    2282:	3f c0       	rjmp	.+126    	; 0x2302 <keypad_press+0x13f2>
	else if (__tmp > 65535)
    2284:	69 a9       	ldd	r22, Y+49	; 0x31
    2286:	7a a9       	ldd	r23, Y+50	; 0x32
    2288:	8b a9       	ldd	r24, Y+51	; 0x33
    228a:	9c a9       	ldd	r25, Y+52	; 0x34
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	3f ef       	ldi	r19, 0xFF	; 255
    2290:	4f e7       	ldi	r20, 0x7F	; 127
    2292:	57 e4       	ldi	r21, 0x47	; 71
    2294:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2298:	18 16       	cp	r1, r24
    229a:	4c f5       	brge	.+82     	; 0x22ee <keypad_press+0x13de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229c:	6d a9       	ldd	r22, Y+53	; 0x35
    229e:	7e a9       	ldd	r23, Y+54	; 0x36
    22a0:	8f a9       	ldd	r24, Y+55	; 0x37
    22a2:	98 ad       	ldd	r25, Y+56	; 0x38
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	40 e2       	ldi	r20, 0x20	; 32
    22aa:	51 e4       	ldi	r21, 0x41	; 65
    22ac:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	bc 01       	movw	r22, r24
    22b6:	cd 01       	movw	r24, r26
    22b8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	98 ab       	std	Y+48, r25	; 0x30
    22c2:	8f a7       	std	Y+47, r24	; 0x2f
    22c4:	0f c0       	rjmp	.+30     	; 0x22e4 <keypad_press+0x13d4>
    22c6:	88 ec       	ldi	r24, 0xC8	; 200
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	9e a7       	std	Y+46, r25	; 0x2e
    22cc:	8d a7       	std	Y+45, r24	; 0x2d
    22ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    22d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <keypad_press+0x13c2>
    22d6:	9e a7       	std	Y+46, r25	; 0x2e
    22d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22da:	8f a5       	ldd	r24, Y+47	; 0x2f
    22dc:	98 a9       	ldd	r25, Y+48	; 0x30
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	98 ab       	std	Y+48, r25	; 0x30
    22e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e6:	98 a9       	ldd	r25, Y+48	; 0x30
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	69 f7       	brne	.-38     	; 0x22c6 <keypad_press+0x13b6>
    22ec:	14 c0       	rjmp	.+40     	; 0x2316 <keypad_press+0x1406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ee:	69 a9       	ldd	r22, Y+49	; 0x31
    22f0:	7a a9       	ldd	r23, Y+50	; 0x32
    22f2:	8b a9       	ldd	r24, Y+51	; 0x33
    22f4:	9c a9       	ldd	r25, Y+52	; 0x34
    22f6:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	98 ab       	std	Y+48, r25	; 0x30
    2300:	8f a7       	std	Y+47, r24	; 0x2f
    2302:	8f a5       	ldd	r24, Y+47	; 0x2f
    2304:	98 a9       	ldd	r25, Y+48	; 0x30
    2306:	9c a7       	std	Y+44, r25	; 0x2c
    2308:	8b a7       	std	Y+43, r24	; 0x2b
    230a:	8b a5       	ldd	r24, Y+43	; 0x2b
    230c:	9c a5       	ldd	r25, Y+44	; 0x2c
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <keypad_press+0x13fe>
    2312:	9c a7       	std	Y+44, r25	; 0x2c
    2314:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(2);
while(!(keypad_PIN &(1<<4)));
    2316:	e6 e3       	ldi	r30, 0x36	; 54
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	88 2f       	mov	r24, r24
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	80 71       	andi	r24, 0x10	; 16
    2322:	90 70       	andi	r25, 0x00	; 0
    2324:	00 97       	sbiw	r24, 0x00	; 0
    2326:	b9 f3       	breq	.-18     	; 0x2316 <keypad_press+0x1406>
key=13;
    2328:	fe 01       	movw	r30, r28
    232a:	ef 51       	subi	r30, 0x1F	; 31
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	8d e0       	ldi	r24, 0x0D	; 13
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
    2336:	9e c1       	rjmp	.+828    	; 0x2674 <keypad_press+0x1764>
}
else if (!(keypad_PIN &(1<<5))){
    2338:	e6 e3       	ldi	r30, 0x36	; 54
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	80 72       	andi	r24, 0x20	; 32
    2344:	90 70       	andi	r25, 0x00	; 0
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	09 f0       	breq	.+2      	; 0x234c <keypad_press+0x143c>
    234a:	83 c0       	rjmp	.+262    	; 0x2452 <keypad_press+0x1542>
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e4       	ldi	r27, 0x40	; 64
    2354:	8f a3       	std	Y+39, r24	; 0x27
    2356:	98 a7       	std	Y+40, r25	; 0x28
    2358:	a9 a7       	std	Y+41, r26	; 0x29
    235a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235c:	6f a1       	ldd	r22, Y+39	; 0x27
    235e:	78 a5       	ldd	r23, Y+40	; 0x28
    2360:	89 a5       	ldd	r24, Y+41	; 0x29
    2362:	9a a5       	ldd	r25, Y+42	; 0x2a
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4a ef       	ldi	r20, 0xFA	; 250
    236a:	54 e4       	ldi	r21, 0x44	; 68
    236c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	8b a3       	std	Y+35, r24	; 0x23
    2376:	9c a3       	std	Y+36, r25	; 0x24
    2378:	ad a3       	std	Y+37, r26	; 0x25
    237a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    237c:	6b a1       	ldd	r22, Y+35	; 0x23
    237e:	7c a1       	ldd	r23, Y+36	; 0x24
    2380:	8d a1       	ldd	r24, Y+37	; 0x25
    2382:	9e a1       	ldd	r25, Y+38	; 0x26
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e8       	ldi	r20, 0x80	; 128
    238a:	5f e3       	ldi	r21, 0x3F	; 63
    238c:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2390:	88 23       	and	r24, r24
    2392:	2c f4       	brge	.+10     	; 0x239e <keypad_press+0x148e>
		__ticks = 1;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9a a3       	std	Y+34, r25	; 0x22
    239a:	89 a3       	std	Y+33, r24	; 0x21
    239c:	3f c0       	rjmp	.+126    	; 0x241c <keypad_press+0x150c>
	else if (__tmp > 65535)
    239e:	6b a1       	ldd	r22, Y+35	; 0x23
    23a0:	7c a1       	ldd	r23, Y+36	; 0x24
    23a2:	8d a1       	ldd	r24, Y+37	; 0x25
    23a4:	9e a1       	ldd	r25, Y+38	; 0x26
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	57 e4       	ldi	r21, 0x47	; 71
    23ae:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	4c f5       	brge	.+82     	; 0x2408 <keypad_press+0x14f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b6:	6f a1       	ldd	r22, Y+39	; 0x27
    23b8:	78 a5       	ldd	r23, Y+40	; 0x28
    23ba:	89 a5       	ldd	r24, Y+41	; 0x29
    23bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9a a3       	std	Y+34, r25	; 0x22
    23dc:	89 a3       	std	Y+33, r24	; 0x21
    23de:	0f c0       	rjmp	.+30     	; 0x23fe <keypad_press+0x14ee>
    23e0:	88 ec       	ldi	r24, 0xC8	; 200
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	98 a3       	std	Y+32, r25	; 0x20
    23e6:	8f 8f       	std	Y+31, r24	; 0x1f
    23e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23ea:	98 a1       	ldd	r25, Y+32	; 0x20
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <keypad_press+0x14dc>
    23f0:	98 a3       	std	Y+32, r25	; 0x20
    23f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f4:	89 a1       	ldd	r24, Y+33	; 0x21
    23f6:	9a a1       	ldd	r25, Y+34	; 0x22
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	9a a3       	std	Y+34, r25	; 0x22
    23fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2400:	9a a1       	ldd	r25, Y+34	; 0x22
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	69 f7       	brne	.-38     	; 0x23e0 <keypad_press+0x14d0>
    2406:	14 c0       	rjmp	.+40     	; 0x2430 <keypad_press+0x1520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2408:	6b a1       	ldd	r22, Y+35	; 0x23
    240a:	7c a1       	ldd	r23, Y+36	; 0x24
    240c:	8d a1       	ldd	r24, Y+37	; 0x25
    240e:	9e a1       	ldd	r25, Y+38	; 0x26
    2410:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9a a3       	std	Y+34, r25	; 0x22
    241a:	89 a3       	std	Y+33, r24	; 0x21
    241c:	89 a1       	ldd	r24, Y+33	; 0x21
    241e:	9a a1       	ldd	r25, Y+34	; 0x22
    2420:	9e 8f       	std	Y+30, r25	; 0x1e
    2422:	8d 8f       	std	Y+29, r24	; 0x1d
    2424:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2426:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <keypad_press+0x1518>
    242c:	9e 8f       	std	Y+30, r25	; 0x1e
    242e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	while(!(keypad_PIN &(1<<5)));
    2430:	e6 e3       	ldi	r30, 0x36	; 54
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	88 2f       	mov	r24, r24
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	80 72       	andi	r24, 0x20	; 32
    243c:	90 70       	andi	r25, 0x00	; 0
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	b9 f3       	breq	.-18     	; 0x2430 <keypad_press+0x1520>
	key=14;
    2442:	fe 01       	movw	r30, r28
    2444:	ef 51       	subi	r30, 0x1F	; 31
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	8e e0       	ldi	r24, 0x0E	; 14
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	91 83       	std	Z+1, r25	; 0x01
    244e:	80 83       	st	Z, r24
    2450:	11 c1       	rjmp	.+546    	; 0x2674 <keypad_press+0x1764>
	}
else if (!(keypad_PIN &(1<<6))){
    2452:	e6 e3       	ldi	r30, 0x36	; 54
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	88 2f       	mov	r24, r24
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	80 74       	andi	r24, 0x40	; 64
    245e:	90 70       	andi	r25, 0x00	; 0
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	09 f0       	breq	.+2      	; 0x2466 <keypad_press+0x1556>
    2464:	83 c0       	rjmp	.+262    	; 0x256c <keypad_press+0x165c>
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a0 e0       	ldi	r26, 0x00	; 0
    246c:	b0 e4       	ldi	r27, 0x40	; 64
    246e:	89 8f       	std	Y+25, r24	; 0x19
    2470:	9a 8f       	std	Y+26, r25	; 0x1a
    2472:	ab 8f       	std	Y+27, r26	; 0x1b
    2474:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2476:	69 8d       	ldd	r22, Y+25	; 0x19
    2478:	7a 8d       	ldd	r23, Y+26	; 0x1a
    247a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	4a ef       	ldi	r20, 0xFA	; 250
    2484:	54 e4       	ldi	r21, 0x44	; 68
    2486:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	8d 8b       	std	Y+21, r24	; 0x15
    2490:	9e 8b       	std	Y+22, r25	; 0x16
    2492:	af 8b       	std	Y+23, r26	; 0x17
    2494:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2496:	6d 89       	ldd	r22, Y+21	; 0x15
    2498:	7e 89       	ldd	r23, Y+22	; 0x16
    249a:	8f 89       	ldd	r24, Y+23	; 0x17
    249c:	98 8d       	ldd	r25, Y+24	; 0x18
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e8       	ldi	r20, 0x80	; 128
    24a4:	5f e3       	ldi	r21, 0x3F	; 63
    24a6:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	2c f4       	brge	.+10     	; 0x24b8 <keypad_press+0x15a8>
		__ticks = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9c 8b       	std	Y+20, r25	; 0x14
    24b4:	8b 8b       	std	Y+19, r24	; 0x13
    24b6:	3f c0       	rjmp	.+126    	; 0x2536 <keypad_press+0x1626>
	else if (__tmp > 65535)
    24b8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ba:	7e 89       	ldd	r23, Y+22	; 0x16
    24bc:	8f 89       	ldd	r24, Y+23	; 0x17
    24be:	98 8d       	ldd	r25, Y+24	; 0x18
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	3f ef       	ldi	r19, 0xFF	; 255
    24c4:	4f e7       	ldi	r20, 0x7F	; 127
    24c6:	57 e4       	ldi	r21, 0x47	; 71
    24c8:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    24cc:	18 16       	cp	r1, r24
    24ce:	4c f5       	brge	.+82     	; 0x2522 <keypad_press+0x1612>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d0:	69 8d       	ldd	r22, Y+25	; 0x19
    24d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e2       	ldi	r20, 0x20	; 32
    24de:	51 e4       	ldi	r21, 0x41	; 65
    24e0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9c 8b       	std	Y+20, r25	; 0x14
    24f6:	8b 8b       	std	Y+19, r24	; 0x13
    24f8:	0f c0       	rjmp	.+30     	; 0x2518 <keypad_press+0x1608>
    24fa:	88 ec       	ldi	r24, 0xC8	; 200
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	9a 8b       	std	Y+18, r25	; 0x12
    2500:	89 8b       	std	Y+17, r24	; 0x11
    2502:	89 89       	ldd	r24, Y+17	; 0x11
    2504:	9a 89       	ldd	r25, Y+18	; 0x12
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <keypad_press+0x15f6>
    250a:	9a 8b       	std	Y+18, r25	; 0x12
    250c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250e:	8b 89       	ldd	r24, Y+19	; 0x13
    2510:	9c 89       	ldd	r25, Y+20	; 0x14
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	9c 8b       	std	Y+20, r25	; 0x14
    2516:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2518:	8b 89       	ldd	r24, Y+19	; 0x13
    251a:	9c 89       	ldd	r25, Y+20	; 0x14
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	69 f7       	brne	.-38     	; 0x24fa <keypad_press+0x15ea>
    2520:	14 c0       	rjmp	.+40     	; 0x254a <keypad_press+0x163a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2522:	6d 89       	ldd	r22, Y+21	; 0x15
    2524:	7e 89       	ldd	r23, Y+22	; 0x16
    2526:	8f 89       	ldd	r24, Y+23	; 0x17
    2528:	98 8d       	ldd	r25, Y+24	; 0x18
    252a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	9c 8b       	std	Y+20, r25	; 0x14
    2534:	8b 8b       	std	Y+19, r24	; 0x13
    2536:	8b 89       	ldd	r24, Y+19	; 0x13
    2538:	9c 89       	ldd	r25, Y+20	; 0x14
    253a:	98 8b       	std	Y+16, r25	; 0x10
    253c:	8f 87       	std	Y+15, r24	; 0x0f
    253e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2540:	98 89       	ldd	r25, Y+16	; 0x10
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <keypad_press+0x1632>
    2546:	98 8b       	std	Y+16, r25	; 0x10
    2548:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	while(!(keypad_PIN &(1<<6)));
    254a:	e6 e3       	ldi	r30, 0x36	; 54
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	88 2f       	mov	r24, r24
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	80 74       	andi	r24, 0x40	; 64
    2556:	90 70       	andi	r25, 0x00	; 0
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	b9 f3       	breq	.-18     	; 0x254a <keypad_press+0x163a>
	key=15;
    255c:	fe 01       	movw	r30, r28
    255e:	ef 51       	subi	r30, 0x1F	; 31
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	8f e0       	ldi	r24, 0x0F	; 15
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	80 83       	st	Z, r24
    256a:	84 c0       	rjmp	.+264    	; 0x2674 <keypad_press+0x1764>
	}
else if (!(keypad_PIN &(1<<7))){
    256c:	e6 e3       	ldi	r30, 0x36	; 54
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	88 23       	and	r24, r24
    2574:	0c f4       	brge	.+2      	; 0x2578 <keypad_press+0x1668>
    2576:	7e c0       	rjmp	.+252    	; 0x2674 <keypad_press+0x1764>
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	a0 e0       	ldi	r26, 0x00	; 0
    257e:	b0 e4       	ldi	r27, 0x40	; 64
    2580:	8b 87       	std	Y+11, r24	; 0x0b
    2582:	9c 87       	std	Y+12, r25	; 0x0c
    2584:	ad 87       	std	Y+13, r26	; 0x0d
    2586:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2588:	6b 85       	ldd	r22, Y+11	; 0x0b
    258a:	7c 85       	ldd	r23, Y+12	; 0x0c
    258c:	8d 85       	ldd	r24, Y+13	; 0x0d
    258e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	4a ef       	ldi	r20, 0xFA	; 250
    2596:	54 e4       	ldi	r21, 0x44	; 68
    2598:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	8f 83       	std	Y+7, r24	; 0x07
    25a2:	98 87       	std	Y+8, r25	; 0x08
    25a4:	a9 87       	std	Y+9, r26	; 0x09
    25a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a8:	6f 81       	ldd	r22, Y+7	; 0x07
    25aa:	78 85       	ldd	r23, Y+8	; 0x08
    25ac:	89 85       	ldd	r24, Y+9	; 0x09
    25ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	5f e3       	ldi	r21, 0x3F	; 63
    25b8:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    25bc:	88 23       	and	r24, r24
    25be:	2c f4       	brge	.+10     	; 0x25ca <keypad_press+0x16ba>
		__ticks = 1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9e 83       	std	Y+6, r25	; 0x06
    25c6:	8d 83       	std	Y+5, r24	; 0x05
    25c8:	3f c0       	rjmp	.+126    	; 0x2648 <keypad_press+0x1738>
	else if (__tmp > 65535)
    25ca:	6f 81       	ldd	r22, Y+7	; 0x07
    25cc:	78 85       	ldd	r23, Y+8	; 0x08
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	3f ef       	ldi	r19, 0xFF	; 255
    25d6:	4f e7       	ldi	r20, 0x7F	; 127
    25d8:	57 e4       	ldi	r21, 0x47	; 71
    25da:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    25de:	18 16       	cp	r1, r24
    25e0:	4c f5       	brge	.+82     	; 0x2634 <keypad_press+0x1724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e2       	ldi	r20, 0x20	; 32
    25f0:	51 e4       	ldi	r21, 0x41	; 65
    25f2:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	0f c0       	rjmp	.+30     	; 0x262a <keypad_press+0x171a>
    260c:	88 ec       	ldi	r24, 0xC8	; 200
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <keypad_press+0x1708>
    261c:	9c 83       	std	Y+4, r25	; 0x04
    261e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	9e 83       	std	Y+6, r25	; 0x06
    2628:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	69 f7       	brne	.-38     	; 0x260c <keypad_press+0x16fc>
    2632:	14 c0       	rjmp	.+40     	; 0x265c <keypad_press+0x174c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2634:	6f 81       	ldd	r22, Y+7	; 0x07
    2636:	78 85       	ldd	r23, Y+8	; 0x08
    2638:	89 85       	ldd	r24, Y+9	; 0x09
    263a:	9a 85       	ldd	r25, Y+10	; 0x0a
    263c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9e 83       	std	Y+6, r25	; 0x06
    2646:	8d 83       	std	Y+5, r24	; 0x05
    2648:	8d 81       	ldd	r24, Y+5	; 0x05
    264a:	9e 81       	ldd	r25, Y+6	; 0x06
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	9a 81       	ldd	r25, Y+2	; 0x02
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <keypad_press+0x1744>
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	while(!(keypad_PIN &(1<<7)));
    265c:	e6 e3       	ldi	r30, 0x36	; 54
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	88 23       	and	r24, r24
    2664:	dc f7       	brge	.-10     	; 0x265c <keypad_press+0x174c>
	key=16;
    2666:	fe 01       	movw	r30, r28
    2668:	ef 51       	subi	r30, 0x1F	; 31
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 e1       	ldi	r24, 0x10	; 16
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	80 83       	st	Z, r24
}
 return key; }
    2674:	fe 01       	movw	r30, r28
    2676:	ef 51       	subi	r30, 0x1F	; 31
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 81       	ld	r24, Z
    267c:	91 81       	ldd	r25, Z+1	; 0x01
    267e:	ce 51       	subi	r28, 0x1E	; 30
    2680:	df 4f       	sbci	r29, 0xFF	; 255
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	08 95       	ret

00002696 <lcd_command>:
 * Created: 7/24/2017 10:35:17 PM
 *  Author: Ahmed
 */ 
#include "lcd_4bit.h"
//**********************************************************************************************
void lcd_command(unsigned char cmd){
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	c9 54       	subi	r28, 0x49	; 73
    26a4:	d0 40       	sbci	r29, 0x00	; 0
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	fe 01       	movw	r30, r28
    26b2:	e7 5b       	subi	r30, 0xB7	; 183
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 83       	st	Z, r24
	lcd_PRT=(lcd_PRT & 0x0F)|(cmd & 0xF0);
    26b8:	a5 e3       	ldi	r26, 0x35	; 53
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e5 e3       	ldi	r30, 0x35	; 53
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	98 2f       	mov	r25, r24
    26c4:	9f 70       	andi	r25, 0x0F	; 15
    26c6:	fe 01       	movw	r30, r28
    26c8:	e7 5b       	subi	r30, 0xB7	; 183
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 81       	ld	r24, Z
    26ce:	80 7f       	andi	r24, 0xF0	; 240
    26d0:	89 2b       	or	r24, r25
    26d2:	8c 93       	st	X, r24
	lcd_PRT&=~(1<<lcd_RS);
    26d4:	a5 e3       	ldi	r26, 0x35	; 53
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e5 e3       	ldi	r30, 0x35	; 53
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	8e 7f       	andi	r24, 0xFE	; 254
    26e0:	8c 93       	st	X, r24
	lcd_PRT&=~(1<<lcd_RW);
    26e2:	a5 e3       	ldi	r26, 0x35	; 53
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e5 e3       	ldi	r30, 0x35	; 53
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	8d 7f       	andi	r24, 0xFD	; 253
    26ee:	8c 93       	st	X, r24
	lcd_PRT|=(1<<lcd_EN);
    26f0:	a5 e3       	ldi	r26, 0x35	; 53
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	e5 e3       	ldi	r30, 0x35	; 53
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	84 60       	ori	r24, 0x04	; 4
    26fc:	8c 93       	st	X, r24
    26fe:	fe 01       	movw	r30, r28
    2700:	eb 5b       	subi	r30, 0xBB	; 187
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a8 e4       	ldi	r26, 0x48	; 72
    270a:	b2 e4       	ldi	r27, 0x42	; 66
    270c:	80 83       	st	Z, r24
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	a2 83       	std	Z+2, r26	; 0x02
    2712:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2714:	8e 01       	movw	r16, r28
    2716:	0f 5b       	subi	r16, 0xBF	; 191
    2718:	1f 4f       	sbci	r17, 0xFF	; 255
    271a:	fe 01       	movw	r30, r28
    271c:	eb 5b       	subi	r30, 0xBB	; 187
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	2b ea       	ldi	r18, 0xAB	; 171
    272a:	3a ea       	ldi	r19, 0xAA	; 170
    272c:	4a e2       	ldi	r20, 0x2A	; 42
    272e:	50 e4       	ldi	r21, 0x40	; 64
    2730:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	f8 01       	movw	r30, r16
    273a:	80 83       	st	Z, r24
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	a2 83       	std	Z+2, r26	; 0x02
    2740:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2742:	fe 01       	movw	r30, r28
    2744:	ef 5b       	subi	r30, 0xBF	; 191
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	60 81       	ld	r22, Z
    274a:	71 81       	ldd	r23, Z+1	; 0x01
    274c:	82 81       	ldd	r24, Z+2	; 0x02
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e8       	ldi	r20, 0x80	; 128
    2756:	5f e3       	ldi	r21, 0x3F	; 63
    2758:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    275c:	88 23       	and	r24, r24
    275e:	34 f4       	brge	.+12     	; 0x276c <lcd_command+0xd6>
		__ticks = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	fe 01       	movw	r30, r28
    2764:	e0 5c       	subi	r30, 0xC0	; 192
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 83       	st	Z, r24
    276a:	9d c0       	rjmp	.+314    	; 0x28a6 <lcd_command+0x210>
	else if (__tmp > 255)
    276c:	fe 01       	movw	r30, r28
    276e:	ef 5b       	subi	r30, 0xBF	; 191
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	60 81       	ld	r22, Z
    2774:	71 81       	ldd	r23, Z+1	; 0x01
    2776:	82 81       	ldd	r24, Z+2	; 0x02
    2778:	93 81       	ldd	r25, Z+3	; 0x03
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4f e7       	ldi	r20, 0x7F	; 127
    2780:	53 e4       	ldi	r21, 0x43	; 67
    2782:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2786:	18 16       	cp	r1, r24
    2788:	0c f0       	brlt	.+2      	; 0x278c <lcd_command+0xf6>
    278a:	7e c0       	rjmp	.+252    	; 0x2888 <lcd_command+0x1f2>
	{
		_delay_ms(__us / 1000.0);
    278c:	fe 01       	movw	r30, r28
    278e:	eb 5b       	subi	r30, 0xBB	; 187
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	4a e7       	ldi	r20, 0x7A	; 122
    27a0:	54 e4       	ldi	r21, 0x44	; 68
    27a2:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	8c af       	std	Y+60, r24	; 0x3c
    27ac:	9d af       	std	Y+61, r25	; 0x3d
    27ae:	ae af       	std	Y+62, r26	; 0x3e
    27b0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b2:	6c ad       	ldd	r22, Y+60	; 0x3c
    27b4:	7d ad       	ldd	r23, Y+61	; 0x3d
    27b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    27b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	4a ef       	ldi	r20, 0xFA	; 250
    27c0:	54 e4       	ldi	r21, 0x44	; 68
    27c2:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	88 af       	std	Y+56, r24	; 0x38
    27cc:	99 af       	std	Y+57, r25	; 0x39
    27ce:	aa af       	std	Y+58, r26	; 0x3a
    27d0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    27d2:	68 ad       	ldd	r22, Y+56	; 0x38
    27d4:	79 ad       	ldd	r23, Y+57	; 0x39
    27d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    27d8:	9b ad       	ldd	r25, Y+59	; 0x3b
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e8       	ldi	r20, 0x80	; 128
    27e0:	5f e3       	ldi	r21, 0x3F	; 63
    27e2:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    27e6:	88 23       	and	r24, r24
    27e8:	2c f4       	brge	.+10     	; 0x27f4 <lcd_command+0x15e>
		__ticks = 1;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	9f ab       	std	Y+55, r25	; 0x37
    27f0:	8e ab       	std	Y+54, r24	; 0x36
    27f2:	3f c0       	rjmp	.+126    	; 0x2872 <lcd_command+0x1dc>
	else if (__tmp > 65535)
    27f4:	68 ad       	ldd	r22, Y+56	; 0x38
    27f6:	79 ad       	ldd	r23, Y+57	; 0x39
    27f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    27fa:	9b ad       	ldd	r25, Y+59	; 0x3b
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	3f ef       	ldi	r19, 0xFF	; 255
    2800:	4f e7       	ldi	r20, 0x7F	; 127
    2802:	57 e4       	ldi	r21, 0x47	; 71
    2804:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2808:	18 16       	cp	r1, r24
    280a:	4c f5       	brge	.+82     	; 0x285e <lcd_command+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280c:	6c ad       	ldd	r22, Y+60	; 0x3c
    280e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2810:	8e ad       	ldd	r24, Y+62	; 0x3e
    2812:	9f ad       	ldd	r25, Y+63	; 0x3f
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e2       	ldi	r20, 0x20	; 32
    281a:	51 e4       	ldi	r21, 0x41	; 65
    281c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	9f ab       	std	Y+55, r25	; 0x37
    2832:	8e ab       	std	Y+54, r24	; 0x36
    2834:	0f c0       	rjmp	.+30     	; 0x2854 <lcd_command+0x1be>
    2836:	88 ec       	ldi	r24, 0xC8	; 200
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9d ab       	std	Y+53, r25	; 0x35
    283c:	8c ab       	std	Y+52, r24	; 0x34
    283e:	8c a9       	ldd	r24, Y+52	; 0x34
    2840:	9d a9       	ldd	r25, Y+53	; 0x35
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <lcd_command+0x1ac>
    2846:	9d ab       	std	Y+53, r25	; 0x35
    2848:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284a:	8e a9       	ldd	r24, Y+54	; 0x36
    284c:	9f a9       	ldd	r25, Y+55	; 0x37
    284e:	01 97       	sbiw	r24, 0x01	; 1
    2850:	9f ab       	std	Y+55, r25	; 0x37
    2852:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2854:	8e a9       	ldd	r24, Y+54	; 0x36
    2856:	9f a9       	ldd	r25, Y+55	; 0x37
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	69 f7       	brne	.-38     	; 0x2836 <lcd_command+0x1a0>
    285c:	2d c0       	rjmp	.+90     	; 0x28b8 <lcd_command+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285e:	68 ad       	ldd	r22, Y+56	; 0x38
    2860:	79 ad       	ldd	r23, Y+57	; 0x39
    2862:	8a ad       	ldd	r24, Y+58	; 0x3a
    2864:	9b ad       	ldd	r25, Y+59	; 0x3b
    2866:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9f ab       	std	Y+55, r25	; 0x37
    2870:	8e ab       	std	Y+54, r24	; 0x36
    2872:	8e a9       	ldd	r24, Y+54	; 0x36
    2874:	9f a9       	ldd	r25, Y+55	; 0x37
    2876:	9b ab       	std	Y+51, r25	; 0x33
    2878:	8a ab       	std	Y+50, r24	; 0x32
    287a:	8a a9       	ldd	r24, Y+50	; 0x32
    287c:	9b a9       	ldd	r25, Y+51	; 0x33
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	f1 f7       	brne	.-4      	; 0x287e <lcd_command+0x1e8>
    2882:	9b ab       	std	Y+51, r25	; 0x33
    2884:	8a ab       	std	Y+50, r24	; 0x32
    2886:	18 c0       	rjmp	.+48     	; 0x28b8 <lcd_command+0x222>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2888:	fe 01       	movw	r30, r28
    288a:	ef 5b       	subi	r30, 0xBF	; 191
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	60 81       	ld	r22, Z
    2890:	71 81       	ldd	r23, Z+1	; 0x01
    2892:	82 81       	ldd	r24, Z+2	; 0x02
    2894:	93 81       	ldd	r25, Z+3	; 0x03
    2896:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	fe 01       	movw	r30, r28
    28a0:	e0 5c       	subi	r30, 0xC0	; 192
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 83       	st	Z, r24
    28a6:	fe 01       	movw	r30, r28
    28a8:	e0 5c       	subi	r30, 0xC0	; 192
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	80 81       	ld	r24, Z
    28ae:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28b0:	89 a9       	ldd	r24, Y+49	; 0x31
    28b2:	8a 95       	dec	r24
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <lcd_command+0x21c>
    28b6:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	lcd_PRT&=~(1<<lcd_EN);
    28b8:	a5 e3       	ldi	r26, 0x35	; 53
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e5 e3       	ldi	r30, 0x35	; 53
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	8b 7f       	andi	r24, 0xFB	; 251
    28c4:	8c 93       	st	X, r24
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	a8 e4       	ldi	r26, 0x48	; 72
    28cc:	b2 e4       	ldi	r27, 0x42	; 66
    28ce:	8d a7       	std	Y+45, r24	; 0x2d
    28d0:	9e a7       	std	Y+46, r25	; 0x2e
    28d2:	af a7       	std	Y+47, r26	; 0x2f
    28d4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28d6:	6d a5       	ldd	r22, Y+45	; 0x2d
    28d8:	7e a5       	ldd	r23, Y+46	; 0x2e
    28da:	8f a5       	ldd	r24, Y+47	; 0x2f
    28dc:	98 a9       	ldd	r25, Y+48	; 0x30
    28de:	2b ea       	ldi	r18, 0xAB	; 171
    28e0:	3a ea       	ldi	r19, 0xAA	; 170
    28e2:	4a e2       	ldi	r20, 0x2A	; 42
    28e4:	50 e4       	ldi	r21, 0x40	; 64
    28e6:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	89 a7       	std	Y+41, r24	; 0x29
    28f0:	9a a7       	std	Y+42, r25	; 0x2a
    28f2:	ab a7       	std	Y+43, r26	; 0x2b
    28f4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    28f6:	69 a5       	ldd	r22, Y+41	; 0x29
    28f8:	7a a5       	ldd	r23, Y+42	; 0x2a
    28fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    28fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e8       	ldi	r20, 0x80	; 128
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    290a:	88 23       	and	r24, r24
    290c:	1c f4       	brge	.+6      	; 0x2914 <lcd_command+0x27e>
		__ticks = 1;
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	88 a7       	std	Y+40, r24	; 0x28
    2912:	91 c0       	rjmp	.+290    	; 0x2a36 <lcd_command+0x3a0>
	else if (__tmp > 255)
    2914:	69 a5       	ldd	r22, Y+41	; 0x29
    2916:	7a a5       	ldd	r23, Y+42	; 0x2a
    2918:	8b a5       	ldd	r24, Y+43	; 0x2b
    291a:	9c a5       	ldd	r25, Y+44	; 0x2c
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	4f e7       	ldi	r20, 0x7F	; 127
    2922:	53 e4       	ldi	r21, 0x43	; 67
    2924:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2928:	18 16       	cp	r1, r24
    292a:	0c f0       	brlt	.+2      	; 0x292e <lcd_command+0x298>
    292c:	7b c0       	rjmp	.+246    	; 0x2a24 <lcd_command+0x38e>
	{
		_delay_ms(__us / 1000.0);
    292e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2930:	7e a5       	ldd	r23, Y+46	; 0x2e
    2932:	8f a5       	ldd	r24, Y+47	; 0x2f
    2934:	98 a9       	ldd	r25, Y+48	; 0x30
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	4a e7       	ldi	r20, 0x7A	; 122
    293c:	54 e4       	ldi	r21, 0x44	; 68
    293e:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	8c a3       	std	Y+36, r24	; 0x24
    2948:	9d a3       	std	Y+37, r25	; 0x25
    294a:	ae a3       	std	Y+38, r26	; 0x26
    294c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294e:	6c a1       	ldd	r22, Y+36	; 0x24
    2950:	7d a1       	ldd	r23, Y+37	; 0x25
    2952:	8e a1       	ldd	r24, Y+38	; 0x26
    2954:	9f a1       	ldd	r25, Y+39	; 0x27
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	4a ef       	ldi	r20, 0xFA	; 250
    295c:	54 e4       	ldi	r21, 0x44	; 68
    295e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	88 a3       	std	Y+32, r24	; 0x20
    2968:	99 a3       	std	Y+33, r25	; 0x21
    296a:	aa a3       	std	Y+34, r26	; 0x22
    296c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    296e:	68 a1       	ldd	r22, Y+32	; 0x20
    2970:	79 a1       	ldd	r23, Y+33	; 0x21
    2972:	8a a1       	ldd	r24, Y+34	; 0x22
    2974:	9b a1       	ldd	r25, Y+35	; 0x23
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e8       	ldi	r20, 0x80	; 128
    297c:	5f e3       	ldi	r21, 0x3F	; 63
    297e:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2982:	88 23       	and	r24, r24
    2984:	2c f4       	brge	.+10     	; 0x2990 <lcd_command+0x2fa>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9f 8f       	std	Y+31, r25	; 0x1f
    298c:	8e 8f       	std	Y+30, r24	; 0x1e
    298e:	3f c0       	rjmp	.+126    	; 0x2a0e <lcd_command+0x378>
	else if (__tmp > 65535)
    2990:	68 a1       	ldd	r22, Y+32	; 0x20
    2992:	79 a1       	ldd	r23, Y+33	; 0x21
    2994:	8a a1       	ldd	r24, Y+34	; 0x22
    2996:	9b a1       	ldd	r25, Y+35	; 0x23
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	3f ef       	ldi	r19, 0xFF	; 255
    299c:	4f e7       	ldi	r20, 0x7F	; 127
    299e:	57 e4       	ldi	r21, 0x47	; 71
    29a0:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    29a4:	18 16       	cp	r1, r24
    29a6:	4c f5       	brge	.+82     	; 0x29fa <lcd_command+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a8:	6c a1       	ldd	r22, Y+36	; 0x24
    29aa:	7d a1       	ldd	r23, Y+37	; 0x25
    29ac:	8e a1       	ldd	r24, Y+38	; 0x26
    29ae:	9f a1       	ldd	r25, Y+39	; 0x27
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e2       	ldi	r20, 0x20	; 32
    29b6:	51 e4       	ldi	r21, 0x41	; 65
    29b8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	bc 01       	movw	r22, r24
    29c2:	cd 01       	movw	r24, r26
    29c4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	9f 8f       	std	Y+31, r25	; 0x1f
    29ce:	8e 8f       	std	Y+30, r24	; 0x1e
    29d0:	0f c0       	rjmp	.+30     	; 0x29f0 <lcd_command+0x35a>
    29d2:	88 ec       	ldi	r24, 0xC8	; 200
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9d 8f       	std	Y+29, r25	; 0x1d
    29d8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <lcd_command+0x348>
    29e2:	9d 8f       	std	Y+29, r25	; 0x1d
    29e4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29e8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	9f 8f       	std	Y+31, r25	; 0x1f
    29ee:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29f2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	69 f7       	brne	.-38     	; 0x29d2 <lcd_command+0x33c>
    29f8:	24 c0       	rjmp	.+72     	; 0x2a42 <lcd_command+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fa:	68 a1       	ldd	r22, Y+32	; 0x20
    29fc:	79 a1       	ldd	r23, Y+33	; 0x21
    29fe:	8a a1       	ldd	r24, Y+34	; 0x22
    2a00:	9b a1       	ldd	r25, Y+35	; 0x23
    2a02:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9f 8f       	std	Y+31, r25	; 0x1f
    2a0c:	8e 8f       	std	Y+30, r24	; 0x1e
    2a0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a10:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a12:	9b 8f       	std	Y+27, r25	; 0x1b
    2a14:	8a 8f       	std	Y+26, r24	; 0x1a
    2a16:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a18:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <lcd_command+0x384>
    2a1e:	9b 8f       	std	Y+27, r25	; 0x1b
    2a20:	8a 8f       	std	Y+26, r24	; 0x1a
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <lcd_command+0x3ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a24:	69 a5       	ldd	r22, Y+41	; 0x29
    2a26:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a28:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a2c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	88 a7       	std	Y+40, r24	; 0x28
    2a36:	88 a5       	ldd	r24, Y+40	; 0x28
    2a38:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a3a:	89 8d       	ldd	r24, Y+25	; 0x19
    2a3c:	8a 95       	dec	r24
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <lcd_command+0x3a6>
    2a40:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	lcd_PRT =(lcd_PRT & 0x0F)|(cmd<<4);
    2a42:	a5 e3       	ldi	r26, 0x35	; 53
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e5 e3       	ldi	r30, 0x35	; 53
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	28 2f       	mov	r18, r24
    2a4e:	2f 70       	andi	r18, 0x0F	; 15
    2a50:	fe 01       	movw	r30, r28
    2a52:	e7 5b       	subi	r30, 0xB7	; 183
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 81       	ld	r24, Z
    2a58:	88 2f       	mov	r24, r24
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	82 95       	swap	r24
    2a5e:	92 95       	swap	r25
    2a60:	90 7f       	andi	r25, 0xF0	; 240
    2a62:	98 27       	eor	r25, r24
    2a64:	80 7f       	andi	r24, 0xF0	; 240
    2a66:	98 27       	eor	r25, r24
    2a68:	82 2b       	or	r24, r18
    2a6a:	8c 93       	st	X, r24
	lcd_PRT|=(1<<lcd_EN);
    2a6c:	a5 e3       	ldi	r26, 0x35	; 53
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e5 e3       	ldi	r30, 0x35	; 53
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	84 60       	ori	r24, 0x04	; 4
    2a78:	8c 93       	st	X, r24
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	a8 e4       	ldi	r26, 0x48	; 72
    2a80:	b2 e4       	ldi	r27, 0x42	; 66
    2a82:	8d 8b       	std	Y+21, r24	; 0x15
    2a84:	9e 8b       	std	Y+22, r25	; 0x16
    2a86:	af 8b       	std	Y+23, r26	; 0x17
    2a88:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a90:	98 8d       	ldd	r25, Y+24	; 0x18
    2a92:	2b ea       	ldi	r18, 0xAB	; 171
    2a94:	3a ea       	ldi	r19, 0xAA	; 170
    2a96:	4a e2       	ldi	r20, 0x2A	; 42
    2a98:	50 e4       	ldi	r21, 0x40	; 64
    2a9a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	89 8b       	std	Y+17, r24	; 0x11
    2aa4:	9a 8b       	std	Y+18, r25	; 0x12
    2aa6:	ab 8b       	std	Y+19, r26	; 0x13
    2aa8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2aaa:	69 89       	ldd	r22, Y+17	; 0x11
    2aac:	7a 89       	ldd	r23, Y+18	; 0x12
    2aae:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	1c f4       	brge	.+6      	; 0x2ac8 <lcd_command+0x432>
		__ticks = 1;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	88 8b       	std	Y+16, r24	; 0x10
    2ac6:	91 c0       	rjmp	.+290    	; 0x2bea <lcd_command+0x554>
	else if (__tmp > 255)
    2ac8:	69 89       	ldd	r22, Y+17	; 0x11
    2aca:	7a 89       	ldd	r23, Y+18	; 0x12
    2acc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ace:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	4f e7       	ldi	r20, 0x7F	; 127
    2ad6:	53 e4       	ldi	r21, 0x43	; 67
    2ad8:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2adc:	18 16       	cp	r1, r24
    2ade:	0c f0       	brlt	.+2      	; 0x2ae2 <lcd_command+0x44c>
    2ae0:	7b c0       	rjmp	.+246    	; 0x2bd8 <lcd_command+0x542>
	{
		_delay_ms(__us / 1000.0);
    2ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a e7       	ldi	r20, 0x7A	; 122
    2af0:	54 e4       	ldi	r21, 0x44	; 68
    2af2:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	8c 87       	std	Y+12, r24	; 0x0c
    2afc:	9d 87       	std	Y+13, r25	; 0x0d
    2afe:	ae 87       	std	Y+14, r26	; 0x0e
    2b00:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b02:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b04:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b06:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b08:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	4a ef       	ldi	r20, 0xFA	; 250
    2b10:	54 e4       	ldi	r21, 0x44	; 68
    2b12:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	88 87       	std	Y+8, r24	; 0x08
    2b1c:	99 87       	std	Y+9, r25	; 0x09
    2b1e:	aa 87       	std	Y+10, r26	; 0x0a
    2b20:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b22:	68 85       	ldd	r22, Y+8	; 0x08
    2b24:	79 85       	ldd	r23, Y+9	; 0x09
    2b26:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b28:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e8       	ldi	r20, 0x80	; 128
    2b30:	5f e3       	ldi	r21, 0x3F	; 63
    2b32:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2b36:	88 23       	and	r24, r24
    2b38:	2c f4       	brge	.+10     	; 0x2b44 <lcd_command+0x4ae>
		__ticks = 1;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	9f 83       	std	Y+7, r25	; 0x07
    2b40:	8e 83       	std	Y+6, r24	; 0x06
    2b42:	3f c0       	rjmp	.+126    	; 0x2bc2 <lcd_command+0x52c>
	else if (__tmp > 65535)
    2b44:	68 85       	ldd	r22, Y+8	; 0x08
    2b46:	79 85       	ldd	r23, Y+9	; 0x09
    2b48:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	3f ef       	ldi	r19, 0xFF	; 255
    2b50:	4f e7       	ldi	r20, 0x7F	; 127
    2b52:	57 e4       	ldi	r21, 0x47	; 71
    2b54:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2b58:	18 16       	cp	r1, r24
    2b5a:	4c f5       	brge	.+82     	; 0x2bae <lcd_command+0x518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b60:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b62:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e2       	ldi	r20, 0x20	; 32
    2b6a:	51 e4       	ldi	r21, 0x41	; 65
    2b6c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	bc 01       	movw	r22, r24
    2b76:	cd 01       	movw	r24, r26
    2b78:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	9f 83       	std	Y+7, r25	; 0x07
    2b82:	8e 83       	std	Y+6, r24	; 0x06
    2b84:	0f c0       	rjmp	.+30     	; 0x2ba4 <lcd_command+0x50e>
    2b86:	88 ec       	ldi	r24, 0xC8	; 200
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	9d 83       	std	Y+5, r25	; 0x05
    2b8c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b90:	9d 81       	ldd	r25, Y+5	; 0x05
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	f1 f7       	brne	.-4      	; 0x2b92 <lcd_command+0x4fc>
    2b96:	9d 83       	std	Y+5, r25	; 0x05
    2b98:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b9c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	9f 83       	std	Y+7, r25	; 0x07
    2ba2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	69 f7       	brne	.-38     	; 0x2b86 <lcd_command+0x4f0>
    2bac:	24 c0       	rjmp	.+72     	; 0x2bf6 <lcd_command+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bae:	68 85       	ldd	r22, Y+8	; 0x08
    2bb0:	79 85       	ldd	r23, Y+9	; 0x09
    2bb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bb6:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	9f 83       	std	Y+7, r25	; 0x07
    2bc0:	8e 83       	std	Y+6, r24	; 0x06
    2bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc6:	9b 83       	std	Y+3, r25	; 0x03
    2bc8:	8a 83       	std	Y+2, r24	; 0x02
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <lcd_command+0x538>
    2bd2:	9b 83       	std	Y+3, r25	; 0x03
    2bd4:	8a 83       	std	Y+2, r24	; 0x02
    2bd6:	0f c0       	rjmp	.+30     	; 0x2bf6 <lcd_command+0x560>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bd8:	69 89       	ldd	r22, Y+17	; 0x11
    2bda:	7a 89       	ldd	r23, Y+18	; 0x12
    2bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bde:	9c 89       	ldd	r25, Y+20	; 0x14
    2be0:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	88 8b       	std	Y+16, r24	; 0x10
    2bea:	88 89       	ldd	r24, Y+16	; 0x10
    2bec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	8a 95       	dec	r24
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <lcd_command+0x55a>
    2bf4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	lcd_PRT&=~(1<<lcd_EN);
    2bf6:	a5 e3       	ldi	r26, 0x35	; 53
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e5 e3       	ldi	r30, 0x35	; 53
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	8b 7f       	andi	r24, 0xFB	; 251
    2c02:	8c 93       	st	X, r24

}	
    2c04:	c7 5b       	subi	r28, 0xB7	; 183
    2c06:	df 4f       	sbci	r29, 0xFF	; 255
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	f8 94       	cli
    2c0c:	de bf       	out	0x3e, r29	; 62
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	cf 91       	pop	r28
    2c14:	df 91       	pop	r29
    2c16:	1f 91       	pop	r17
    2c18:	0f 91       	pop	r16
    2c1a:	08 95       	ret

00002c1c <lcd_data>:
//********************************************************************************************
void lcd_data(unsigned char data){
    2c1c:	0f 93       	push	r16
    2c1e:	1f 93       	push	r17
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	c9 54       	subi	r28, 0x49	; 73
    2c2a:	d0 40       	sbci	r29, 0x00	; 0
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	fe 01       	movw	r30, r28
    2c38:	e7 5b       	subi	r30, 0xB7	; 183
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	80 83       	st	Z, r24
	lcd_PRT=(lcd_PRT & 0x0F)|(data & 0xF0);
    2c3e:	a5 e3       	ldi	r26, 0x35	; 53
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e5 e3       	ldi	r30, 0x35	; 53
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	98 2f       	mov	r25, r24
    2c4a:	9f 70       	andi	r25, 0x0F	; 15
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e7 5b       	subi	r30, 0xB7	; 183
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	80 81       	ld	r24, Z
    2c54:	80 7f       	andi	r24, 0xF0	; 240
    2c56:	89 2b       	or	r24, r25
    2c58:	8c 93       	st	X, r24
	lcd_PRT|=(1<<lcd_RS);
    2c5a:	a5 e3       	ldi	r26, 0x35	; 53
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	e5 e3       	ldi	r30, 0x35	; 53
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	81 60       	ori	r24, 0x01	; 1
    2c66:	8c 93       	st	X, r24
	lcd_PRT&=~(1<<lcd_RW);
    2c68:	a5 e3       	ldi	r26, 0x35	; 53
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	e5 e3       	ldi	r30, 0x35	; 53
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	8d 7f       	andi	r24, 0xFD	; 253
    2c74:	8c 93       	st	X, r24
	lcd_PRT|=(1<<lcd_EN);
    2c76:	a5 e3       	ldi	r26, 0x35	; 53
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	e5 e3       	ldi	r30, 0x35	; 53
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	84 60       	ori	r24, 0x04	; 4
    2c82:	8c 93       	st	X, r24
    2c84:	fe 01       	movw	r30, r28
    2c86:	eb 5b       	subi	r30, 0xBB	; 187
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	a8 e4       	ldi	r26, 0x48	; 72
    2c90:	b2 e4       	ldi	r27, 0x42	; 66
    2c92:	80 83       	st	Z, r24
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	a2 83       	std	Z+2, r26	; 0x02
    2c98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c9a:	8e 01       	movw	r16, r28
    2c9c:	0f 5b       	subi	r16, 0xBF	; 191
    2c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	eb 5b       	subi	r30, 0xBB	; 187
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	60 81       	ld	r22, Z
    2ca8:	71 81       	ldd	r23, Z+1	; 0x01
    2caa:	82 81       	ldd	r24, Z+2	; 0x02
    2cac:	93 81       	ldd	r25, Z+3	; 0x03
    2cae:	2b ea       	ldi	r18, 0xAB	; 171
    2cb0:	3a ea       	ldi	r19, 0xAA	; 170
    2cb2:	4a e2       	ldi	r20, 0x2A	; 42
    2cb4:	50 e4       	ldi	r21, 0x40	; 64
    2cb6:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	f8 01       	movw	r30, r16
    2cc0:	80 83       	st	Z, r24
    2cc2:	91 83       	std	Z+1, r25	; 0x01
    2cc4:	a2 83       	std	Z+2, r26	; 0x02
    2cc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cc8:	fe 01       	movw	r30, r28
    2cca:	ef 5b       	subi	r30, 0xBF	; 191
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	60 81       	ld	r22, Z
    2cd0:	71 81       	ldd	r23, Z+1	; 0x01
    2cd2:	82 81       	ldd	r24, Z+2	; 0x02
    2cd4:	93 81       	ldd	r25, Z+3	; 0x03
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e8       	ldi	r20, 0x80	; 128
    2cdc:	5f e3       	ldi	r21, 0x3F	; 63
    2cde:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2ce2:	88 23       	and	r24, r24
    2ce4:	34 f4       	brge	.+12     	; 0x2cf2 <lcd_data+0xd6>
		__ticks = 1;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e0 5c       	subi	r30, 0xC0	; 192
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	80 83       	st	Z, r24
    2cf0:	9d c0       	rjmp	.+314    	; 0x2e2c <lcd_data+0x210>
	else if (__tmp > 255)
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	ef 5b       	subi	r30, 0xBF	; 191
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	60 81       	ld	r22, Z
    2cfa:	71 81       	ldd	r23, Z+1	; 0x01
    2cfc:	82 81       	ldd	r24, Z+2	; 0x02
    2cfe:	93 81       	ldd	r25, Z+3	; 0x03
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	4f e7       	ldi	r20, 0x7F	; 127
    2d06:	53 e4       	ldi	r21, 0x43	; 67
    2d08:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2d0c:	18 16       	cp	r1, r24
    2d0e:	0c f0       	brlt	.+2      	; 0x2d12 <lcd_data+0xf6>
    2d10:	7e c0       	rjmp	.+252    	; 0x2e0e <lcd_data+0x1f2>
	{
		_delay_ms(__us / 1000.0);
    2d12:	fe 01       	movw	r30, r28
    2d14:	eb 5b       	subi	r30, 0xBB	; 187
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	60 81       	ld	r22, Z
    2d1a:	71 81       	ldd	r23, Z+1	; 0x01
    2d1c:	82 81       	ldd	r24, Z+2	; 0x02
    2d1e:	93 81       	ldd	r25, Z+3	; 0x03
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	4a e7       	ldi	r20, 0x7A	; 122
    2d26:	54 e4       	ldi	r21, 0x44	; 68
    2d28:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	8c af       	std	Y+60, r24	; 0x3c
    2d32:	9d af       	std	Y+61, r25	; 0x3d
    2d34:	ae af       	std	Y+62, r26	; 0x3e
    2d36:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d38:	6c ad       	ldd	r22, Y+60	; 0x3c
    2d3a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2d3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	4a ef       	ldi	r20, 0xFA	; 250
    2d46:	54 e4       	ldi	r21, 0x44	; 68
    2d48:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	88 af       	std	Y+56, r24	; 0x38
    2d52:	99 af       	std	Y+57, r25	; 0x39
    2d54:	aa af       	std	Y+58, r26	; 0x3a
    2d56:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2d58:	68 ad       	ldd	r22, Y+56	; 0x38
    2d5a:	79 ad       	ldd	r23, Y+57	; 0x39
    2d5c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d5e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	5f e3       	ldi	r21, 0x3F	; 63
    2d68:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2d6c:	88 23       	and	r24, r24
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <lcd_data+0x15e>
		__ticks = 1;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9f ab       	std	Y+55, r25	; 0x37
    2d76:	8e ab       	std	Y+54, r24	; 0x36
    2d78:	3f c0       	rjmp	.+126    	; 0x2df8 <lcd_data+0x1dc>
	else if (__tmp > 65535)
    2d7a:	68 ad       	ldd	r22, Y+56	; 0x38
    2d7c:	79 ad       	ldd	r23, Y+57	; 0x39
    2d7e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d80:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	3f ef       	ldi	r19, 0xFF	; 255
    2d86:	4f e7       	ldi	r20, 0x7F	; 127
    2d88:	57 e4       	ldi	r21, 0x47	; 71
    2d8a:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2d8e:	18 16       	cp	r1, r24
    2d90:	4c f5       	brge	.+82     	; 0x2de4 <lcd_data+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d92:	6c ad       	ldd	r22, Y+60	; 0x3c
    2d94:	7d ad       	ldd	r23, Y+61	; 0x3d
    2d96:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d98:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e2       	ldi	r20, 0x20	; 32
    2da0:	51 e4       	ldi	r21, 0x41	; 65
    2da2:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9f ab       	std	Y+55, r25	; 0x37
    2db8:	8e ab       	std	Y+54, r24	; 0x36
    2dba:	0f c0       	rjmp	.+30     	; 0x2dda <lcd_data+0x1be>
    2dbc:	88 ec       	ldi	r24, 0xC8	; 200
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	9d ab       	std	Y+53, r25	; 0x35
    2dc2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dc4:	8c a9       	ldd	r24, Y+52	; 0x34
    2dc6:	9d a9       	ldd	r25, Y+53	; 0x35
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <lcd_data+0x1ac>
    2dcc:	9d ab       	std	Y+53, r25	; 0x35
    2dce:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd0:	8e a9       	ldd	r24, Y+54	; 0x36
    2dd2:	9f a9       	ldd	r25, Y+55	; 0x37
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	9f ab       	std	Y+55, r25	; 0x37
    2dd8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dda:	8e a9       	ldd	r24, Y+54	; 0x36
    2ddc:	9f a9       	ldd	r25, Y+55	; 0x37
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	69 f7       	brne	.-38     	; 0x2dbc <lcd_data+0x1a0>
    2de2:	2d c0       	rjmp	.+90     	; 0x2e3e <lcd_data+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de4:	68 ad       	ldd	r22, Y+56	; 0x38
    2de6:	79 ad       	ldd	r23, Y+57	; 0x39
    2de8:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dea:	9b ad       	ldd	r25, Y+59	; 0x3b
    2dec:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9f ab       	std	Y+55, r25	; 0x37
    2df6:	8e ab       	std	Y+54, r24	; 0x36
    2df8:	8e a9       	ldd	r24, Y+54	; 0x36
    2dfa:	9f a9       	ldd	r25, Y+55	; 0x37
    2dfc:	9b ab       	std	Y+51, r25	; 0x33
    2dfe:	8a ab       	std	Y+50, r24	; 0x32
    2e00:	8a a9       	ldd	r24, Y+50	; 0x32
    2e02:	9b a9       	ldd	r25, Y+51	; 0x33
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <lcd_data+0x1e8>
    2e08:	9b ab       	std	Y+51, r25	; 0x33
    2e0a:	8a ab       	std	Y+50, r24	; 0x32
    2e0c:	18 c0       	rjmp	.+48     	; 0x2e3e <lcd_data+0x222>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e0e:	fe 01       	movw	r30, r28
    2e10:	ef 5b       	subi	r30, 0xBF	; 191
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	60 81       	ld	r22, Z
    2e16:	71 81       	ldd	r23, Z+1	; 0x01
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	fe 01       	movw	r30, r28
    2e26:	e0 5c       	subi	r30, 0xC0	; 192
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	80 83       	st	Z, r24
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	e0 5c       	subi	r30, 0xC0	; 192
    2e30:	ff 4f       	sbci	r31, 0xFF	; 255
    2e32:	80 81       	ld	r24, Z
    2e34:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e36:	89 a9       	ldd	r24, Y+49	; 0x31
    2e38:	8a 95       	dec	r24
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <lcd_data+0x21c>
    2e3c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	lcd_PRT&=~(1<<lcd_EN);
    2e3e:	a5 e3       	ldi	r26, 0x35	; 53
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e5 e3       	ldi	r30, 0x35	; 53
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	8b 7f       	andi	r24, 0xFB	; 251
    2e4a:	8c 93       	st	X, r24
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	a8 e4       	ldi	r26, 0x48	; 72
    2e52:	b2 e4       	ldi	r27, 0x42	; 66
    2e54:	8d a7       	std	Y+45, r24	; 0x2d
    2e56:	9e a7       	std	Y+46, r25	; 0x2e
    2e58:	af a7       	std	Y+47, r26	; 0x2f
    2e5a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e5c:	6d a5       	ldd	r22, Y+45	; 0x2d
    2e5e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2e60:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e62:	98 a9       	ldd	r25, Y+48	; 0x30
    2e64:	2b ea       	ldi	r18, 0xAB	; 171
    2e66:	3a ea       	ldi	r19, 0xAA	; 170
    2e68:	4a e2       	ldi	r20, 0x2A	; 42
    2e6a:	50 e4       	ldi	r21, 0x40	; 64
    2e6c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	89 a7       	std	Y+41, r24	; 0x29
    2e76:	9a a7       	std	Y+42, r25	; 0x2a
    2e78:	ab a7       	std	Y+43, r26	; 0x2b
    2e7a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2e7c:	69 a5       	ldd	r22, Y+41	; 0x29
    2e7e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e80:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e82:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	1c f4       	brge	.+6      	; 0x2e9a <lcd_data+0x27e>
		__ticks = 1;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	88 a7       	std	Y+40, r24	; 0x28
    2e98:	91 c0       	rjmp	.+290    	; 0x2fbc <lcd_data+0x3a0>
	else if (__tmp > 255)
    2e9a:	69 a5       	ldd	r22, Y+41	; 0x29
    2e9c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ea0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	53 e4       	ldi	r21, 0x43	; 67
    2eaa:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2eae:	18 16       	cp	r1, r24
    2eb0:	0c f0       	brlt	.+2      	; 0x2eb4 <lcd_data+0x298>
    2eb2:	7b c0       	rjmp	.+246    	; 0x2faa <lcd_data+0x38e>
	{
		_delay_ms(__us / 1000.0);
    2eb4:	6d a5       	ldd	r22, Y+45	; 0x2d
    2eb6:	7e a5       	ldd	r23, Y+46	; 0x2e
    2eb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eba:	98 a9       	ldd	r25, Y+48	; 0x30
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	4a e7       	ldi	r20, 0x7A	; 122
    2ec2:	54 e4       	ldi	r21, 0x44	; 68
    2ec4:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	8c a3       	std	Y+36, r24	; 0x24
    2ece:	9d a3       	std	Y+37, r25	; 0x25
    2ed0:	ae a3       	std	Y+38, r26	; 0x26
    2ed2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed4:	6c a1       	ldd	r22, Y+36	; 0x24
    2ed6:	7d a1       	ldd	r23, Y+37	; 0x25
    2ed8:	8e a1       	ldd	r24, Y+38	; 0x26
    2eda:	9f a1       	ldd	r25, Y+39	; 0x27
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	4a ef       	ldi	r20, 0xFA	; 250
    2ee2:	54 e4       	ldi	r21, 0x44	; 68
    2ee4:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	88 a3       	std	Y+32, r24	; 0x20
    2eee:	99 a3       	std	Y+33, r25	; 0x21
    2ef0:	aa a3       	std	Y+34, r26	; 0x22
    2ef2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2ef4:	68 a1       	ldd	r22, Y+32	; 0x20
    2ef6:	79 a1       	ldd	r23, Y+33	; 0x21
    2ef8:	8a a1       	ldd	r24, Y+34	; 0x22
    2efa:	9b a1       	ldd	r25, Y+35	; 0x23
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e8       	ldi	r20, 0x80	; 128
    2f02:	5f e3       	ldi	r21, 0x3F	; 63
    2f04:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    2f08:	88 23       	and	r24, r24
    2f0a:	2c f4       	brge	.+10     	; 0x2f16 <lcd_data+0x2fa>
		__ticks = 1;
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	9f 8f       	std	Y+31, r25	; 0x1f
    2f12:	8e 8f       	std	Y+30, r24	; 0x1e
    2f14:	3f c0       	rjmp	.+126    	; 0x2f94 <lcd_data+0x378>
	else if (__tmp > 65535)
    2f16:	68 a1       	ldd	r22, Y+32	; 0x20
    2f18:	79 a1       	ldd	r23, Y+33	; 0x21
    2f1a:	8a a1       	ldd	r24, Y+34	; 0x22
    2f1c:	9b a1       	ldd	r25, Y+35	; 0x23
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	3f ef       	ldi	r19, 0xFF	; 255
    2f22:	4f e7       	ldi	r20, 0x7F	; 127
    2f24:	57 e4       	ldi	r21, 0x47	; 71
    2f26:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    2f2a:	18 16       	cp	r1, r24
    2f2c:	4c f5       	brge	.+82     	; 0x2f80 <lcd_data+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2e:	6c a1       	ldd	r22, Y+36	; 0x24
    2f30:	7d a1       	ldd	r23, Y+37	; 0x25
    2f32:	8e a1       	ldd	r24, Y+38	; 0x26
    2f34:	9f a1       	ldd	r25, Y+39	; 0x27
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e2       	ldi	r20, 0x20	; 32
    2f3c:	51 e4       	ldi	r21, 0x41	; 65
    2f3e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	9f 8f       	std	Y+31, r25	; 0x1f
    2f54:	8e 8f       	std	Y+30, r24	; 0x1e
    2f56:	0f c0       	rjmp	.+30     	; 0x2f76 <lcd_data+0x35a>
    2f58:	88 ec       	ldi	r24, 0xC8	; 200
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9d 8f       	std	Y+29, r25	; 0x1d
    2f5e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f60:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f62:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <lcd_data+0x348>
    2f68:	9d 8f       	std	Y+29, r25	; 0x1d
    2f6a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f6e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	9f 8f       	std	Y+31, r25	; 0x1f
    2f74:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f78:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	69 f7       	brne	.-38     	; 0x2f58 <lcd_data+0x33c>
    2f7e:	24 c0       	rjmp	.+72     	; 0x2fc8 <lcd_data+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f80:	68 a1       	ldd	r22, Y+32	; 0x20
    2f82:	79 a1       	ldd	r23, Y+33	; 0x21
    2f84:	8a a1       	ldd	r24, Y+34	; 0x22
    2f86:	9b a1       	ldd	r25, Y+35	; 0x23
    2f88:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	9f 8f       	std	Y+31, r25	; 0x1f
    2f92:	8e 8f       	std	Y+30, r24	; 0x1e
    2f94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f96:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f98:	9b 8f       	std	Y+27, r25	; 0x1b
    2f9a:	8a 8f       	std	Y+26, r24	; 0x1a
    2f9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f9e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <lcd_data+0x384>
    2fa4:	9b 8f       	std	Y+27, r25	; 0x1b
    2fa6:	8a 8f       	std	Y+26, r24	; 0x1a
    2fa8:	0f c0       	rjmp	.+30     	; 0x2fc8 <lcd_data+0x3ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2faa:	69 a5       	ldd	r22, Y+41	; 0x29
    2fac:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fae:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fb0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fb2:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	88 a7       	std	Y+40, r24	; 0x28
    2fbc:	88 a5       	ldd	r24, Y+40	; 0x28
    2fbe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fc0:	89 8d       	ldd	r24, Y+25	; 0x19
    2fc2:	8a 95       	dec	r24
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <lcd_data+0x3a6>
    2fc6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	lcd_PRT =(lcd_PRT & 0x0F)|(data<<4);
    2fc8:	a5 e3       	ldi	r26, 0x35	; 53
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	e5 e3       	ldi	r30, 0x35	; 53
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	2f 70       	andi	r18, 0x0F	; 15
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	e7 5b       	subi	r30, 0xB7	; 183
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	80 81       	ld	r24, Z
    2fde:	88 2f       	mov	r24, r24
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	82 95       	swap	r24
    2fe4:	92 95       	swap	r25
    2fe6:	90 7f       	andi	r25, 0xF0	; 240
    2fe8:	98 27       	eor	r25, r24
    2fea:	80 7f       	andi	r24, 0xF0	; 240
    2fec:	98 27       	eor	r25, r24
    2fee:	82 2b       	or	r24, r18
    2ff0:	8c 93       	st	X, r24
	lcd_PRT|=(1<<lcd_EN);
    2ff2:	a5 e3       	ldi	r26, 0x35	; 53
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	e5 e3       	ldi	r30, 0x35	; 53
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	84 60       	ori	r24, 0x04	; 4
    2ffe:	8c 93       	st	X, r24
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	a8 ec       	ldi	r26, 0xC8	; 200
    3006:	b2 e4       	ldi	r27, 0x42	; 66
    3008:	8d 8b       	std	Y+21, r24	; 0x15
    300a:	9e 8b       	std	Y+22, r25	; 0x16
    300c:	af 8b       	std	Y+23, r26	; 0x17
    300e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3010:	6d 89       	ldd	r22, Y+21	; 0x15
    3012:	7e 89       	ldd	r23, Y+22	; 0x16
    3014:	8f 89       	ldd	r24, Y+23	; 0x17
    3016:	98 8d       	ldd	r25, Y+24	; 0x18
    3018:	2b ea       	ldi	r18, 0xAB	; 171
    301a:	3a ea       	ldi	r19, 0xAA	; 170
    301c:	4a e2       	ldi	r20, 0x2A	; 42
    301e:	50 e4       	ldi	r21, 0x40	; 64
    3020:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	89 8b       	std	Y+17, r24	; 0x11
    302a:	9a 8b       	std	Y+18, r25	; 0x12
    302c:	ab 8b       	std	Y+19, r26	; 0x13
    302e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3030:	69 89       	ldd	r22, Y+17	; 0x11
    3032:	7a 89       	ldd	r23, Y+18	; 0x12
    3034:	8b 89       	ldd	r24, Y+19	; 0x13
    3036:	9c 89       	ldd	r25, Y+20	; 0x14
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e8       	ldi	r20, 0x80	; 128
    303e:	5f e3       	ldi	r21, 0x3F	; 63
    3040:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3044:	88 23       	and	r24, r24
    3046:	1c f4       	brge	.+6      	; 0x304e <lcd_data+0x432>
		__ticks = 1;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	88 8b       	std	Y+16, r24	; 0x10
    304c:	91 c0       	rjmp	.+290    	; 0x3170 <lcd_data+0x554>
	else if (__tmp > 255)
    304e:	69 89       	ldd	r22, Y+17	; 0x11
    3050:	7a 89       	ldd	r23, Y+18	; 0x12
    3052:	8b 89       	ldd	r24, Y+19	; 0x13
    3054:	9c 89       	ldd	r25, Y+20	; 0x14
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4f e7       	ldi	r20, 0x7F	; 127
    305c:	53 e4       	ldi	r21, 0x43	; 67
    305e:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    3062:	18 16       	cp	r1, r24
    3064:	0c f0       	brlt	.+2      	; 0x3068 <lcd_data+0x44c>
    3066:	7b c0       	rjmp	.+246    	; 0x315e <lcd_data+0x542>
	{
		_delay_ms(__us / 1000.0);
    3068:	6d 89       	ldd	r22, Y+21	; 0x15
    306a:	7e 89       	ldd	r23, Y+22	; 0x16
    306c:	8f 89       	ldd	r24, Y+23	; 0x17
    306e:	98 8d       	ldd	r25, Y+24	; 0x18
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	4a e7       	ldi	r20, 0x7A	; 122
    3076:	54 e4       	ldi	r21, 0x44	; 68
    3078:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	8c 87       	std	Y+12, r24	; 0x0c
    3082:	9d 87       	std	Y+13, r25	; 0x0d
    3084:	ae 87       	std	Y+14, r26	; 0x0e
    3086:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3088:	6c 85       	ldd	r22, Y+12	; 0x0c
    308a:	7d 85       	ldd	r23, Y+13	; 0x0d
    308c:	8e 85       	ldd	r24, Y+14	; 0x0e
    308e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	4a ef       	ldi	r20, 0xFA	; 250
    3096:	54 e4       	ldi	r21, 0x44	; 68
    3098:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	88 87       	std	Y+8, r24	; 0x08
    30a2:	99 87       	std	Y+9, r25	; 0x09
    30a4:	aa 87       	std	Y+10, r26	; 0x0a
    30a6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    30a8:	68 85       	ldd	r22, Y+8	; 0x08
    30aa:	79 85       	ldd	r23, Y+9	; 0x09
    30ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    30ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e8       	ldi	r20, 0x80	; 128
    30b6:	5f e3       	ldi	r21, 0x3F	; 63
    30b8:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    30bc:	88 23       	and	r24, r24
    30be:	2c f4       	brge	.+10     	; 0x30ca <lcd_data+0x4ae>
		__ticks = 1;
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	9f 83       	std	Y+7, r25	; 0x07
    30c6:	8e 83       	std	Y+6, r24	; 0x06
    30c8:	3f c0       	rjmp	.+126    	; 0x3148 <lcd_data+0x52c>
	else if (__tmp > 65535)
    30ca:	68 85       	ldd	r22, Y+8	; 0x08
    30cc:	79 85       	ldd	r23, Y+9	; 0x09
    30ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    30d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	3f ef       	ldi	r19, 0xFF	; 255
    30d6:	4f e7       	ldi	r20, 0x7F	; 127
    30d8:	57 e4       	ldi	r21, 0x47	; 71
    30da:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    30de:	18 16       	cp	r1, r24
    30e0:	4c f5       	brge	.+82     	; 0x3134 <lcd_data+0x518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    30e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    30e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    30e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e2       	ldi	r20, 0x20	; 32
    30f0:	51 e4       	ldi	r21, 0x41	; 65
    30f2:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	bc 01       	movw	r22, r24
    30fc:	cd 01       	movw	r24, r26
    30fe:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	9f 83       	std	Y+7, r25	; 0x07
    3108:	8e 83       	std	Y+6, r24	; 0x06
    310a:	0f c0       	rjmp	.+30     	; 0x312a <lcd_data+0x50e>
    310c:	88 ec       	ldi	r24, 0xC8	; 200
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	9d 83       	std	Y+5, r25	; 0x05
    3112:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3114:	8c 81       	ldd	r24, Y+4	; 0x04
    3116:	9d 81       	ldd	r25, Y+5	; 0x05
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <lcd_data+0x4fc>
    311c:	9d 83       	std	Y+5, r25	; 0x05
    311e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3120:	8e 81       	ldd	r24, Y+6	; 0x06
    3122:	9f 81       	ldd	r25, Y+7	; 0x07
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	9f 83       	std	Y+7, r25	; 0x07
    3128:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312a:	8e 81       	ldd	r24, Y+6	; 0x06
    312c:	9f 81       	ldd	r25, Y+7	; 0x07
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	69 f7       	brne	.-38     	; 0x310c <lcd_data+0x4f0>
    3132:	24 c0       	rjmp	.+72     	; 0x317c <lcd_data+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3134:	68 85       	ldd	r22, Y+8	; 0x08
    3136:	79 85       	ldd	r23, Y+9	; 0x09
    3138:	8a 85       	ldd	r24, Y+10	; 0x0a
    313a:	9b 85       	ldd	r25, Y+11	; 0x0b
    313c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9f 83       	std	Y+7, r25	; 0x07
    3146:	8e 83       	std	Y+6, r24	; 0x06
    3148:	8e 81       	ldd	r24, Y+6	; 0x06
    314a:	9f 81       	ldd	r25, Y+7	; 0x07
    314c:	9b 83       	std	Y+3, r25	; 0x03
    314e:	8a 83       	std	Y+2, r24	; 0x02
    3150:	8a 81       	ldd	r24, Y+2	; 0x02
    3152:	9b 81       	ldd	r25, Y+3	; 0x03
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <lcd_data+0x538>
    3158:	9b 83       	std	Y+3, r25	; 0x03
    315a:	8a 83       	std	Y+2, r24	; 0x02
    315c:	0f c0       	rjmp	.+30     	; 0x317c <lcd_data+0x560>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    315e:	69 89       	ldd	r22, Y+17	; 0x11
    3160:	7a 89       	ldd	r23, Y+18	; 0x12
    3162:	8b 89       	ldd	r24, Y+19	; 0x13
    3164:	9c 89       	ldd	r25, Y+20	; 0x14
    3166:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	88 8b       	std	Y+16, r24	; 0x10
    3170:	88 89       	ldd	r24, Y+16	; 0x10
    3172:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3174:	89 81       	ldd	r24, Y+1	; 0x01
    3176:	8a 95       	dec	r24
    3178:	f1 f7       	brne	.-4      	; 0x3176 <lcd_data+0x55a>
    317a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	lcd_PRT&=~(1<<lcd_EN);	
    317c:	a5 e3       	ldi	r26, 0x35	; 53
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e5 e3       	ldi	r30, 0x35	; 53
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	8b 7f       	andi	r24, 0xFB	; 251
    3188:	8c 93       	st	X, r24
}
    318a:	c7 5b       	subi	r28, 0xB7	; 183
    318c:	df 4f       	sbci	r29, 0xFF	; 255
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret

000031a2 <lcd_init>:
//***********************************************************************************************
//function for lcd initialize.
//lcd_init();
void lcd_init(){
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	cf 59       	subi	r28, 0x9F	; 159
    31b0:	d0 40       	sbci	r29, 0x00	; 0
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	fe 01       	movw	r30, r28
    31be:	e5 56       	subi	r30, 0x65	; 101
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	a0 ea       	ldi	r26, 0xA0	; 160
    31c8:	b0 e4       	ldi	r27, 0x40	; 64
    31ca:	80 83       	st	Z, r24
    31cc:	91 83       	std	Z+1, r25	; 0x01
    31ce:	a2 83       	std	Z+2, r26	; 0x02
    31d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d2:	8e 01       	movw	r16, r28
    31d4:	09 56       	subi	r16, 0x69	; 105
    31d6:	1f 4f       	sbci	r17, 0xFF	; 255
    31d8:	fe 01       	movw	r30, r28
    31da:	e5 56       	subi	r30, 0x65	; 101
    31dc:	ff 4f       	sbci	r31, 0xFF	; 255
    31de:	60 81       	ld	r22, Z
    31e0:	71 81       	ldd	r23, Z+1	; 0x01
    31e2:	82 81       	ldd	r24, Z+2	; 0x02
    31e4:	93 81       	ldd	r25, Z+3	; 0x03
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	4a ef       	ldi	r20, 0xFA	; 250
    31ec:	54 e4       	ldi	r21, 0x44	; 68
    31ee:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	f8 01       	movw	r30, r16
    31f8:	80 83       	st	Z, r24
    31fa:	91 83       	std	Z+1, r25	; 0x01
    31fc:	a2 83       	std	Z+2, r26	; 0x02
    31fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3200:	fe 01       	movw	r30, r28
    3202:	e9 56       	subi	r30, 0x69	; 105
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	60 81       	ld	r22, Z
    3208:	71 81       	ldd	r23, Z+1	; 0x01
    320a:	82 81       	ldd	r24, Z+2	; 0x02
    320c:	93 81       	ldd	r25, Z+3	; 0x03
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e8       	ldi	r20, 0x80	; 128
    3214:	5f e3       	ldi	r21, 0x3F	; 63
    3216:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    321a:	88 23       	and	r24, r24
    321c:	44 f4       	brge	.+16     	; 0x322e <lcd_init+0x8c>
		__ticks = 1;
    321e:	fe 01       	movw	r30, r28
    3220:	eb 56       	subi	r30, 0x6B	; 107
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	91 83       	std	Z+1, r25	; 0x01
    322a:	80 83       	st	Z, r24
    322c:	64 c0       	rjmp	.+200    	; 0x32f6 <lcd_init+0x154>
	else if (__tmp > 65535)
    322e:	fe 01       	movw	r30, r28
    3230:	e9 56       	subi	r30, 0x69	; 105
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	60 81       	ld	r22, Z
    3236:	71 81       	ldd	r23, Z+1	; 0x01
    3238:	82 81       	ldd	r24, Z+2	; 0x02
    323a:	93 81       	ldd	r25, Z+3	; 0x03
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	3f ef       	ldi	r19, 0xFF	; 255
    3240:	4f e7       	ldi	r20, 0x7F	; 127
    3242:	57 e4       	ldi	r21, 0x47	; 71
    3244:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    3248:	18 16       	cp	r1, r24
    324a:	0c f0       	brlt	.+2      	; 0x324e <lcd_init+0xac>
    324c:	43 c0       	rjmp	.+134    	; 0x32d4 <lcd_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324e:	fe 01       	movw	r30, r28
    3250:	e5 56       	subi	r30, 0x65	; 101
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	60 81       	ld	r22, Z
    3256:	71 81       	ldd	r23, Z+1	; 0x01
    3258:	82 81       	ldd	r24, Z+2	; 0x02
    325a:	93 81       	ldd	r25, Z+3	; 0x03
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e2       	ldi	r20, 0x20	; 32
    3262:	51 e4       	ldi	r21, 0x41	; 65
    3264:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	8e 01       	movw	r16, r28
    326e:	0b 56       	subi	r16, 0x6B	; 107
    3270:	1f 4f       	sbci	r17, 0xFF	; 255
    3272:	bc 01       	movw	r22, r24
    3274:	cd 01       	movw	r24, r26
    3276:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	f8 01       	movw	r30, r16
    3280:	91 83       	std	Z+1, r25	; 0x01
    3282:	80 83       	st	Z, r24
    3284:	1f c0       	rjmp	.+62     	; 0x32c4 <lcd_init+0x122>
    3286:	fe 01       	movw	r30, r28
    3288:	ed 56       	subi	r30, 0x6D	; 109
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	88 ec       	ldi	r24, 0xC8	; 200
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	91 83       	std	Z+1, r25	; 0x01
    3292:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3294:	fe 01       	movw	r30, r28
    3296:	ed 56       	subi	r30, 0x6D	; 109
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	80 81       	ld	r24, Z
    329c:	91 81       	ldd	r25, Z+1	; 0x01
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <lcd_init+0xfc>
    32a2:	fe 01       	movw	r30, r28
    32a4:	ed 56       	subi	r30, 0x6D	; 109
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	91 83       	std	Z+1, r25	; 0x01
    32aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ac:	de 01       	movw	r26, r28
    32ae:	ab 56       	subi	r26, 0x6B	; 107
    32b0:	bf 4f       	sbci	r27, 0xFF	; 255
    32b2:	fe 01       	movw	r30, r28
    32b4:	eb 56       	subi	r30, 0x6B	; 107
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	80 81       	ld	r24, Z
    32ba:	91 81       	ldd	r25, Z+1	; 0x01
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	11 96       	adiw	r26, 0x01	; 1
    32c0:	9c 93       	st	X, r25
    32c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c4:	fe 01       	movw	r30, r28
    32c6:	eb 56       	subi	r30, 0x6B	; 107
    32c8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ca:	80 81       	ld	r24, Z
    32cc:	91 81       	ldd	r25, Z+1	; 0x01
    32ce:	00 97       	sbiw	r24, 0x00	; 0
    32d0:	d1 f6       	brne	.-76     	; 0x3286 <lcd_init+0xe4>
    32d2:	27 c0       	rjmp	.+78     	; 0x3322 <lcd_init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d4:	8e 01       	movw	r16, r28
    32d6:	0b 56       	subi	r16, 0x6B	; 107
    32d8:	1f 4f       	sbci	r17, 0xFF	; 255
    32da:	fe 01       	movw	r30, r28
    32dc:	e9 56       	subi	r30, 0x69	; 105
    32de:	ff 4f       	sbci	r31, 0xFF	; 255
    32e0:	60 81       	ld	r22, Z
    32e2:	71 81       	ldd	r23, Z+1	; 0x01
    32e4:	82 81       	ldd	r24, Z+2	; 0x02
    32e6:	93 81       	ldd	r25, Z+3	; 0x03
    32e8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	f8 01       	movw	r30, r16
    32f2:	91 83       	std	Z+1, r25	; 0x01
    32f4:	80 83       	st	Z, r24
    32f6:	de 01       	movw	r26, r28
    32f8:	af 56       	subi	r26, 0x6F	; 111
    32fa:	bf 4f       	sbci	r27, 0xFF	; 255
    32fc:	fe 01       	movw	r30, r28
    32fe:	eb 56       	subi	r30, 0x6B	; 107
    3300:	ff 4f       	sbci	r31, 0xFF	; 255
    3302:	80 81       	ld	r24, Z
    3304:	91 81       	ldd	r25, Z+1	; 0x01
    3306:	8d 93       	st	X+, r24
    3308:	9c 93       	st	X, r25
    330a:	fe 01       	movw	r30, r28
    330c:	ef 56       	subi	r30, 0x6F	; 111
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	80 81       	ld	r24, Z
    3312:	91 81       	ldd	r25, Z+1	; 0x01
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	f1 f7       	brne	.-4      	; 0x3314 <lcd_init+0x172>
    3318:	fe 01       	movw	r30, r28
    331a:	ef 56       	subi	r30, 0x6F	; 111
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	91 83       	std	Z+1, r25	; 0x01
    3320:	80 83       	st	Z, r24
_delay_ms(5);
	lcd_DDR|=0xff;
    3322:	e4 e3       	ldi	r30, 0x34	; 52
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	80 81       	ld	r24, Z
    3328:	e4 e3       	ldi	r30, 0x34	; 52
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	8f ef       	ldi	r24, 0xFF	; 255
    332e:	80 83       	st	Z, r24
	lcd_PRT&=~(1<<lcd_EN);
    3330:	a5 e3       	ldi	r26, 0x35	; 53
    3332:	b0 e0       	ldi	r27, 0x00	; 0
    3334:	e5 e3       	ldi	r30, 0x35	; 53
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	80 81       	ld	r24, Z
    333a:	8b 7f       	andi	r24, 0xFB	; 251
    333c:	8c 93       	st	X, r24
    333e:	fe 01       	movw	r30, r28
    3340:	e3 57       	subi	r30, 0x73	; 115
    3342:	ff 4f       	sbci	r31, 0xFF	; 255
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	aa ef       	ldi	r26, 0xFA	; 250
    334a:	b4 e4       	ldi	r27, 0x44	; 68
    334c:	80 83       	st	Z, r24
    334e:	91 83       	std	Z+1, r25	; 0x01
    3350:	a2 83       	std	Z+2, r26	; 0x02
    3352:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3354:	8e 01       	movw	r16, r28
    3356:	07 57       	subi	r16, 0x77	; 119
    3358:	1f 4f       	sbci	r17, 0xFF	; 255
    335a:	fe 01       	movw	r30, r28
    335c:	e3 57       	subi	r30, 0x73	; 115
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	60 81       	ld	r22, Z
    3362:	71 81       	ldd	r23, Z+1	; 0x01
    3364:	82 81       	ldd	r24, Z+2	; 0x02
    3366:	93 81       	ldd	r25, Z+3	; 0x03
    3368:	2b ea       	ldi	r18, 0xAB	; 171
    336a:	3a ea       	ldi	r19, 0xAA	; 170
    336c:	4a e2       	ldi	r20, 0x2A	; 42
    336e:	50 e4       	ldi	r21, 0x40	; 64
    3370:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	f8 01       	movw	r30, r16
    337a:	80 83       	st	Z, r24
    337c:	91 83       	std	Z+1, r25	; 0x01
    337e:	a2 83       	std	Z+2, r26	; 0x02
    3380:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3382:	fe 01       	movw	r30, r28
    3384:	e7 57       	subi	r30, 0x77	; 119
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	60 81       	ld	r22, Z
    338a:	71 81       	ldd	r23, Z+1	; 0x01
    338c:	82 81       	ldd	r24, Z+2	; 0x02
    338e:	93 81       	ldd	r25, Z+3	; 0x03
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e8       	ldi	r20, 0x80	; 128
    3396:	5f e3       	ldi	r21, 0x3F	; 63
    3398:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    339c:	88 23       	and	r24, r24
    339e:	34 f4       	brge	.+12     	; 0x33ac <lcd_init+0x20a>
		__ticks = 1;
    33a0:	fe 01       	movw	r30, r28
    33a2:	e8 57       	subi	r30, 0x78	; 120
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	80 83       	st	Z, r24
    33aa:	e0 c0       	rjmp	.+448    	; 0x356c <lcd_init+0x3ca>
	else if (__tmp > 255)
    33ac:	fe 01       	movw	r30, r28
    33ae:	e7 57       	subi	r30, 0x77	; 119
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	60 81       	ld	r22, Z
    33b4:	71 81       	ldd	r23, Z+1	; 0x01
    33b6:	82 81       	ldd	r24, Z+2	; 0x02
    33b8:	93 81       	ldd	r25, Z+3	; 0x03
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	4f e7       	ldi	r20, 0x7F	; 127
    33c0:	53 e4       	ldi	r21, 0x43	; 67
    33c2:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    33c6:	18 16       	cp	r1, r24
    33c8:	0c f0       	brlt	.+2      	; 0x33cc <lcd_init+0x22a>
    33ca:	c0 c0       	rjmp	.+384    	; 0x354c <lcd_init+0x3aa>
	{
		_delay_ms(__us / 1000.0);
    33cc:	fe 01       	movw	r30, r28
    33ce:	e3 57       	subi	r30, 0x73	; 115
    33d0:	ff 4f       	sbci	r31, 0xFF	; 255
    33d2:	60 81       	ld	r22, Z
    33d4:	71 81       	ldd	r23, Z+1	; 0x01
    33d6:	82 81       	ldd	r24, Z+2	; 0x02
    33d8:	93 81       	ldd	r25, Z+3	; 0x03
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	4a e7       	ldi	r20, 0x7A	; 122
    33e0:	54 e4       	ldi	r21, 0x44	; 68
    33e2:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	fe 01       	movw	r30, r28
    33ec:	ec 57       	subi	r30, 0x7C	; 124
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	80 83       	st	Z, r24
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	a2 83       	std	Z+2, r26	; 0x02
    33f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f8:	8e 01       	movw	r16, r28
    33fa:	00 58       	subi	r16, 0x80	; 128
    33fc:	1f 4f       	sbci	r17, 0xFF	; 255
    33fe:	fe 01       	movw	r30, r28
    3400:	ec 57       	subi	r30, 0x7C	; 124
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	60 81       	ld	r22, Z
    3406:	71 81       	ldd	r23, Z+1	; 0x01
    3408:	82 81       	ldd	r24, Z+2	; 0x02
    340a:	93 81       	ldd	r25, Z+3	; 0x03
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	4a ef       	ldi	r20, 0xFA	; 250
    3412:	54 e4       	ldi	r21, 0x44	; 68
    3414:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	f8 01       	movw	r30, r16
    341e:	80 83       	st	Z, r24
    3420:	91 83       	std	Z+1, r25	; 0x01
    3422:	a2 83       	std	Z+2, r26	; 0x02
    3424:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3426:	fe 01       	movw	r30, r28
    3428:	e0 58       	subi	r30, 0x80	; 128
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	60 81       	ld	r22, Z
    342e:	71 81       	ldd	r23, Z+1	; 0x01
    3430:	82 81       	ldd	r24, Z+2	; 0x02
    3432:	93 81       	ldd	r25, Z+3	; 0x03
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e8       	ldi	r20, 0x80	; 128
    343a:	5f e3       	ldi	r21, 0x3F	; 63
    343c:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3440:	88 23       	and	r24, r24
    3442:	44 f4       	brge	.+16     	; 0x3454 <lcd_init+0x2b2>
		__ticks = 1;
    3444:	fe 01       	movw	r30, r28
    3446:	e2 58       	subi	r30, 0x82	; 130
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	91 83       	std	Z+1, r25	; 0x01
    3450:	80 83       	st	Z, r24
    3452:	64 c0       	rjmp	.+200    	; 0x351c <lcd_init+0x37a>
	else if (__tmp > 65535)
    3454:	fe 01       	movw	r30, r28
    3456:	e0 58       	subi	r30, 0x80	; 128
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	60 81       	ld	r22, Z
    345c:	71 81       	ldd	r23, Z+1	; 0x01
    345e:	82 81       	ldd	r24, Z+2	; 0x02
    3460:	93 81       	ldd	r25, Z+3	; 0x03
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	3f ef       	ldi	r19, 0xFF	; 255
    3466:	4f e7       	ldi	r20, 0x7F	; 127
    3468:	57 e4       	ldi	r21, 0x47	; 71
    346a:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    346e:	18 16       	cp	r1, r24
    3470:	0c f0       	brlt	.+2      	; 0x3474 <lcd_init+0x2d2>
    3472:	43 c0       	rjmp	.+134    	; 0x34fa <lcd_init+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3474:	fe 01       	movw	r30, r28
    3476:	ec 57       	subi	r30, 0x7C	; 124
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	60 81       	ld	r22, Z
    347c:	71 81       	ldd	r23, Z+1	; 0x01
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	93 81       	ldd	r25, Z+3	; 0x03
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e2       	ldi	r20, 0x20	; 32
    3488:	51 e4       	ldi	r21, 0x41	; 65
    348a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	8e 01       	movw	r16, r28
    3494:	02 58       	subi	r16, 0x82	; 130
    3496:	1f 4f       	sbci	r17, 0xFF	; 255
    3498:	bc 01       	movw	r22, r24
    349a:	cd 01       	movw	r24, r26
    349c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	f8 01       	movw	r30, r16
    34a6:	91 83       	std	Z+1, r25	; 0x01
    34a8:	80 83       	st	Z, r24
    34aa:	1f c0       	rjmp	.+62     	; 0x34ea <lcd_init+0x348>
    34ac:	fe 01       	movw	r30, r28
    34ae:	e4 58       	subi	r30, 0x84	; 132
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	88 ec       	ldi	r24, 0xC8	; 200
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	91 83       	std	Z+1, r25	; 0x01
    34b8:	80 83       	st	Z, r24
    34ba:	fe 01       	movw	r30, r28
    34bc:	e4 58       	subi	r30, 0x84	; 132
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	80 81       	ld	r24, Z
    34c2:	91 81       	ldd	r25, Z+1	; 0x01
    34c4:	01 97       	sbiw	r24, 0x01	; 1
    34c6:	f1 f7       	brne	.-4      	; 0x34c4 <lcd_init+0x322>
    34c8:	fe 01       	movw	r30, r28
    34ca:	e4 58       	subi	r30, 0x84	; 132
    34cc:	ff 4f       	sbci	r31, 0xFF	; 255
    34ce:	91 83       	std	Z+1, r25	; 0x01
    34d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d2:	de 01       	movw	r26, r28
    34d4:	a2 58       	subi	r26, 0x82	; 130
    34d6:	bf 4f       	sbci	r27, 0xFF	; 255
    34d8:	fe 01       	movw	r30, r28
    34da:	e2 58       	subi	r30, 0x82	; 130
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	80 81       	ld	r24, Z
    34e0:	91 81       	ldd	r25, Z+1	; 0x01
    34e2:	01 97       	sbiw	r24, 0x01	; 1
    34e4:	11 96       	adiw	r26, 0x01	; 1
    34e6:	9c 93       	st	X, r25
    34e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ea:	fe 01       	movw	r30, r28
    34ec:	e2 58       	subi	r30, 0x82	; 130
    34ee:	ff 4f       	sbci	r31, 0xFF	; 255
    34f0:	80 81       	ld	r24, Z
    34f2:	91 81       	ldd	r25, Z+1	; 0x01
    34f4:	00 97       	sbiw	r24, 0x00	; 0
    34f6:	d1 f6       	brne	.-76     	; 0x34ac <lcd_init+0x30a>
    34f8:	4b c0       	rjmp	.+150    	; 0x3590 <lcd_init+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34fa:	8e 01       	movw	r16, r28
    34fc:	02 58       	subi	r16, 0x82	; 130
    34fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3500:	fe 01       	movw	r30, r28
    3502:	e0 58       	subi	r30, 0x80	; 128
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	60 81       	ld	r22, Z
    3508:	71 81       	ldd	r23, Z+1	; 0x01
    350a:	82 81       	ldd	r24, Z+2	; 0x02
    350c:	93 81       	ldd	r25, Z+3	; 0x03
    350e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	f8 01       	movw	r30, r16
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	80 83       	st	Z, r24
    351c:	de 01       	movw	r26, r28
    351e:	a6 58       	subi	r26, 0x86	; 134
    3520:	bf 4f       	sbci	r27, 0xFF	; 255
    3522:	fe 01       	movw	r30, r28
    3524:	e2 58       	subi	r30, 0x82	; 130
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 81       	ld	r24, Z
    352a:	91 81       	ldd	r25, Z+1	; 0x01
    352c:	11 96       	adiw	r26, 0x01	; 1
    352e:	9c 93       	st	X, r25
    3530:	8e 93       	st	-X, r24
    3532:	fe 01       	movw	r30, r28
    3534:	e6 58       	subi	r30, 0x86	; 134
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	80 81       	ld	r24, Z
    353a:	91 81       	ldd	r25, Z+1	; 0x01
    353c:	01 97       	sbiw	r24, 0x01	; 1
    353e:	f1 f7       	brne	.-4      	; 0x353c <lcd_init+0x39a>
    3540:	fe 01       	movw	r30, r28
    3542:	e6 58       	subi	r30, 0x86	; 134
    3544:	ff 4f       	sbci	r31, 0xFF	; 255
    3546:	91 83       	std	Z+1, r25	; 0x01
    3548:	80 83       	st	Z, r24
    354a:	22 c0       	rjmp	.+68     	; 0x3590 <lcd_init+0x3ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    354c:	8e 01       	movw	r16, r28
    354e:	08 57       	subi	r16, 0x78	; 120
    3550:	1f 4f       	sbci	r17, 0xFF	; 255
    3552:	fe 01       	movw	r30, r28
    3554:	e7 57       	subi	r30, 0x77	; 119
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	60 81       	ld	r22, Z
    355a:	71 81       	ldd	r23, Z+1	; 0x01
    355c:	82 81       	ldd	r24, Z+2	; 0x02
    355e:	93 81       	ldd	r25, Z+3	; 0x03
    3560:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	f8 01       	movw	r30, r16
    356a:	80 83       	st	Z, r24
    356c:	de 01       	movw	r26, r28
    356e:	a7 58       	subi	r26, 0x87	; 135
    3570:	bf 4f       	sbci	r27, 0xFF	; 255
    3572:	fe 01       	movw	r30, r28
    3574:	e8 57       	subi	r30, 0x78	; 120
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	80 81       	ld	r24, Z
    357a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    357c:	fe 01       	movw	r30, r28
    357e:	e7 58       	subi	r30, 0x87	; 135
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 81       	ld	r24, Z
    3584:	8a 95       	dec	r24
    3586:	f1 f7       	brne	.-4      	; 0x3584 <lcd_init+0x3e2>
    3588:	fe 01       	movw	r30, r28
    358a:	e7 58       	subi	r30, 0x87	; 135
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	80 83       	st	Z, r24
	_delay_us(2000);
	lcd_command(0x33);
    3590:	83 e3       	ldi	r24, 0x33	; 51
    3592:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_command>
    3596:	fe 01       	movw	r30, r28
    3598:	eb 58       	subi	r30, 0x8B	; 139
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	a8 e4       	ldi	r26, 0x48	; 72
    35a2:	b2 e4       	ldi	r27, 0x42	; 66
    35a4:	80 83       	st	Z, r24
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	a2 83       	std	Z+2, r26	; 0x02
    35aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    35ac:	8e 01       	movw	r16, r28
    35ae:	0f 58       	subi	r16, 0x8F	; 143
    35b0:	1f 4f       	sbci	r17, 0xFF	; 255
    35b2:	fe 01       	movw	r30, r28
    35b4:	eb 58       	subi	r30, 0x8B	; 139
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	60 81       	ld	r22, Z
    35ba:	71 81       	ldd	r23, Z+1	; 0x01
    35bc:	82 81       	ldd	r24, Z+2	; 0x02
    35be:	93 81       	ldd	r25, Z+3	; 0x03
    35c0:	2b ea       	ldi	r18, 0xAB	; 171
    35c2:	3a ea       	ldi	r19, 0xAA	; 170
    35c4:	4a e2       	ldi	r20, 0x2A	; 42
    35c6:	50 e4       	ldi	r21, 0x40	; 64
    35c8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	f8 01       	movw	r30, r16
    35d2:	80 83       	st	Z, r24
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	a2 83       	std	Z+2, r26	; 0x02
    35d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35da:	fe 01       	movw	r30, r28
    35dc:	ef 58       	subi	r30, 0x8F	; 143
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	60 81       	ld	r22, Z
    35e2:	71 81       	ldd	r23, Z+1	; 0x01
    35e4:	82 81       	ldd	r24, Z+2	; 0x02
    35e6:	93 81       	ldd	r25, Z+3	; 0x03
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	30 e0       	ldi	r19, 0x00	; 0
    35ec:	40 e8       	ldi	r20, 0x80	; 128
    35ee:	5f e3       	ldi	r21, 0x3F	; 63
    35f0:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    35f4:	88 23       	and	r24, r24
    35f6:	34 f4       	brge	.+12     	; 0x3604 <lcd_init+0x462>
		__ticks = 1;
    35f8:	fe 01       	movw	r30, r28
    35fa:	e0 59       	subi	r30, 0x90	; 144
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	80 83       	st	Z, r24
    3602:	e0 c0       	rjmp	.+448    	; 0x37c4 <lcd_init+0x622>
	else if (__tmp > 255)
    3604:	fe 01       	movw	r30, r28
    3606:	ef 58       	subi	r30, 0x8F	; 143
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	60 81       	ld	r22, Z
    360c:	71 81       	ldd	r23, Z+1	; 0x01
    360e:	82 81       	ldd	r24, Z+2	; 0x02
    3610:	93 81       	ldd	r25, Z+3	; 0x03
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	4f e7       	ldi	r20, 0x7F	; 127
    3618:	53 e4       	ldi	r21, 0x43	; 67
    361a:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    361e:	18 16       	cp	r1, r24
    3620:	0c f0       	brlt	.+2      	; 0x3624 <lcd_init+0x482>
    3622:	c0 c0       	rjmp	.+384    	; 0x37a4 <lcd_init+0x602>
	{
		_delay_ms(__us / 1000.0);
    3624:	fe 01       	movw	r30, r28
    3626:	eb 58       	subi	r30, 0x8B	; 139
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	4a e7       	ldi	r20, 0x7A	; 122
    3638:	54 e4       	ldi	r21, 0x44	; 68
    363a:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    363e:	dc 01       	movw	r26, r24
    3640:	cb 01       	movw	r24, r22
    3642:	fe 01       	movw	r30, r28
    3644:	e4 59       	subi	r30, 0x94	; 148
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	80 83       	st	Z, r24
    364a:	91 83       	std	Z+1, r25	; 0x01
    364c:	a2 83       	std	Z+2, r26	; 0x02
    364e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3650:	8e 01       	movw	r16, r28
    3652:	08 59       	subi	r16, 0x98	; 152
    3654:	1f 4f       	sbci	r17, 0xFF	; 255
    3656:	fe 01       	movw	r30, r28
    3658:	e4 59       	subi	r30, 0x94	; 148
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	60 81       	ld	r22, Z
    365e:	71 81       	ldd	r23, Z+1	; 0x01
    3660:	82 81       	ldd	r24, Z+2	; 0x02
    3662:	93 81       	ldd	r25, Z+3	; 0x03
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	4a ef       	ldi	r20, 0xFA	; 250
    366a:	54 e4       	ldi	r21, 0x44	; 68
    366c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	f8 01       	movw	r30, r16
    3676:	80 83       	st	Z, r24
    3678:	91 83       	std	Z+1, r25	; 0x01
    367a:	a2 83       	std	Z+2, r26	; 0x02
    367c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    367e:	fe 01       	movw	r30, r28
    3680:	e8 59       	subi	r30, 0x98	; 152
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	60 81       	ld	r22, Z
    3686:	71 81       	ldd	r23, Z+1	; 0x01
    3688:	82 81       	ldd	r24, Z+2	; 0x02
    368a:	93 81       	ldd	r25, Z+3	; 0x03
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e8       	ldi	r20, 0x80	; 128
    3692:	5f e3       	ldi	r21, 0x3F	; 63
    3694:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3698:	88 23       	and	r24, r24
    369a:	44 f4       	brge	.+16     	; 0x36ac <lcd_init+0x50a>
		__ticks = 1;
    369c:	fe 01       	movw	r30, r28
    369e:	ea 59       	subi	r30, 0x9A	; 154
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	91 83       	std	Z+1, r25	; 0x01
    36a8:	80 83       	st	Z, r24
    36aa:	64 c0       	rjmp	.+200    	; 0x3774 <lcd_init+0x5d2>
	else if (__tmp > 65535)
    36ac:	fe 01       	movw	r30, r28
    36ae:	e8 59       	subi	r30, 0x98	; 152
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	60 81       	ld	r22, Z
    36b4:	71 81       	ldd	r23, Z+1	; 0x01
    36b6:	82 81       	ldd	r24, Z+2	; 0x02
    36b8:	93 81       	ldd	r25, Z+3	; 0x03
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	3f ef       	ldi	r19, 0xFF	; 255
    36be:	4f e7       	ldi	r20, 0x7F	; 127
    36c0:	57 e4       	ldi	r21, 0x47	; 71
    36c2:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    36c6:	18 16       	cp	r1, r24
    36c8:	0c f0       	brlt	.+2      	; 0x36cc <lcd_init+0x52a>
    36ca:	43 c0       	rjmp	.+134    	; 0x3752 <lcd_init+0x5b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36cc:	fe 01       	movw	r30, r28
    36ce:	e4 59       	subi	r30, 0x94	; 148
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	60 81       	ld	r22, Z
    36d4:	71 81       	ldd	r23, Z+1	; 0x01
    36d6:	82 81       	ldd	r24, Z+2	; 0x02
    36d8:	93 81       	ldd	r25, Z+3	; 0x03
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	40 e2       	ldi	r20, 0x20	; 32
    36e0:	51 e4       	ldi	r21, 0x41	; 65
    36e2:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	8e 01       	movw	r16, r28
    36ec:	0a 59       	subi	r16, 0x9A	; 154
    36ee:	1f 4f       	sbci	r17, 0xFF	; 255
    36f0:	bc 01       	movw	r22, r24
    36f2:	cd 01       	movw	r24, r26
    36f4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	f8 01       	movw	r30, r16
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	80 83       	st	Z, r24
    3702:	1f c0       	rjmp	.+62     	; 0x3742 <lcd_init+0x5a0>
    3704:	fe 01       	movw	r30, r28
    3706:	ec 59       	subi	r30, 0x9C	; 156
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	88 ec       	ldi	r24, 0xC8	; 200
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	91 83       	std	Z+1, r25	; 0x01
    3710:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3712:	fe 01       	movw	r30, r28
    3714:	ec 59       	subi	r30, 0x9C	; 156
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	80 81       	ld	r24, Z
    371a:	91 81       	ldd	r25, Z+1	; 0x01
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	f1 f7       	brne	.-4      	; 0x371c <lcd_init+0x57a>
    3720:	fe 01       	movw	r30, r28
    3722:	ec 59       	subi	r30, 0x9C	; 156
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	91 83       	std	Z+1, r25	; 0x01
    3728:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    372a:	de 01       	movw	r26, r28
    372c:	aa 59       	subi	r26, 0x9A	; 154
    372e:	bf 4f       	sbci	r27, 0xFF	; 255
    3730:	fe 01       	movw	r30, r28
    3732:	ea 59       	subi	r30, 0x9A	; 154
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	80 81       	ld	r24, Z
    3738:	91 81       	ldd	r25, Z+1	; 0x01
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	11 96       	adiw	r26, 0x01	; 1
    373e:	9c 93       	st	X, r25
    3740:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3742:	fe 01       	movw	r30, r28
    3744:	ea 59       	subi	r30, 0x9A	; 154
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	80 81       	ld	r24, Z
    374a:	91 81       	ldd	r25, Z+1	; 0x01
    374c:	00 97       	sbiw	r24, 0x00	; 0
    374e:	d1 f6       	brne	.-76     	; 0x3704 <lcd_init+0x562>
    3750:	4b c0       	rjmp	.+150    	; 0x37e8 <lcd_init+0x646>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3752:	8e 01       	movw	r16, r28
    3754:	0a 59       	subi	r16, 0x9A	; 154
    3756:	1f 4f       	sbci	r17, 0xFF	; 255
    3758:	fe 01       	movw	r30, r28
    375a:	e8 59       	subi	r30, 0x98	; 152
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	60 81       	ld	r22, Z
    3760:	71 81       	ldd	r23, Z+1	; 0x01
    3762:	82 81       	ldd	r24, Z+2	; 0x02
    3764:	93 81       	ldd	r25, Z+3	; 0x03
    3766:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	f8 01       	movw	r30, r16
    3770:	91 83       	std	Z+1, r25	; 0x01
    3772:	80 83       	st	Z, r24
    3774:	de 01       	movw	r26, r28
    3776:	ae 59       	subi	r26, 0x9E	; 158
    3778:	bf 4f       	sbci	r27, 0xFF	; 255
    377a:	fe 01       	movw	r30, r28
    377c:	ea 59       	subi	r30, 0x9A	; 154
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	80 81       	ld	r24, Z
    3782:	91 81       	ldd	r25, Z+1	; 0x01
    3784:	11 96       	adiw	r26, 0x01	; 1
    3786:	9c 93       	st	X, r25
    3788:	8e 93       	st	-X, r24
    378a:	fe 01       	movw	r30, r28
    378c:	ee 59       	subi	r30, 0x9E	; 158
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	80 81       	ld	r24, Z
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	f1 f7       	brne	.-4      	; 0x3794 <lcd_init+0x5f2>
    3798:	fe 01       	movw	r30, r28
    379a:	ee 59       	subi	r30, 0x9E	; 158
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	91 83       	std	Z+1, r25	; 0x01
    37a0:	80 83       	st	Z, r24
    37a2:	22 c0       	rjmp	.+68     	; 0x37e8 <lcd_init+0x646>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37a4:	8e 01       	movw	r16, r28
    37a6:	00 59       	subi	r16, 0x90	; 144
    37a8:	1f 4f       	sbci	r17, 0xFF	; 255
    37aa:	fe 01       	movw	r30, r28
    37ac:	ef 58       	subi	r30, 0x8F	; 143
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	60 81       	ld	r22, Z
    37b2:	71 81       	ldd	r23, Z+1	; 0x01
    37b4:	82 81       	ldd	r24, Z+2	; 0x02
    37b6:	93 81       	ldd	r25, Z+3	; 0x03
    37b8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    37bc:	dc 01       	movw	r26, r24
    37be:	cb 01       	movw	r24, r22
    37c0:	f8 01       	movw	r30, r16
    37c2:	80 83       	st	Z, r24
    37c4:	de 01       	movw	r26, r28
    37c6:	af 59       	subi	r26, 0x9F	; 159
    37c8:	bf 4f       	sbci	r27, 0xFF	; 255
    37ca:	fe 01       	movw	r30, r28
    37cc:	e0 59       	subi	r30, 0x90	; 144
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	80 81       	ld	r24, Z
    37d2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37d4:	fe 01       	movw	r30, r28
    37d6:	ef 59       	subi	r30, 0x9F	; 159
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	80 81       	ld	r24, Z
    37dc:	8a 95       	dec	r24
    37de:	f1 f7       	brne	.-4      	; 0x37dc <lcd_init+0x63a>
    37e0:	fe 01       	movw	r30, r28
    37e2:	ef 59       	subi	r30, 0x9F	; 159
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	80 83       	st	Z, r24
	_delay_us(50);
	lcd_command(0x32);
    37e8:	82 e3       	ldi	r24, 0x32	; 50
    37ea:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_command>
    37ee:	fe 01       	movw	r30, r28
    37f0:	e3 5a       	subi	r30, 0xA3	; 163
    37f2:	ff 4f       	sbci	r31, 0xFF	; 255
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	a8 e4       	ldi	r26, 0x48	; 72
    37fa:	b2 e4       	ldi	r27, 0x42	; 66
    37fc:	80 83       	st	Z, r24
    37fe:	91 83       	std	Z+1, r25	; 0x01
    3800:	a2 83       	std	Z+2, r26	; 0x02
    3802:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3804:	8e 01       	movw	r16, r28
    3806:	07 5a       	subi	r16, 0xA7	; 167
    3808:	1f 4f       	sbci	r17, 0xFF	; 255
    380a:	fe 01       	movw	r30, r28
    380c:	e3 5a       	subi	r30, 0xA3	; 163
    380e:	ff 4f       	sbci	r31, 0xFF	; 255
    3810:	60 81       	ld	r22, Z
    3812:	71 81       	ldd	r23, Z+1	; 0x01
    3814:	82 81       	ldd	r24, Z+2	; 0x02
    3816:	93 81       	ldd	r25, Z+3	; 0x03
    3818:	2b ea       	ldi	r18, 0xAB	; 171
    381a:	3a ea       	ldi	r19, 0xAA	; 170
    381c:	4a e2       	ldi	r20, 0x2A	; 42
    381e:	50 e4       	ldi	r21, 0x40	; 64
    3820:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	f8 01       	movw	r30, r16
    382a:	80 83       	st	Z, r24
    382c:	91 83       	std	Z+1, r25	; 0x01
    382e:	a2 83       	std	Z+2, r26	; 0x02
    3830:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3832:	fe 01       	movw	r30, r28
    3834:	e7 5a       	subi	r30, 0xA7	; 167
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	60 81       	ld	r22, Z
    383a:	71 81       	ldd	r23, Z+1	; 0x01
    383c:	82 81       	ldd	r24, Z+2	; 0x02
    383e:	93 81       	ldd	r25, Z+3	; 0x03
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	40 e8       	ldi	r20, 0x80	; 128
    3846:	5f e3       	ldi	r21, 0x3F	; 63
    3848:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    384c:	88 23       	and	r24, r24
    384e:	34 f4       	brge	.+12     	; 0x385c <lcd_init+0x6ba>
		__ticks = 1;
    3850:	fe 01       	movw	r30, r28
    3852:	e8 5a       	subi	r30, 0xA8	; 168
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	80 83       	st	Z, r24
    385a:	e0 c0       	rjmp	.+448    	; 0x3a1c <lcd_init+0x87a>
	else if (__tmp > 255)
    385c:	fe 01       	movw	r30, r28
    385e:	e7 5a       	subi	r30, 0xA7	; 167
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	60 81       	ld	r22, Z
    3864:	71 81       	ldd	r23, Z+1	; 0x01
    3866:	82 81       	ldd	r24, Z+2	; 0x02
    3868:	93 81       	ldd	r25, Z+3	; 0x03
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	4f e7       	ldi	r20, 0x7F	; 127
    3870:	53 e4       	ldi	r21, 0x43	; 67
    3872:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    3876:	18 16       	cp	r1, r24
    3878:	0c f0       	brlt	.+2      	; 0x387c <lcd_init+0x6da>
    387a:	c0 c0       	rjmp	.+384    	; 0x39fc <lcd_init+0x85a>
	{
		_delay_ms(__us / 1000.0);
    387c:	fe 01       	movw	r30, r28
    387e:	e3 5a       	subi	r30, 0xA3	; 163
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	60 81       	ld	r22, Z
    3884:	71 81       	ldd	r23, Z+1	; 0x01
    3886:	82 81       	ldd	r24, Z+2	; 0x02
    3888:	93 81       	ldd	r25, Z+3	; 0x03
    388a:	20 e0       	ldi	r18, 0x00	; 0
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	4a e7       	ldi	r20, 0x7A	; 122
    3890:	54 e4       	ldi	r21, 0x44	; 68
    3892:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	fe 01       	movw	r30, r28
    389c:	ec 5a       	subi	r30, 0xAC	; 172
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	80 83       	st	Z, r24
    38a2:	91 83       	std	Z+1, r25	; 0x01
    38a4:	a2 83       	std	Z+2, r26	; 0x02
    38a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a8:	8e 01       	movw	r16, r28
    38aa:	00 5b       	subi	r16, 0xB0	; 176
    38ac:	1f 4f       	sbci	r17, 0xFF	; 255
    38ae:	fe 01       	movw	r30, r28
    38b0:	ec 5a       	subi	r30, 0xAC	; 172
    38b2:	ff 4f       	sbci	r31, 0xFF	; 255
    38b4:	60 81       	ld	r22, Z
    38b6:	71 81       	ldd	r23, Z+1	; 0x01
    38b8:	82 81       	ldd	r24, Z+2	; 0x02
    38ba:	93 81       	ldd	r25, Z+3	; 0x03
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	4a ef       	ldi	r20, 0xFA	; 250
    38c2:	54 e4       	ldi	r21, 0x44	; 68
    38c4:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	f8 01       	movw	r30, r16
    38ce:	80 83       	st	Z, r24
    38d0:	91 83       	std	Z+1, r25	; 0x01
    38d2:	a2 83       	std	Z+2, r26	; 0x02
    38d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38d6:	fe 01       	movw	r30, r28
    38d8:	e0 5b       	subi	r30, 0xB0	; 176
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	60 81       	ld	r22, Z
    38de:	71 81       	ldd	r23, Z+1	; 0x01
    38e0:	82 81       	ldd	r24, Z+2	; 0x02
    38e2:	93 81       	ldd	r25, Z+3	; 0x03
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	40 e8       	ldi	r20, 0x80	; 128
    38ea:	5f e3       	ldi	r21, 0x3F	; 63
    38ec:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    38f0:	88 23       	and	r24, r24
    38f2:	44 f4       	brge	.+16     	; 0x3904 <lcd_init+0x762>
		__ticks = 1;
    38f4:	fe 01       	movw	r30, r28
    38f6:	e2 5b       	subi	r30, 0xB2	; 178
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	91 83       	std	Z+1, r25	; 0x01
    3900:	80 83       	st	Z, r24
    3902:	64 c0       	rjmp	.+200    	; 0x39cc <lcd_init+0x82a>
	else if (__tmp > 65535)
    3904:	fe 01       	movw	r30, r28
    3906:	e0 5b       	subi	r30, 0xB0	; 176
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	60 81       	ld	r22, Z
    390c:	71 81       	ldd	r23, Z+1	; 0x01
    390e:	82 81       	ldd	r24, Z+2	; 0x02
    3910:	93 81       	ldd	r25, Z+3	; 0x03
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	3f ef       	ldi	r19, 0xFF	; 255
    3916:	4f e7       	ldi	r20, 0x7F	; 127
    3918:	57 e4       	ldi	r21, 0x47	; 71
    391a:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    391e:	18 16       	cp	r1, r24
    3920:	0c f0       	brlt	.+2      	; 0x3924 <lcd_init+0x782>
    3922:	43 c0       	rjmp	.+134    	; 0x39aa <lcd_init+0x808>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3924:	fe 01       	movw	r30, r28
    3926:	ec 5a       	subi	r30, 0xAC	; 172
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	60 81       	ld	r22, Z
    392c:	71 81       	ldd	r23, Z+1	; 0x01
    392e:	82 81       	ldd	r24, Z+2	; 0x02
    3930:	93 81       	ldd	r25, Z+3	; 0x03
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	40 e2       	ldi	r20, 0x20	; 32
    3938:	51 e4       	ldi	r21, 0x41	; 65
    393a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	8e 01       	movw	r16, r28
    3944:	02 5b       	subi	r16, 0xB2	; 178
    3946:	1f 4f       	sbci	r17, 0xFF	; 255
    3948:	bc 01       	movw	r22, r24
    394a:	cd 01       	movw	r24, r26
    394c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	f8 01       	movw	r30, r16
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	80 83       	st	Z, r24
    395a:	1f c0       	rjmp	.+62     	; 0x399a <lcd_init+0x7f8>
    395c:	fe 01       	movw	r30, r28
    395e:	e4 5b       	subi	r30, 0xB4	; 180
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	88 ec       	ldi	r24, 0xC8	; 200
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	91 83       	std	Z+1, r25	; 0x01
    3968:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    396a:	fe 01       	movw	r30, r28
    396c:	e4 5b       	subi	r30, 0xB4	; 180
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	80 81       	ld	r24, Z
    3972:	91 81       	ldd	r25, Z+1	; 0x01
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	f1 f7       	brne	.-4      	; 0x3974 <lcd_init+0x7d2>
    3978:	fe 01       	movw	r30, r28
    397a:	e4 5b       	subi	r30, 0xB4	; 180
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	91 83       	std	Z+1, r25	; 0x01
    3980:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3982:	de 01       	movw	r26, r28
    3984:	a2 5b       	subi	r26, 0xB2	; 178
    3986:	bf 4f       	sbci	r27, 0xFF	; 255
    3988:	fe 01       	movw	r30, r28
    398a:	e2 5b       	subi	r30, 0xB2	; 178
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	80 81       	ld	r24, Z
    3990:	91 81       	ldd	r25, Z+1	; 0x01
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	11 96       	adiw	r26, 0x01	; 1
    3996:	9c 93       	st	X, r25
    3998:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399a:	fe 01       	movw	r30, r28
    399c:	e2 5b       	subi	r30, 0xB2	; 178
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	80 81       	ld	r24, Z
    39a2:	91 81       	ldd	r25, Z+1	; 0x01
    39a4:	00 97       	sbiw	r24, 0x00	; 0
    39a6:	d1 f6       	brne	.-76     	; 0x395c <lcd_init+0x7ba>
    39a8:	4b c0       	rjmp	.+150    	; 0x3a40 <lcd_init+0x89e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39aa:	8e 01       	movw	r16, r28
    39ac:	02 5b       	subi	r16, 0xB2	; 178
    39ae:	1f 4f       	sbci	r17, 0xFF	; 255
    39b0:	fe 01       	movw	r30, r28
    39b2:	e0 5b       	subi	r30, 0xB0	; 176
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	60 81       	ld	r22, Z
    39b8:	71 81       	ldd	r23, Z+1	; 0x01
    39ba:	82 81       	ldd	r24, Z+2	; 0x02
    39bc:	93 81       	ldd	r25, Z+3	; 0x03
    39be:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	f8 01       	movw	r30, r16
    39c8:	91 83       	std	Z+1, r25	; 0x01
    39ca:	80 83       	st	Z, r24
    39cc:	de 01       	movw	r26, r28
    39ce:	a6 5b       	subi	r26, 0xB6	; 182
    39d0:	bf 4f       	sbci	r27, 0xFF	; 255
    39d2:	fe 01       	movw	r30, r28
    39d4:	e2 5b       	subi	r30, 0xB2	; 178
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 81       	ld	r24, Z
    39da:	91 81       	ldd	r25, Z+1	; 0x01
    39dc:	11 96       	adiw	r26, 0x01	; 1
    39de:	9c 93       	st	X, r25
    39e0:	8e 93       	st	-X, r24
    39e2:	fe 01       	movw	r30, r28
    39e4:	e6 5b       	subi	r30, 0xB6	; 182
    39e6:	ff 4f       	sbci	r31, 0xFF	; 255
    39e8:	80 81       	ld	r24, Z
    39ea:	91 81       	ldd	r25, Z+1	; 0x01
    39ec:	01 97       	sbiw	r24, 0x01	; 1
    39ee:	f1 f7       	brne	.-4      	; 0x39ec <lcd_init+0x84a>
    39f0:	fe 01       	movw	r30, r28
    39f2:	e6 5b       	subi	r30, 0xB6	; 182
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	91 83       	std	Z+1, r25	; 0x01
    39f8:	80 83       	st	Z, r24
    39fa:	22 c0       	rjmp	.+68     	; 0x3a40 <lcd_init+0x89e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39fc:	8e 01       	movw	r16, r28
    39fe:	08 5a       	subi	r16, 0xA8	; 168
    3a00:	1f 4f       	sbci	r17, 0xFF	; 255
    3a02:	fe 01       	movw	r30, r28
    3a04:	e7 5a       	subi	r30, 0xA7	; 167
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	60 81       	ld	r22, Z
    3a0a:	71 81       	ldd	r23, Z+1	; 0x01
    3a0c:	82 81       	ldd	r24, Z+2	; 0x02
    3a0e:	93 81       	ldd	r25, Z+3	; 0x03
    3a10:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	f8 01       	movw	r30, r16
    3a1a:	80 83       	st	Z, r24
    3a1c:	de 01       	movw	r26, r28
    3a1e:	a7 5b       	subi	r26, 0xB7	; 183
    3a20:	bf 4f       	sbci	r27, 0xFF	; 255
    3a22:	fe 01       	movw	r30, r28
    3a24:	e8 5a       	subi	r30, 0xA8	; 168
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	80 81       	ld	r24, Z
    3a2a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	e7 5b       	subi	r30, 0xB7	; 183
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	80 81       	ld	r24, Z
    3a34:	8a 95       	dec	r24
    3a36:	f1 f7       	brne	.-4      	; 0x3a34 <lcd_init+0x892>
    3a38:	fe 01       	movw	r30, r28
    3a3a:	e7 5b       	subi	r30, 0xB7	; 183
    3a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3e:	80 83       	st	Z, r24
	_delay_us(50);
	lcd_command(0x28);
    3a40:	88 e2       	ldi	r24, 0x28	; 40
    3a42:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_command>
    3a46:	fe 01       	movw	r30, r28
    3a48:	eb 5b       	subi	r30, 0xBB	; 187
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	a8 e4       	ldi	r26, 0x48	; 72
    3a52:	b2 e4       	ldi	r27, 0x42	; 66
    3a54:	80 83       	st	Z, r24
    3a56:	91 83       	std	Z+1, r25	; 0x01
    3a58:	a2 83       	std	Z+2, r26	; 0x02
    3a5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a5c:	8e 01       	movw	r16, r28
    3a5e:	0f 5b       	subi	r16, 0xBF	; 191
    3a60:	1f 4f       	sbci	r17, 0xFF	; 255
    3a62:	fe 01       	movw	r30, r28
    3a64:	eb 5b       	subi	r30, 0xBB	; 187
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	60 81       	ld	r22, Z
    3a6a:	71 81       	ldd	r23, Z+1	; 0x01
    3a6c:	82 81       	ldd	r24, Z+2	; 0x02
    3a6e:	93 81       	ldd	r25, Z+3	; 0x03
    3a70:	2b ea       	ldi	r18, 0xAB	; 171
    3a72:	3a ea       	ldi	r19, 0xAA	; 170
    3a74:	4a e2       	ldi	r20, 0x2A	; 42
    3a76:	50 e4       	ldi	r21, 0x40	; 64
    3a78:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	f8 01       	movw	r30, r16
    3a82:	80 83       	st	Z, r24
    3a84:	91 83       	std	Z+1, r25	; 0x01
    3a86:	a2 83       	std	Z+2, r26	; 0x02
    3a88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	ef 5b       	subi	r30, 0xBF	; 191
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	60 81       	ld	r22, Z
    3a92:	71 81       	ldd	r23, Z+1	; 0x01
    3a94:	82 81       	ldd	r24, Z+2	; 0x02
    3a96:	93 81       	ldd	r25, Z+3	; 0x03
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	40 e8       	ldi	r20, 0x80	; 128
    3a9e:	5f e3       	ldi	r21, 0x3F	; 63
    3aa0:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3aa4:	88 23       	and	r24, r24
    3aa6:	34 f4       	brge	.+12     	; 0x3ab4 <lcd_init+0x912>
		__ticks = 1;
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e0 5c       	subi	r30, 0xC0	; 192
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	80 83       	st	Z, r24
    3ab2:	9d c0       	rjmp	.+314    	; 0x3bee <lcd_init+0xa4c>
	else if (__tmp > 255)
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	ef 5b       	subi	r30, 0xBF	; 191
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	60 81       	ld	r22, Z
    3abc:	71 81       	ldd	r23, Z+1	; 0x01
    3abe:	82 81       	ldd	r24, Z+2	; 0x02
    3ac0:	93 81       	ldd	r25, Z+3	; 0x03
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	4f e7       	ldi	r20, 0x7F	; 127
    3ac8:	53 e4       	ldi	r21, 0x43	; 67
    3aca:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    3ace:	18 16       	cp	r1, r24
    3ad0:	0c f0       	brlt	.+2      	; 0x3ad4 <lcd_init+0x932>
    3ad2:	7e c0       	rjmp	.+252    	; 0x3bd0 <lcd_init+0xa2e>
	{
		_delay_ms(__us / 1000.0);
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	eb 5b       	subi	r30, 0xBB	; 187
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	60 81       	ld	r22, Z
    3adc:	71 81       	ldd	r23, Z+1	; 0x01
    3ade:	82 81       	ldd	r24, Z+2	; 0x02
    3ae0:	93 81       	ldd	r25, Z+3	; 0x03
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	4a e7       	ldi	r20, 0x7A	; 122
    3ae8:	54 e4       	ldi	r21, 0x44	; 68
    3aea:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	8c af       	std	Y+60, r24	; 0x3c
    3af4:	9d af       	std	Y+61, r25	; 0x3d
    3af6:	ae af       	std	Y+62, r26	; 0x3e
    3af8:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afa:	6c ad       	ldd	r22, Y+60	; 0x3c
    3afc:	7d ad       	ldd	r23, Y+61	; 0x3d
    3afe:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b00:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	4a ef       	ldi	r20, 0xFA	; 250
    3b08:	54 e4       	ldi	r21, 0x44	; 68
    3b0a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	88 af       	std	Y+56, r24	; 0x38
    3b14:	99 af       	std	Y+57, r25	; 0x39
    3b16:	aa af       	std	Y+58, r26	; 0x3a
    3b18:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3b1a:	68 ad       	ldd	r22, Y+56	; 0x38
    3b1c:	79 ad       	ldd	r23, Y+57	; 0x39
    3b1e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b20:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	40 e8       	ldi	r20, 0x80	; 128
    3b28:	5f e3       	ldi	r21, 0x3F	; 63
    3b2a:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3b2e:	88 23       	and	r24, r24
    3b30:	2c f4       	brge	.+10     	; 0x3b3c <lcd_init+0x99a>
		__ticks = 1;
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	9f ab       	std	Y+55, r25	; 0x37
    3b38:	8e ab       	std	Y+54, r24	; 0x36
    3b3a:	3f c0       	rjmp	.+126    	; 0x3bba <lcd_init+0xa18>
	else if (__tmp > 65535)
    3b3c:	68 ad       	ldd	r22, Y+56	; 0x38
    3b3e:	79 ad       	ldd	r23, Y+57	; 0x39
    3b40:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b42:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	3f ef       	ldi	r19, 0xFF	; 255
    3b48:	4f e7       	ldi	r20, 0x7F	; 127
    3b4a:	57 e4       	ldi	r21, 0x47	; 71
    3b4c:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    3b50:	18 16       	cp	r1, r24
    3b52:	4c f5       	brge	.+82     	; 0x3ba6 <lcd_init+0xa04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b54:	6c ad       	ldd	r22, Y+60	; 0x3c
    3b56:	7d ad       	ldd	r23, Y+61	; 0x3d
    3b58:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e2       	ldi	r20, 0x20	; 32
    3b62:	51 e4       	ldi	r21, 0x41	; 65
    3b64:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	bc 01       	movw	r22, r24
    3b6e:	cd 01       	movw	r24, r26
    3b70:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	9f ab       	std	Y+55, r25	; 0x37
    3b7a:	8e ab       	std	Y+54, r24	; 0x36
    3b7c:	0f c0       	rjmp	.+30     	; 0x3b9c <lcd_init+0x9fa>
    3b7e:	88 ec       	ldi	r24, 0xC8	; 200
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	9d ab       	std	Y+53, r25	; 0x35
    3b84:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b86:	8c a9       	ldd	r24, Y+52	; 0x34
    3b88:	9d a9       	ldd	r25, Y+53	; 0x35
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	f1 f7       	brne	.-4      	; 0x3b8a <lcd_init+0x9e8>
    3b8e:	9d ab       	std	Y+53, r25	; 0x35
    3b90:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b92:	8e a9       	ldd	r24, Y+54	; 0x36
    3b94:	9f a9       	ldd	r25, Y+55	; 0x37
    3b96:	01 97       	sbiw	r24, 0x01	; 1
    3b98:	9f ab       	std	Y+55, r25	; 0x37
    3b9a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b9c:	8e a9       	ldd	r24, Y+54	; 0x36
    3b9e:	9f a9       	ldd	r25, Y+55	; 0x37
    3ba0:	00 97       	sbiw	r24, 0x00	; 0
    3ba2:	69 f7       	brne	.-38     	; 0x3b7e <lcd_init+0x9dc>
    3ba4:	2d c0       	rjmp	.+90     	; 0x3c00 <lcd_init+0xa5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba6:	68 ad       	ldd	r22, Y+56	; 0x38
    3ba8:	79 ad       	ldd	r23, Y+57	; 0x39
    3baa:	8a ad       	ldd	r24, Y+58	; 0x3a
    3bac:	9b ad       	ldd	r25, Y+59	; 0x3b
    3bae:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	9f ab       	std	Y+55, r25	; 0x37
    3bb8:	8e ab       	std	Y+54, r24	; 0x36
    3bba:	8e a9       	ldd	r24, Y+54	; 0x36
    3bbc:	9f a9       	ldd	r25, Y+55	; 0x37
    3bbe:	9b ab       	std	Y+51, r25	; 0x33
    3bc0:	8a ab       	std	Y+50, r24	; 0x32
    3bc2:	8a a9       	ldd	r24, Y+50	; 0x32
    3bc4:	9b a9       	ldd	r25, Y+51	; 0x33
    3bc6:	01 97       	sbiw	r24, 0x01	; 1
    3bc8:	f1 f7       	brne	.-4      	; 0x3bc6 <lcd_init+0xa24>
    3bca:	9b ab       	std	Y+51, r25	; 0x33
    3bcc:	8a ab       	std	Y+50, r24	; 0x32
    3bce:	18 c0       	rjmp	.+48     	; 0x3c00 <lcd_init+0xa5e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bd0:	fe 01       	movw	r30, r28
    3bd2:	ef 5b       	subi	r30, 0xBF	; 191
    3bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd6:	60 81       	ld	r22, Z
    3bd8:	71 81       	ldd	r23, Z+1	; 0x01
    3bda:	82 81       	ldd	r24, Z+2	; 0x02
    3bdc:	93 81       	ldd	r25, Z+3	; 0x03
    3bde:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	fe 01       	movw	r30, r28
    3be8:	e0 5c       	subi	r30, 0xC0	; 192
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	80 83       	st	Z, r24
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e0 5c       	subi	r30, 0xC0	; 192
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	80 81       	ld	r24, Z
    3bf6:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3bf8:	89 a9       	ldd	r24, Y+49	; 0x31
    3bfa:	8a 95       	dec	r24
    3bfc:	f1 f7       	brne	.-4      	; 0x3bfa <lcd_init+0xa58>
    3bfe:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	lcd_command(0x0E);
    3c00:	8e e0       	ldi	r24, 0x0E	; 14
    3c02:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_command>
    3c06:	80 e0       	ldi	r24, 0x00	; 0
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	a8 e4       	ldi	r26, 0x48	; 72
    3c0c:	b2 e4       	ldi	r27, 0x42	; 66
    3c0e:	8d a7       	std	Y+45, r24	; 0x2d
    3c10:	9e a7       	std	Y+46, r25	; 0x2e
    3c12:	af a7       	std	Y+47, r26	; 0x2f
    3c14:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c16:	6d a5       	ldd	r22, Y+45	; 0x2d
    3c18:	7e a5       	ldd	r23, Y+46	; 0x2e
    3c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c1c:	98 a9       	ldd	r25, Y+48	; 0x30
    3c1e:	2b ea       	ldi	r18, 0xAB	; 171
    3c20:	3a ea       	ldi	r19, 0xAA	; 170
    3c22:	4a e2       	ldi	r20, 0x2A	; 42
    3c24:	50 e4       	ldi	r21, 0x40	; 64
    3c26:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	89 a7       	std	Y+41, r24	; 0x29
    3c30:	9a a7       	std	Y+42, r25	; 0x2a
    3c32:	ab a7       	std	Y+43, r26	; 0x2b
    3c34:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3c36:	69 a5       	ldd	r22, Y+41	; 0x29
    3c38:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	40 e8       	ldi	r20, 0x80	; 128
    3c44:	5f e3       	ldi	r21, 0x3F	; 63
    3c46:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3c4a:	88 23       	and	r24, r24
    3c4c:	1c f4       	brge	.+6      	; 0x3c54 <lcd_init+0xab2>
		__ticks = 1;
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	88 a7       	std	Y+40, r24	; 0x28
    3c52:	91 c0       	rjmp	.+290    	; 0x3d76 <lcd_init+0xbd4>
	else if (__tmp > 255)
    3c54:	69 a5       	ldd	r22, Y+41	; 0x29
    3c56:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c58:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c5a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	4f e7       	ldi	r20, 0x7F	; 127
    3c62:	53 e4       	ldi	r21, 0x43	; 67
    3c64:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    3c68:	18 16       	cp	r1, r24
    3c6a:	0c f0       	brlt	.+2      	; 0x3c6e <lcd_init+0xacc>
    3c6c:	7b c0       	rjmp	.+246    	; 0x3d64 <lcd_init+0xbc2>
	{
		_delay_ms(__us / 1000.0);
    3c6e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3c70:	7e a5       	ldd	r23, Y+46	; 0x2e
    3c72:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c74:	98 a9       	ldd	r25, Y+48	; 0x30
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	4a e7       	ldi	r20, 0x7A	; 122
    3c7c:	54 e4       	ldi	r21, 0x44	; 68
    3c7e:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	8c a3       	std	Y+36, r24	; 0x24
    3c88:	9d a3       	std	Y+37, r25	; 0x25
    3c8a:	ae a3       	std	Y+38, r26	; 0x26
    3c8c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c8e:	6c a1       	ldd	r22, Y+36	; 0x24
    3c90:	7d a1       	ldd	r23, Y+37	; 0x25
    3c92:	8e a1       	ldd	r24, Y+38	; 0x26
    3c94:	9f a1       	ldd	r25, Y+39	; 0x27
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	4a ef       	ldi	r20, 0xFA	; 250
    3c9c:	54 e4       	ldi	r21, 0x44	; 68
    3c9e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	88 a3       	std	Y+32, r24	; 0x20
    3ca8:	99 a3       	std	Y+33, r25	; 0x21
    3caa:	aa a3       	std	Y+34, r26	; 0x22
    3cac:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3cae:	68 a1       	ldd	r22, Y+32	; 0x20
    3cb0:	79 a1       	ldd	r23, Y+33	; 0x21
    3cb2:	8a a1       	ldd	r24, Y+34	; 0x22
    3cb4:	9b a1       	ldd	r25, Y+35	; 0x23
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	40 e8       	ldi	r20, 0x80	; 128
    3cbc:	5f e3       	ldi	r21, 0x3F	; 63
    3cbe:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3cc2:	88 23       	and	r24, r24
    3cc4:	2c f4       	brge	.+10     	; 0x3cd0 <lcd_init+0xb2e>
		__ticks = 1;
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	9f 8f       	std	Y+31, r25	; 0x1f
    3ccc:	8e 8f       	std	Y+30, r24	; 0x1e
    3cce:	3f c0       	rjmp	.+126    	; 0x3d4e <lcd_init+0xbac>
	else if (__tmp > 65535)
    3cd0:	68 a1       	ldd	r22, Y+32	; 0x20
    3cd2:	79 a1       	ldd	r23, Y+33	; 0x21
    3cd4:	8a a1       	ldd	r24, Y+34	; 0x22
    3cd6:	9b a1       	ldd	r25, Y+35	; 0x23
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	3f ef       	ldi	r19, 0xFF	; 255
    3cdc:	4f e7       	ldi	r20, 0x7F	; 127
    3cde:	57 e4       	ldi	r21, 0x47	; 71
    3ce0:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    3ce4:	18 16       	cp	r1, r24
    3ce6:	4c f5       	brge	.+82     	; 0x3d3a <lcd_init+0xb98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce8:	6c a1       	ldd	r22, Y+36	; 0x24
    3cea:	7d a1       	ldd	r23, Y+37	; 0x25
    3cec:	8e a1       	ldd	r24, Y+38	; 0x26
    3cee:	9f a1       	ldd	r25, Y+39	; 0x27
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	40 e2       	ldi	r20, 0x20	; 32
    3cf6:	51 e4       	ldi	r21, 0x41	; 65
    3cf8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	bc 01       	movw	r22, r24
    3d02:	cd 01       	movw	r24, r26
    3d04:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3d08:	dc 01       	movw	r26, r24
    3d0a:	cb 01       	movw	r24, r22
    3d0c:	9f 8f       	std	Y+31, r25	; 0x1f
    3d0e:	8e 8f       	std	Y+30, r24	; 0x1e
    3d10:	0f c0       	rjmp	.+30     	; 0x3d30 <lcd_init+0xb8e>
    3d12:	88 ec       	ldi	r24, 0xC8	; 200
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	9d 8f       	std	Y+29, r25	; 0x1d
    3d18:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d1c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d1e:	01 97       	sbiw	r24, 0x01	; 1
    3d20:	f1 f7       	brne	.-4      	; 0x3d1e <lcd_init+0xb7c>
    3d22:	9d 8f       	std	Y+29, r25	; 0x1d
    3d24:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d28:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d2a:	01 97       	sbiw	r24, 0x01	; 1
    3d2c:	9f 8f       	std	Y+31, r25	; 0x1f
    3d2e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d32:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d34:	00 97       	sbiw	r24, 0x00	; 0
    3d36:	69 f7       	brne	.-38     	; 0x3d12 <lcd_init+0xb70>
    3d38:	24 c0       	rjmp	.+72     	; 0x3d82 <lcd_init+0xbe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d3a:	68 a1       	ldd	r22, Y+32	; 0x20
    3d3c:	79 a1       	ldd	r23, Y+33	; 0x21
    3d3e:	8a a1       	ldd	r24, Y+34	; 0x22
    3d40:	9b a1       	ldd	r25, Y+35	; 0x23
    3d42:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	9f 8f       	std	Y+31, r25	; 0x1f
    3d4c:	8e 8f       	std	Y+30, r24	; 0x1e
    3d4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d50:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d52:	9b 8f       	std	Y+27, r25	; 0x1b
    3d54:	8a 8f       	std	Y+26, r24	; 0x1a
    3d56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d58:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d5a:	01 97       	sbiw	r24, 0x01	; 1
    3d5c:	f1 f7       	brne	.-4      	; 0x3d5a <lcd_init+0xbb8>
    3d5e:	9b 8f       	std	Y+27, r25	; 0x1b
    3d60:	8a 8f       	std	Y+26, r24	; 0x1a
    3d62:	0f c0       	rjmp	.+30     	; 0x3d82 <lcd_init+0xbe0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d64:	69 a5       	ldd	r22, Y+41	; 0x29
    3d66:	7a a5       	ldd	r23, Y+42	; 0x2a
    3d68:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d6c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	88 a7       	std	Y+40, r24	; 0x28
    3d76:	88 a5       	ldd	r24, Y+40	; 0x28
    3d78:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d7a:	89 8d       	ldd	r24, Y+25	; 0x19
    3d7c:	8a 95       	dec	r24
    3d7e:	f1 f7       	brne	.-4      	; 0x3d7c <lcd_init+0xbda>
    3d80:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	lcd_command(0x01);
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_command>
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	aa ef       	ldi	r26, 0xFA	; 250
    3d8e:	b4 e4       	ldi	r27, 0x44	; 68
    3d90:	8d 8b       	std	Y+21, r24	; 0x15
    3d92:	9e 8b       	std	Y+22, r25	; 0x16
    3d94:	af 8b       	std	Y+23, r26	; 0x17
    3d96:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3d98:	6d 89       	ldd	r22, Y+21	; 0x15
    3d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    3da0:	2b ea       	ldi	r18, 0xAB	; 171
    3da2:	3a ea       	ldi	r19, 0xAA	; 170
    3da4:	4a e2       	ldi	r20, 0x2A	; 42
    3da6:	50 e4       	ldi	r21, 0x40	; 64
    3da8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3dac:	dc 01       	movw	r26, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	89 8b       	std	Y+17, r24	; 0x11
    3db2:	9a 8b       	std	Y+18, r25	; 0x12
    3db4:	ab 8b       	std	Y+19, r26	; 0x13
    3db6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3db8:	69 89       	ldd	r22, Y+17	; 0x11
    3dba:	7a 89       	ldd	r23, Y+18	; 0x12
    3dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    3dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    3dc0:	20 e0       	ldi	r18, 0x00	; 0
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	40 e8       	ldi	r20, 0x80	; 128
    3dc6:	5f e3       	ldi	r21, 0x3F	; 63
    3dc8:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3dcc:	88 23       	and	r24, r24
    3dce:	1c f4       	brge	.+6      	; 0x3dd6 <lcd_init+0xc34>
		__ticks = 1;
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	88 8b       	std	Y+16, r24	; 0x10
    3dd4:	91 c0       	rjmp	.+290    	; 0x3ef8 <lcd_init+0xd56>
	else if (__tmp > 255)
    3dd6:	69 89       	ldd	r22, Y+17	; 0x11
    3dd8:	7a 89       	ldd	r23, Y+18	; 0x12
    3dda:	8b 89       	ldd	r24, Y+19	; 0x13
    3ddc:	9c 89       	ldd	r25, Y+20	; 0x14
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	4f e7       	ldi	r20, 0x7F	; 127
    3de4:	53 e4       	ldi	r21, 0x43	; 67
    3de6:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    3dea:	18 16       	cp	r1, r24
    3dec:	0c f0       	brlt	.+2      	; 0x3df0 <lcd_init+0xc4e>
    3dee:	7b c0       	rjmp	.+246    	; 0x3ee6 <lcd_init+0xd44>
	{
		_delay_ms(__us / 1000.0);
    3df0:	6d 89       	ldd	r22, Y+21	; 0x15
    3df2:	7e 89       	ldd	r23, Y+22	; 0x16
    3df4:	8f 89       	ldd	r24, Y+23	; 0x17
    3df6:	98 8d       	ldd	r25, Y+24	; 0x18
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	4a e7       	ldi	r20, 0x7A	; 122
    3dfe:	54 e4       	ldi	r21, 0x44	; 68
    3e00:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    3e04:	dc 01       	movw	r26, r24
    3e06:	cb 01       	movw	r24, r22
    3e08:	8c 87       	std	Y+12, r24	; 0x0c
    3e0a:	9d 87       	std	Y+13, r25	; 0x0d
    3e0c:	ae 87       	std	Y+14, r26	; 0x0e
    3e0e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e10:	6c 85       	ldd	r22, Y+12	; 0x0c
    3e12:	7d 85       	ldd	r23, Y+13	; 0x0d
    3e14:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e16:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	4a ef       	ldi	r20, 0xFA	; 250
    3e1e:	54 e4       	ldi	r21, 0x44	; 68
    3e20:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	88 87       	std	Y+8, r24	; 0x08
    3e2a:	99 87       	std	Y+9, r25	; 0x09
    3e2c:	aa 87       	std	Y+10, r26	; 0x0a
    3e2e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3e30:	68 85       	ldd	r22, Y+8	; 0x08
    3e32:	79 85       	ldd	r23, Y+9	; 0x09
    3e34:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e36:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	40 e8       	ldi	r20, 0x80	; 128
    3e3e:	5f e3       	ldi	r21, 0x3F	; 63
    3e40:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3e44:	88 23       	and	r24, r24
    3e46:	2c f4       	brge	.+10     	; 0x3e52 <lcd_init+0xcb0>
		__ticks = 1;
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	9f 83       	std	Y+7, r25	; 0x07
    3e4e:	8e 83       	std	Y+6, r24	; 0x06
    3e50:	3f c0       	rjmp	.+126    	; 0x3ed0 <lcd_init+0xd2e>
	else if (__tmp > 65535)
    3e52:	68 85       	ldd	r22, Y+8	; 0x08
    3e54:	79 85       	ldd	r23, Y+9	; 0x09
    3e56:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e58:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e5a:	20 e0       	ldi	r18, 0x00	; 0
    3e5c:	3f ef       	ldi	r19, 0xFF	; 255
    3e5e:	4f e7       	ldi	r20, 0x7F	; 127
    3e60:	57 e4       	ldi	r21, 0x47	; 71
    3e62:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    3e66:	18 16       	cp	r1, r24
    3e68:	4c f5       	brge	.+82     	; 0x3ebc <lcd_init+0xd1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e6a:	6c 85       	ldd	r22, Y+12	; 0x0c
    3e6c:	7d 85       	ldd	r23, Y+13	; 0x0d
    3e6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e70:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	40 e2       	ldi	r20, 0x20	; 32
    3e78:	51 e4       	ldi	r21, 0x41	; 65
    3e7a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3e7e:	dc 01       	movw	r26, r24
    3e80:	cb 01       	movw	r24, r22
    3e82:	bc 01       	movw	r22, r24
    3e84:	cd 01       	movw	r24, r26
    3e86:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	9f 83       	std	Y+7, r25	; 0x07
    3e90:	8e 83       	std	Y+6, r24	; 0x06
    3e92:	0f c0       	rjmp	.+30     	; 0x3eb2 <lcd_init+0xd10>
    3e94:	88 ec       	ldi	r24, 0xC8	; 200
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	9d 83       	std	Y+5, r25	; 0x05
    3e9a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    3ea0:	01 97       	sbiw	r24, 0x01	; 1
    3ea2:	f1 f7       	brne	.-4      	; 0x3ea0 <lcd_init+0xcfe>
    3ea4:	9d 83       	std	Y+5, r25	; 0x05
    3ea6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    3eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    3eac:	01 97       	sbiw	r24, 0x01	; 1
    3eae:	9f 83       	std	Y+7, r25	; 0x07
    3eb0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    3eb4:	9f 81       	ldd	r25, Y+7	; 0x07
    3eb6:	00 97       	sbiw	r24, 0x00	; 0
    3eb8:	69 f7       	brne	.-38     	; 0x3e94 <lcd_init+0xcf2>
    3eba:	24 c0       	rjmp	.+72     	; 0x3f04 <lcd_init+0xd62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ebc:	68 85       	ldd	r22, Y+8	; 0x08
    3ebe:	79 85       	ldd	r23, Y+9	; 0x09
    3ec0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ec2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ec4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	9f 83       	std	Y+7, r25	; 0x07
    3ece:	8e 83       	std	Y+6, r24	; 0x06
    3ed0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ed2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ed4:	9b 83       	std	Y+3, r25	; 0x03
    3ed6:	8a 83       	std	Y+2, r24	; 0x02
    3ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eda:	9b 81       	ldd	r25, Y+3	; 0x03
    3edc:	01 97       	sbiw	r24, 0x01	; 1
    3ede:	f1 f7       	brne	.-4      	; 0x3edc <lcd_init+0xd3a>
    3ee0:	9b 83       	std	Y+3, r25	; 0x03
    3ee2:	8a 83       	std	Y+2, r24	; 0x02
    3ee4:	0f c0       	rjmp	.+30     	; 0x3f04 <lcd_init+0xd62>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ee6:	69 89       	ldd	r22, Y+17	; 0x11
    3ee8:	7a 89       	ldd	r23, Y+18	; 0x12
    3eea:	8b 89       	ldd	r24, Y+19	; 0x13
    3eec:	9c 89       	ldd	r25, Y+20	; 0x14
    3eee:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3ef2:	dc 01       	movw	r26, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	88 8b       	std	Y+16, r24	; 0x10
    3ef8:	88 89       	ldd	r24, Y+16	; 0x10
    3efa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3efc:	89 81       	ldd	r24, Y+1	; 0x01
    3efe:	8a 95       	dec	r24
    3f00:	f1 f7       	brne	.-4      	; 0x3efe <lcd_init+0xd5c>
    3f02:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
	lcd_command(0x06);
    3f04:	86 e0       	ldi	r24, 0x06	; 6
    3f06:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_command>
}
    3f0a:	c1 56       	subi	r28, 0x61	; 97
    3f0c:	df 4f       	sbci	r29, 0xFF	; 255
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	f8 94       	cli
    3f12:	de bf       	out	0x3e, r29	; 62
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	cd bf       	out	0x3d, r28	; 61
    3f18:	cf 91       	pop	r28
    3f1a:	df 91       	pop	r29
    3f1c:	1f 91       	pop	r17
    3f1e:	0f 91       	pop	r16
    3f20:	08 95       	ret

00003f22 <lcd_goto_xy>:
//function to locate the position.
//lcd_goto_xy(row,columm);
//line 1 of lcd=row 1. ,line2 of lcd=row2
//columm 1 of lcd =columm 1., columm 16 of lcd =columm 16.

void lcd_goto_xy(unsigned char row,unsigned char columm){
    3f22:	df 93       	push	r29
    3f24:	cf 93       	push	r28
    3f26:	cd b7       	in	r28, 0x3d	; 61
    3f28:	de b7       	in	r29, 0x3e	; 62
    3f2a:	6e 97       	sbiw	r28, 0x1e	; 30
    3f2c:	0f b6       	in	r0, 0x3f	; 63
    3f2e:	f8 94       	cli
    3f30:	de bf       	out	0x3e, r29	; 62
    3f32:	0f be       	out	0x3f, r0	; 63
    3f34:	cd bf       	out	0x3d, r28	; 61
    3f36:	8d 8f       	std	Y+29, r24	; 0x1d
    3f38:	6e 8f       	std	Y+30, r22	; 0x1e
	unsigned char fristcharadr[]={0x80,0xC0,0x90,0xD0};
    3f3a:	80 e8       	ldi	r24, 0x80	; 128
    3f3c:	89 8f       	std	Y+25, r24	; 0x19
    3f3e:	80 ec       	ldi	r24, 0xC0	; 192
    3f40:	8a 8f       	std	Y+26, r24	; 0x1a
    3f42:	80 e9       	ldi	r24, 0x90	; 144
    3f44:	8b 8f       	std	Y+27, r24	; 0x1b
    3f46:	80 ed       	ldi	r24, 0xD0	; 208
    3f48:	8c 8f       	std	Y+28, r24	; 0x1c
		lcd_command(fristcharadr[row-1]+(columm-1));
    3f4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f4c:	88 2f       	mov	r24, r24
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	9c 01       	movw	r18, r24
    3f52:	21 50       	subi	r18, 0x01	; 1
    3f54:	30 40       	sbci	r19, 0x00	; 0
    3f56:	ce 01       	movw	r24, r28
    3f58:	49 96       	adiw	r24, 0x19	; 25
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	e2 0f       	add	r30, r18
    3f5e:	f3 1f       	adc	r31, r19
    3f60:	90 81       	ld	r25, Z
    3f62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f64:	89 0f       	add	r24, r25
    3f66:	81 50       	subi	r24, 0x01	; 1
    3f68:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_command>
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	a8 ec       	ldi	r26, 0xC8	; 200
    3f72:	b2 e4       	ldi	r27, 0x42	; 66
    3f74:	8d 8b       	std	Y+21, r24	; 0x15
    3f76:	9e 8b       	std	Y+22, r25	; 0x16
    3f78:	af 8b       	std	Y+23, r26	; 0x17
    3f7a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    3f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    3f80:	8f 89       	ldd	r24, Y+23	; 0x17
    3f82:	98 8d       	ldd	r25, Y+24	; 0x18
    3f84:	2b ea       	ldi	r18, 0xAB	; 171
    3f86:	3a ea       	ldi	r19, 0xAA	; 170
    3f88:	4a e2       	ldi	r20, 0x2A	; 42
    3f8a:	50 e4       	ldi	r21, 0x40	; 64
    3f8c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3f90:	dc 01       	movw	r26, r24
    3f92:	cb 01       	movw	r24, r22
    3f94:	89 8b       	std	Y+17, r24	; 0x11
    3f96:	9a 8b       	std	Y+18, r25	; 0x12
    3f98:	ab 8b       	std	Y+19, r26	; 0x13
    3f9a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3f9c:	69 89       	ldd	r22, Y+17	; 0x11
    3f9e:	7a 89       	ldd	r23, Y+18	; 0x12
    3fa0:	8b 89       	ldd	r24, Y+19	; 0x13
    3fa2:	9c 89       	ldd	r25, Y+20	; 0x14
    3fa4:	20 e0       	ldi	r18, 0x00	; 0
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	40 e8       	ldi	r20, 0x80	; 128
    3faa:	5f e3       	ldi	r21, 0x3F	; 63
    3fac:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    3fb0:	88 23       	and	r24, r24
    3fb2:	1c f4       	brge	.+6      	; 0x3fba <lcd_goto_xy+0x98>
		__ticks = 1;
    3fb4:	81 e0       	ldi	r24, 0x01	; 1
    3fb6:	88 8b       	std	Y+16, r24	; 0x10
    3fb8:	91 c0       	rjmp	.+290    	; 0x40dc <lcd_goto_xy+0x1ba>
	else if (__tmp > 255)
    3fba:	69 89       	ldd	r22, Y+17	; 0x11
    3fbc:	7a 89       	ldd	r23, Y+18	; 0x12
    3fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    3fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	4f e7       	ldi	r20, 0x7F	; 127
    3fc8:	53 e4       	ldi	r21, 0x43	; 67
    3fca:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    3fce:	18 16       	cp	r1, r24
    3fd0:	0c f0       	brlt	.+2      	; 0x3fd4 <lcd_goto_xy+0xb2>
    3fd2:	7b c0       	rjmp	.+246    	; 0x40ca <lcd_goto_xy+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    3fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    3fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    3fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3fda:	98 8d       	ldd	r25, Y+24	; 0x18
    3fdc:	20 e0       	ldi	r18, 0x00	; 0
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	4a e7       	ldi	r20, 0x7A	; 122
    3fe2:	54 e4       	ldi	r21, 0x44	; 68
    3fe4:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    3fe8:	dc 01       	movw	r26, r24
    3fea:	cb 01       	movw	r24, r22
    3fec:	8c 87       	std	Y+12, r24	; 0x0c
    3fee:	9d 87       	std	Y+13, r25	; 0x0d
    3ff0:	ae 87       	std	Y+14, r26	; 0x0e
    3ff2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff4:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ff6:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ff8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ffa:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	4a ef       	ldi	r20, 0xFA	; 250
    4002:	54 e4       	ldi	r21, 0x44	; 68
    4004:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	88 87       	std	Y+8, r24	; 0x08
    400e:	99 87       	std	Y+9, r25	; 0x09
    4010:	aa 87       	std	Y+10, r26	; 0x0a
    4012:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4014:	68 85       	ldd	r22, Y+8	; 0x08
    4016:	79 85       	ldd	r23, Y+9	; 0x09
    4018:	8a 85       	ldd	r24, Y+10	; 0x0a
    401a:	9b 85       	ldd	r25, Y+11	; 0x0b
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	40 e8       	ldi	r20, 0x80	; 128
    4022:	5f e3       	ldi	r21, 0x3F	; 63
    4024:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    4028:	88 23       	and	r24, r24
    402a:	2c f4       	brge	.+10     	; 0x4036 <lcd_goto_xy+0x114>
		__ticks = 1;
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	9f 83       	std	Y+7, r25	; 0x07
    4032:	8e 83       	std	Y+6, r24	; 0x06
    4034:	3f c0       	rjmp	.+126    	; 0x40b4 <lcd_goto_xy+0x192>
	else if (__tmp > 65535)
    4036:	68 85       	ldd	r22, Y+8	; 0x08
    4038:	79 85       	ldd	r23, Y+9	; 0x09
    403a:	8a 85       	ldd	r24, Y+10	; 0x0a
    403c:	9b 85       	ldd	r25, Y+11	; 0x0b
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	3f ef       	ldi	r19, 0xFF	; 255
    4042:	4f e7       	ldi	r20, 0x7F	; 127
    4044:	57 e4       	ldi	r21, 0x47	; 71
    4046:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    404a:	18 16       	cp	r1, r24
    404c:	4c f5       	brge	.+82     	; 0x40a0 <lcd_goto_xy+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    404e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4050:	7d 85       	ldd	r23, Y+13	; 0x0d
    4052:	8e 85       	ldd	r24, Y+14	; 0x0e
    4054:	9f 85       	ldd	r25, Y+15	; 0x0f
    4056:	20 e0       	ldi	r18, 0x00	; 0
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	40 e2       	ldi	r20, 0x20	; 32
    405c:	51 e4       	ldi	r21, 0x41	; 65
    405e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	bc 01       	movw	r22, r24
    4068:	cd 01       	movw	r24, r26
    406a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    406e:	dc 01       	movw	r26, r24
    4070:	cb 01       	movw	r24, r22
    4072:	9f 83       	std	Y+7, r25	; 0x07
    4074:	8e 83       	std	Y+6, r24	; 0x06
    4076:	0f c0       	rjmp	.+30     	; 0x4096 <lcd_goto_xy+0x174>
    4078:	88 ec       	ldi	r24, 0xC8	; 200
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	9d 83       	std	Y+5, r25	; 0x05
    407e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4080:	8c 81       	ldd	r24, Y+4	; 0x04
    4082:	9d 81       	ldd	r25, Y+5	; 0x05
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	f1 f7       	brne	.-4      	; 0x4084 <lcd_goto_xy+0x162>
    4088:	9d 83       	std	Y+5, r25	; 0x05
    408a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    408c:	8e 81       	ldd	r24, Y+6	; 0x06
    408e:	9f 81       	ldd	r25, Y+7	; 0x07
    4090:	01 97       	sbiw	r24, 0x01	; 1
    4092:	9f 83       	std	Y+7, r25	; 0x07
    4094:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4096:	8e 81       	ldd	r24, Y+6	; 0x06
    4098:	9f 81       	ldd	r25, Y+7	; 0x07
    409a:	00 97       	sbiw	r24, 0x00	; 0
    409c:	69 f7       	brne	.-38     	; 0x4078 <lcd_goto_xy+0x156>
    409e:	24 c0       	rjmp	.+72     	; 0x40e8 <lcd_goto_xy+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a0:	68 85       	ldd	r22, Y+8	; 0x08
    40a2:	79 85       	ldd	r23, Y+9	; 0x09
    40a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    40a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    40a8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	9f 83       	std	Y+7, r25	; 0x07
    40b2:	8e 83       	std	Y+6, r24	; 0x06
    40b4:	8e 81       	ldd	r24, Y+6	; 0x06
    40b6:	9f 81       	ldd	r25, Y+7	; 0x07
    40b8:	9b 83       	std	Y+3, r25	; 0x03
    40ba:	8a 83       	std	Y+2, r24	; 0x02
    40bc:	8a 81       	ldd	r24, Y+2	; 0x02
    40be:	9b 81       	ldd	r25, Y+3	; 0x03
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	f1 f7       	brne	.-4      	; 0x40c0 <lcd_goto_xy+0x19e>
    40c4:	9b 83       	std	Y+3, r25	; 0x03
    40c6:	8a 83       	std	Y+2, r24	; 0x02
    40c8:	0f c0       	rjmp	.+30     	; 0x40e8 <lcd_goto_xy+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    40ca:	69 89       	ldd	r22, Y+17	; 0x11
    40cc:	7a 89       	ldd	r23, Y+18	; 0x12
    40ce:	8b 89       	ldd	r24, Y+19	; 0x13
    40d0:	9c 89       	ldd	r25, Y+20	; 0x14
    40d2:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    40d6:	dc 01       	movw	r26, r24
    40d8:	cb 01       	movw	r24, r22
    40da:	88 8b       	std	Y+16, r24	; 0x10
    40dc:	88 89       	ldd	r24, Y+16	; 0x10
    40de:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    40e0:	89 81       	ldd	r24, Y+1	; 0x01
    40e2:	8a 95       	dec	r24
    40e4:	f1 f7       	brne	.-4      	; 0x40e2 <lcd_goto_xy+0x1c0>
    40e6:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(100);
	}
    40e8:	6e 96       	adiw	r28, 0x1e	; 30
    40ea:	0f b6       	in	r0, 0x3f	; 63
    40ec:	f8 94       	cli
    40ee:	de bf       	out	0x3e, r29	; 62
    40f0:	0f be       	out	0x3f, r0	; 63
    40f2:	cd bf       	out	0x3d, r28	; 61
    40f4:	cf 91       	pop	r28
    40f6:	df 91       	pop	r29
    40f8:	08 95       	ret

000040fa <lcd_print>:
//***********************************************************************************************************
//function to put what u need.
// lcd_print("hallo");
 void lcd_print(char *text){
    40fa:	df 93       	push	r29
    40fc:	cf 93       	push	r28
    40fe:	00 d0       	rcall	.+0      	; 0x4100 <lcd_print+0x6>
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    4104:	9a 83       	std	Y+2, r25	; 0x02
    4106:	89 83       	std	Y+1, r24	; 0x01
    4108:	0b c0       	rjmp	.+22     	; 0x4120 <lcd_print+0x26>
	while(*text>0){
		lcd_data(*text++);
    410a:	e9 81       	ldd	r30, Y+1	; 0x01
    410c:	fa 81       	ldd	r31, Y+2	; 0x02
    410e:	20 81       	ld	r18, Z
    4110:	89 81       	ldd	r24, Y+1	; 0x01
    4112:	9a 81       	ldd	r25, Y+2	; 0x02
    4114:	01 96       	adiw	r24, 0x01	; 1
    4116:	9a 83       	std	Y+2, r25	; 0x02
    4118:	89 83       	std	Y+1, r24	; 0x01
    411a:	82 2f       	mov	r24, r18
    411c:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <lcd_data>
	}
//***********************************************************************************************************
//function to put what u need.
// lcd_print("hallo");
 void lcd_print(char *text){
	while(*text>0){
    4120:	e9 81       	ldd	r30, Y+1	; 0x01
    4122:	fa 81       	ldd	r31, Y+2	; 0x02
    4124:	80 81       	ld	r24, Z
    4126:	88 23       	and	r24, r24
    4128:	81 f7       	brne	.-32     	; 0x410a <lcd_print+0x10>
		lcd_data(*text++);
	}
}
    412a:	0f 90       	pop	r0
    412c:	0f 90       	pop	r0
    412e:	cf 91       	pop	r28
    4130:	df 91       	pop	r29
    4132:	08 95       	ret

00004134 <lcd_CLEAR>:

//************************************************************************************************************
//function to clear lcd. 
//lcd_CLEAR();.
void lcd_CLEAR(){
    4134:	df 93       	push	r29
    4136:	cf 93       	push	r28
    4138:	cd b7       	in	r28, 0x3d	; 61
    413a:	de b7       	in	r29, 0x3e	; 62
    413c:	2e 97       	sbiw	r28, 0x0e	; 14
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
	lcd_command(0x01);
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_command>
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	a0 e0       	ldi	r26, 0x00	; 0
    4154:	b0 e4       	ldi	r27, 0x40	; 64
    4156:	8b 87       	std	Y+11, r24	; 0x0b
    4158:	9c 87       	std	Y+12, r25	; 0x0c
    415a:	ad 87       	std	Y+13, r26	; 0x0d
    415c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4160:	7c 85       	ldd	r23, Y+12	; 0x0c
    4162:	8d 85       	ldd	r24, Y+13	; 0x0d
    4164:	9e 85       	ldd	r25, Y+14	; 0x0e
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	4a ef       	ldi	r20, 0xFA	; 250
    416c:	54 e4       	ldi	r21, 0x44	; 68
    416e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	8f 83       	std	Y+7, r24	; 0x07
    4178:	98 87       	std	Y+8, r25	; 0x08
    417a:	a9 87       	std	Y+9, r26	; 0x09
    417c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    417e:	6f 81       	ldd	r22, Y+7	; 0x07
    4180:	78 85       	ldd	r23, Y+8	; 0x08
    4182:	89 85       	ldd	r24, Y+9	; 0x09
    4184:	9a 85       	ldd	r25, Y+10	; 0x0a
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	40 e8       	ldi	r20, 0x80	; 128
    418c:	5f e3       	ldi	r21, 0x3F	; 63
    418e:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    4192:	88 23       	and	r24, r24
    4194:	2c f4       	brge	.+10     	; 0x41a0 <lcd_CLEAR+0x6c>
		__ticks = 1;
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	9e 83       	std	Y+6, r25	; 0x06
    419c:	8d 83       	std	Y+5, r24	; 0x05
    419e:	3f c0       	rjmp	.+126    	; 0x421e <lcd_CLEAR+0xea>
	else if (__tmp > 65535)
    41a0:	6f 81       	ldd	r22, Y+7	; 0x07
    41a2:	78 85       	ldd	r23, Y+8	; 0x08
    41a4:	89 85       	ldd	r24, Y+9	; 0x09
    41a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	3f ef       	ldi	r19, 0xFF	; 255
    41ac:	4f e7       	ldi	r20, 0x7F	; 127
    41ae:	57 e4       	ldi	r21, 0x47	; 71
    41b0:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    41b4:	18 16       	cp	r1, r24
    41b6:	4c f5       	brge	.+82     	; 0x420a <lcd_CLEAR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    41bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41be:	9e 85       	ldd	r25, Y+14	; 0x0e
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	40 e2       	ldi	r20, 0x20	; 32
    41c6:	51 e4       	ldi	r21, 0x41	; 65
    41c8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	bc 01       	movw	r22, r24
    41d2:	cd 01       	movw	r24, r26
    41d4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	9e 83       	std	Y+6, r25	; 0x06
    41de:	8d 83       	std	Y+5, r24	; 0x05
    41e0:	0f c0       	rjmp	.+30     	; 0x4200 <lcd_CLEAR+0xcc>
    41e2:	88 ec       	ldi	r24, 0xC8	; 200
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	9c 83       	std	Y+4, r25	; 0x04
    41e8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    41ea:	8b 81       	ldd	r24, Y+3	; 0x03
    41ec:	9c 81       	ldd	r25, Y+4	; 0x04
    41ee:	01 97       	sbiw	r24, 0x01	; 1
    41f0:	f1 f7       	brne	.-4      	; 0x41ee <lcd_CLEAR+0xba>
    41f2:	9c 83       	std	Y+4, r25	; 0x04
    41f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41f6:	8d 81       	ldd	r24, Y+5	; 0x05
    41f8:	9e 81       	ldd	r25, Y+6	; 0x06
    41fa:	01 97       	sbiw	r24, 0x01	; 1
    41fc:	9e 83       	std	Y+6, r25	; 0x06
    41fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4200:	8d 81       	ldd	r24, Y+5	; 0x05
    4202:	9e 81       	ldd	r25, Y+6	; 0x06
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	69 f7       	brne	.-38     	; 0x41e2 <lcd_CLEAR+0xae>
    4208:	14 c0       	rjmp	.+40     	; 0x4232 <lcd_CLEAR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    420a:	6f 81       	ldd	r22, Y+7	; 0x07
    420c:	78 85       	ldd	r23, Y+8	; 0x08
    420e:	89 85       	ldd	r24, Y+9	; 0x09
    4210:	9a 85       	ldd	r25, Y+10	; 0x0a
    4212:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	9e 83       	std	Y+6, r25	; 0x06
    421c:	8d 83       	std	Y+5, r24	; 0x05
    421e:	8d 81       	ldd	r24, Y+5	; 0x05
    4220:	9e 81       	ldd	r25, Y+6	; 0x06
    4222:	9a 83       	std	Y+2, r25	; 0x02
    4224:	89 83       	std	Y+1, r24	; 0x01
    4226:	89 81       	ldd	r24, Y+1	; 0x01
    4228:	9a 81       	ldd	r25, Y+2	; 0x02
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	f1 f7       	brne	.-4      	; 0x422a <lcd_CLEAR+0xf6>
    422e:	9a 83       	std	Y+2, r25	; 0x02
    4230:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);}
    4232:	2e 96       	adiw	r28, 0x0e	; 14
    4234:	0f b6       	in	r0, 0x3f	; 63
    4236:	f8 94       	cli
    4238:	de bf       	out	0x3e, r29	; 62
    423a:	0f be       	out	0x3f, r0	; 63
    423c:	cd bf       	out	0x3d, r28	; 61
    423e:	cf 91       	pop	r28
    4240:	df 91       	pop	r29
    4242:	08 95       	ret

00004244 <lcd_curcor_off>:
//*************************************************************************************************************
//function to cancel the cursor.
//lcd_curcor_off();
void lcd_curcor_off(){
    4244:	df 93       	push	r29
    4246:	cf 93       	push	r28
    4248:	cd b7       	in	r28, 0x3d	; 61
    424a:	de b7       	in	r29, 0x3e	; 62
    424c:	68 97       	sbiw	r28, 0x18	; 24
    424e:	0f b6       	in	r0, 0x3f	; 63
    4250:	f8 94       	cli
    4252:	de bf       	out	0x3e, r29	; 62
    4254:	0f be       	out	0x3f, r0	; 63
    4256:	cd bf       	out	0x3d, r28	; 61
	lcd_command(0x0c);
    4258:	8c e0       	ldi	r24, 0x0C	; 12
    425a:	0e 94 4b 13 	call	0x2696	; 0x2696 <lcd_command>
    425e:	80 e0       	ldi	r24, 0x00	; 0
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	a8 ec       	ldi	r26, 0xC8	; 200
    4264:	b2 e4       	ldi	r27, 0x42	; 66
    4266:	8d 8b       	std	Y+21, r24	; 0x15
    4268:	9e 8b       	std	Y+22, r25	; 0x16
    426a:	af 8b       	std	Y+23, r26	; 0x17
    426c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    426e:	6d 89       	ldd	r22, Y+21	; 0x15
    4270:	7e 89       	ldd	r23, Y+22	; 0x16
    4272:	8f 89       	ldd	r24, Y+23	; 0x17
    4274:	98 8d       	ldd	r25, Y+24	; 0x18
    4276:	2b ea       	ldi	r18, 0xAB	; 171
    4278:	3a ea       	ldi	r19, 0xAA	; 170
    427a:	4a e2       	ldi	r20, 0x2A	; 42
    427c:	50 e4       	ldi	r21, 0x40	; 64
    427e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    4282:	dc 01       	movw	r26, r24
    4284:	cb 01       	movw	r24, r22
    4286:	89 8b       	std	Y+17, r24	; 0x11
    4288:	9a 8b       	std	Y+18, r25	; 0x12
    428a:	ab 8b       	std	Y+19, r26	; 0x13
    428c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    428e:	69 89       	ldd	r22, Y+17	; 0x11
    4290:	7a 89       	ldd	r23, Y+18	; 0x12
    4292:	8b 89       	ldd	r24, Y+19	; 0x13
    4294:	9c 89       	ldd	r25, Y+20	; 0x14
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	30 e0       	ldi	r19, 0x00	; 0
    429a:	40 e8       	ldi	r20, 0x80	; 128
    429c:	5f e3       	ldi	r21, 0x3F	; 63
    429e:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    42a2:	88 23       	and	r24, r24
    42a4:	1c f4       	brge	.+6      	; 0x42ac <lcd_curcor_off+0x68>
		__ticks = 1;
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	88 8b       	std	Y+16, r24	; 0x10
    42aa:	91 c0       	rjmp	.+290    	; 0x43ce <lcd_curcor_off+0x18a>
	else if (__tmp > 255)
    42ac:	69 89       	ldd	r22, Y+17	; 0x11
    42ae:	7a 89       	ldd	r23, Y+18	; 0x12
    42b0:	8b 89       	ldd	r24, Y+19	; 0x13
    42b2:	9c 89       	ldd	r25, Y+20	; 0x14
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	4f e7       	ldi	r20, 0x7F	; 127
    42ba:	53 e4       	ldi	r21, 0x43	; 67
    42bc:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    42c0:	18 16       	cp	r1, r24
    42c2:	0c f0       	brlt	.+2      	; 0x42c6 <lcd_curcor_off+0x82>
    42c4:	7b c0       	rjmp	.+246    	; 0x43bc <lcd_curcor_off+0x178>
	{
		_delay_ms(__us / 1000.0);
    42c6:	6d 89       	ldd	r22, Y+21	; 0x15
    42c8:	7e 89       	ldd	r23, Y+22	; 0x16
    42ca:	8f 89       	ldd	r24, Y+23	; 0x17
    42cc:	98 8d       	ldd	r25, Y+24	; 0x18
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	4a e7       	ldi	r20, 0x7A	; 122
    42d4:	54 e4       	ldi	r21, 0x44	; 68
    42d6:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    42da:	dc 01       	movw	r26, r24
    42dc:	cb 01       	movw	r24, r22
    42de:	8c 87       	std	Y+12, r24	; 0x0c
    42e0:	9d 87       	std	Y+13, r25	; 0x0d
    42e2:	ae 87       	std	Y+14, r26	; 0x0e
    42e4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    42e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    42ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    42ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    42ee:	20 e0       	ldi	r18, 0x00	; 0
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	4a ef       	ldi	r20, 0xFA	; 250
    42f4:	54 e4       	ldi	r21, 0x44	; 68
    42f6:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	88 87       	std	Y+8, r24	; 0x08
    4300:	99 87       	std	Y+9, r25	; 0x09
    4302:	aa 87       	std	Y+10, r26	; 0x0a
    4304:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4306:	68 85       	ldd	r22, Y+8	; 0x08
    4308:	79 85       	ldd	r23, Y+9	; 0x09
    430a:	8a 85       	ldd	r24, Y+10	; 0x0a
    430c:	9b 85       	ldd	r25, Y+11	; 0x0b
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	40 e8       	ldi	r20, 0x80	; 128
    4314:	5f e3       	ldi	r21, 0x3F	; 63
    4316:	0e 94 9a 04 	call	0x934	; 0x934 <__ltsf2>
    431a:	88 23       	and	r24, r24
    431c:	2c f4       	brge	.+10     	; 0x4328 <lcd_curcor_off+0xe4>
		__ticks = 1;
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	9f 83       	std	Y+7, r25	; 0x07
    4324:	8e 83       	std	Y+6, r24	; 0x06
    4326:	3f c0       	rjmp	.+126    	; 0x43a6 <lcd_curcor_off+0x162>
	else if (__tmp > 65535)
    4328:	68 85       	ldd	r22, Y+8	; 0x08
    432a:	79 85       	ldd	r23, Y+9	; 0x09
    432c:	8a 85       	ldd	r24, Y+10	; 0x0a
    432e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4330:	20 e0       	ldi	r18, 0x00	; 0
    4332:	3f ef       	ldi	r19, 0xFF	; 255
    4334:	4f e7       	ldi	r20, 0x7F	; 127
    4336:	57 e4       	ldi	r21, 0x47	; 71
    4338:	0e 94 3a 04 	call	0x874	; 0x874 <__gtsf2>
    433c:	18 16       	cp	r1, r24
    433e:	4c f5       	brge	.+82     	; 0x4392 <lcd_curcor_off+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4340:	6c 85       	ldd	r22, Y+12	; 0x0c
    4342:	7d 85       	ldd	r23, Y+13	; 0x0d
    4344:	8e 85       	ldd	r24, Y+14	; 0x0e
    4346:	9f 85       	ldd	r25, Y+15	; 0x0f
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	40 e2       	ldi	r20, 0x20	; 32
    434e:	51 e4       	ldi	r21, 0x41	; 65
    4350:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	bc 01       	movw	r22, r24
    435a:	cd 01       	movw	r24, r26
    435c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	9f 83       	std	Y+7, r25	; 0x07
    4366:	8e 83       	std	Y+6, r24	; 0x06
    4368:	0f c0       	rjmp	.+30     	; 0x4388 <lcd_curcor_off+0x144>
    436a:	88 ec       	ldi	r24, 0xC8	; 200
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	9d 83       	std	Y+5, r25	; 0x05
    4370:	8c 83       	std	Y+4, r24	; 0x04
    4372:	8c 81       	ldd	r24, Y+4	; 0x04
    4374:	9d 81       	ldd	r25, Y+5	; 0x05
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	f1 f7       	brne	.-4      	; 0x4376 <lcd_curcor_off+0x132>
    437a:	9d 83       	std	Y+5, r25	; 0x05
    437c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    437e:	8e 81       	ldd	r24, Y+6	; 0x06
    4380:	9f 81       	ldd	r25, Y+7	; 0x07
    4382:	01 97       	sbiw	r24, 0x01	; 1
    4384:	9f 83       	std	Y+7, r25	; 0x07
    4386:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4388:	8e 81       	ldd	r24, Y+6	; 0x06
    438a:	9f 81       	ldd	r25, Y+7	; 0x07
    438c:	00 97       	sbiw	r24, 0x00	; 0
    438e:	69 f7       	brne	.-38     	; 0x436a <lcd_curcor_off+0x126>
    4390:	24 c0       	rjmp	.+72     	; 0x43da <lcd_curcor_off+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4392:	68 85       	ldd	r22, Y+8	; 0x08
    4394:	79 85       	ldd	r23, Y+9	; 0x09
    4396:	8a 85       	ldd	r24, Y+10	; 0x0a
    4398:	9b 85       	ldd	r25, Y+11	; 0x0b
    439a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    439e:	dc 01       	movw	r26, r24
    43a0:	cb 01       	movw	r24, r22
    43a2:	9f 83       	std	Y+7, r25	; 0x07
    43a4:	8e 83       	std	Y+6, r24	; 0x06
    43a6:	8e 81       	ldd	r24, Y+6	; 0x06
    43a8:	9f 81       	ldd	r25, Y+7	; 0x07
    43aa:	9b 83       	std	Y+3, r25	; 0x03
    43ac:	8a 83       	std	Y+2, r24	; 0x02
    43ae:	8a 81       	ldd	r24, Y+2	; 0x02
    43b0:	9b 81       	ldd	r25, Y+3	; 0x03
    43b2:	01 97       	sbiw	r24, 0x01	; 1
    43b4:	f1 f7       	brne	.-4      	; 0x43b2 <lcd_curcor_off+0x16e>
    43b6:	9b 83       	std	Y+3, r25	; 0x03
    43b8:	8a 83       	std	Y+2, r24	; 0x02
    43ba:	0f c0       	rjmp	.+30     	; 0x43da <lcd_curcor_off+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    43bc:	69 89       	ldd	r22, Y+17	; 0x11
    43be:	7a 89       	ldd	r23, Y+18	; 0x12
    43c0:	8b 89       	ldd	r24, Y+19	; 0x13
    43c2:	9c 89       	ldd	r25, Y+20	; 0x14
    43c4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    43c8:	dc 01       	movw	r26, r24
    43ca:	cb 01       	movw	r24, r22
    43cc:	88 8b       	std	Y+16, r24	; 0x10
    43ce:	88 89       	ldd	r24, Y+16	; 0x10
    43d0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    43d2:	89 81       	ldd	r24, Y+1	; 0x01
    43d4:	8a 95       	dec	r24
    43d6:	f1 f7       	brne	.-4      	; 0x43d4 <lcd_curcor_off+0x190>
    43d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    43da:	68 96       	adiw	r28, 0x18	; 24
    43dc:	0f b6       	in	r0, 0x3f	; 63
    43de:	f8 94       	cli
    43e0:	de bf       	out	0x3e, r29	; 62
    43e2:	0f be       	out	0x3f, r0	; 63
    43e4:	cd bf       	out	0x3d, r28	; 61
    43e6:	cf 91       	pop	r28
    43e8:	df 91       	pop	r29
    43ea:	08 95       	ret

000043ec <main>:
#include"driver/keypad.h"
#include"driver/lcd_4bit.h"

double operat(int *frist,int *last,int *opr);

int main(void){
    43ec:	0f 93       	push	r16
    43ee:	1f 93       	push	r17
    43f0:	df 93       	push	r29
    43f2:	cf 93       	push	r28
    43f4:	cd b7       	in	r28, 0x3d	; 61
    43f6:	de b7       	in	r29, 0x3e	; 62
    43f8:	a2 97       	sbiw	r28, 0x22	; 34
    43fa:	0f b6       	in	r0, 0x3f	; 63
    43fc:	f8 94       	cli
    43fe:	de bf       	out	0x3e, r29	; 62
    4400:	0f be       	out	0x3f, r0	; 63
    4402:	cd bf       	out	0x3d, r28	; 61

int  fnum,lnum,num,val;
double equan;
int x,key,op,n;
lcd_init();
    4404:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <lcd_init>
char finum[10];
keypad_init();
    4408:	0e 94 71 07 	call	0xee2	; 0xee2 <keypad_init>

while (1){

	lcd_goto_xy(1,1);
    440c:	81 e0       	ldi	r24, 0x01	; 1
    440e:	61 e0       	ldi	r22, 0x01	; 1
    4410:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
	int y=0;
    4414:	1a 82       	std	Y+2, r1	; 0x02
    4416:	19 82       	std	Y+1, r1	; 0x01
do{
	do{ if (y==14)
    4418:	89 81       	ldd	r24, Y+1	; 0x01
    441a:	9a 81       	ldd	r25, Y+2	; 0x02
    441c:	8e 30       	cpi	r24, 0x0E	; 14
    441e:	91 05       	cpc	r25, r1
    4420:	11 f4       	brne	.+4      	; 0x4426 <main+0x3a>
	{y=0;}
    4422:	1a 82       	std	Y+2, r1	; 0x02
    4424:	19 82       	std	Y+1, r1	; 0x01
	key=keypad_press();
    4426:	0e 94 88 07 	call	0xf10	; 0xf10 <keypad_press>
    442a:	9e 83       	std	Y+6, r25	; 0x06
    442c:	8d 83       	std	Y+5, r24	; 0x05
switch(key){
    442e:	8d 81       	ldd	r24, Y+5	; 0x05
    4430:	9e 81       	ldd	r25, Y+6	; 0x06
    4432:	9a a3       	std	Y+34, r25	; 0x22
    4434:	89 a3       	std	Y+33, r24	; 0x21
    4436:	89 a1       	ldd	r24, Y+33	; 0x21
    4438:	9a a1       	ldd	r25, Y+34	; 0x22
    443a:	88 30       	cpi	r24, 0x08	; 8
    443c:	91 05       	cpc	r25, r1
    443e:	09 f4       	brne	.+2      	; 0x4442 <main+0x56>
    4440:	8d c1       	rjmp	.+794    	; 0x475c <main+0x370>
    4442:	89 a1       	ldd	r24, Y+33	; 0x21
    4444:	9a a1       	ldd	r25, Y+34	; 0x22
    4446:	89 30       	cpi	r24, 0x09	; 9
    4448:	91 05       	cpc	r25, r1
    444a:	5c f5       	brge	.+86     	; 0x44a2 <main+0xb6>
    444c:	89 a1       	ldd	r24, Y+33	; 0x21
    444e:	9a a1       	ldd	r25, Y+34	; 0x22
    4450:	84 30       	cpi	r24, 0x04	; 4
    4452:	91 05       	cpc	r25, r1
    4454:	09 f4       	brne	.+2      	; 0x4458 <main+0x6c>
    4456:	da c0       	rjmp	.+436    	; 0x460c <main+0x220>
    4458:	89 a1       	ldd	r24, Y+33	; 0x21
    445a:	9a a1       	ldd	r25, Y+34	; 0x22
    445c:	85 30       	cpi	r24, 0x05	; 5
    445e:	91 05       	cpc	r25, r1
    4460:	9c f4       	brge	.+38     	; 0x4488 <main+0x9c>
    4462:	89 a1       	ldd	r24, Y+33	; 0x21
    4464:	9a a1       	ldd	r25, Y+34	; 0x22
    4466:	82 30       	cpi	r24, 0x02	; 2
    4468:	91 05       	cpc	r25, r1
    446a:	09 f4       	brne	.+2      	; 0x446e <main+0x82>
    446c:	77 c0       	rjmp	.+238    	; 0x455c <main+0x170>
    446e:	89 a1       	ldd	r24, Y+33	; 0x21
    4470:	9a a1       	ldd	r25, Y+34	; 0x22
    4472:	83 30       	cpi	r24, 0x03	; 3
    4474:	91 05       	cpc	r25, r1
    4476:	0c f0       	brlt	.+2      	; 0x447a <main+0x8e>
    4478:	9d c0       	rjmp	.+314    	; 0x45b4 <main+0x1c8>
    447a:	89 a1       	ldd	r24, Y+33	; 0x21
    447c:	9a a1       	ldd	r25, Y+34	; 0x22
    447e:	81 30       	cpi	r24, 0x01	; 1
    4480:	91 05       	cpc	r25, r1
    4482:	09 f4       	brne	.+2      	; 0x4486 <main+0x9a>
    4484:	3f c0       	rjmp	.+126    	; 0x4504 <main+0x118>
    4486:	c8 c2       	rjmp	.+1424   	; 0x4a18 <main+0x62c>
    4488:	89 a1       	ldd	r24, Y+33	; 0x21
    448a:	9a a1       	ldd	r25, Y+34	; 0x22
    448c:	86 30       	cpi	r24, 0x06	; 6
    448e:	91 05       	cpc	r25, r1
    4490:	09 f4       	brne	.+2      	; 0x4494 <main+0xa8>
    4492:	0c c1       	rjmp	.+536    	; 0x46ac <main+0x2c0>
    4494:	89 a1       	ldd	r24, Y+33	; 0x21
    4496:	9a a1       	ldd	r25, Y+34	; 0x22
    4498:	87 30       	cpi	r24, 0x07	; 7
    449a:	91 05       	cpc	r25, r1
    449c:	0c f0       	brlt	.+2      	; 0x44a0 <main+0xb4>
    449e:	32 c1       	rjmp	.+612    	; 0x4704 <main+0x318>
    44a0:	d9 c0       	rjmp	.+434    	; 0x4654 <main+0x268>
    44a2:	89 a1       	ldd	r24, Y+33	; 0x21
    44a4:	9a a1       	ldd	r25, Y+34	; 0x22
    44a6:	8c 30       	cpi	r24, 0x0C	; 12
    44a8:	91 05       	cpc	r25, r1
    44aa:	09 f4       	brne	.+2      	; 0x44ae <main+0xc2>
    44ac:	ff c1       	rjmp	.+1022   	; 0x48ac <main+0x4c0>
    44ae:	89 a1       	ldd	r24, Y+33	; 0x21
    44b0:	9a a1       	ldd	r25, Y+34	; 0x22
    44b2:	8d 30       	cpi	r24, 0x0D	; 13
    44b4:	91 05       	cpc	r25, r1
    44b6:	6c f4       	brge	.+26     	; 0x44d2 <main+0xe6>
    44b8:	89 a1       	ldd	r24, Y+33	; 0x21
    44ba:	9a a1       	ldd	r25, Y+34	; 0x22
    44bc:	8a 30       	cpi	r24, 0x0A	; 10
    44be:	91 05       	cpc	r25, r1
    44c0:	09 f4       	brne	.+2      	; 0x44c4 <main+0xd8>
    44c2:	9c c1       	rjmp	.+824    	; 0x47fc <main+0x410>
    44c4:	89 a1       	ldd	r24, Y+33	; 0x21
    44c6:	9a a1       	ldd	r25, Y+34	; 0x22
    44c8:	8b 30       	cpi	r24, 0x0B	; 11
    44ca:	91 05       	cpc	r25, r1
    44cc:	0c f0       	brlt	.+2      	; 0x44d0 <main+0xe4>
    44ce:	c2 c1       	rjmp	.+900    	; 0x4854 <main+0x468>
    44d0:	69 c1       	rjmp	.+722    	; 0x47a4 <main+0x3b8>
    44d2:	89 a1       	ldd	r24, Y+33	; 0x21
    44d4:	9a a1       	ldd	r25, Y+34	; 0x22
    44d6:	8e 30       	cpi	r24, 0x0E	; 14
    44d8:	91 05       	cpc	r25, r1
    44da:	09 f4       	brne	.+2      	; 0x44de <main+0xf2>
    44dc:	25 c2       	rjmp	.+1098   	; 0x4928 <main+0x53c>
    44de:	89 a1       	ldd	r24, Y+33	; 0x21
    44e0:	9a a1       	ldd	r25, Y+34	; 0x22
    44e2:	8e 30       	cpi	r24, 0x0E	; 14
    44e4:	91 05       	cpc	r25, r1
    44e6:	0c f4       	brge	.+2      	; 0x44ea <main+0xfe>
    44e8:	05 c2       	rjmp	.+1034   	; 0x48f4 <main+0x508>
    44ea:	89 a1       	ldd	r24, Y+33	; 0x21
    44ec:	9a a1       	ldd	r25, Y+34	; 0x22
    44ee:	8f 30       	cpi	r24, 0x0F	; 15
    44f0:	91 05       	cpc	r25, r1
    44f2:	09 f4       	brne	.+2      	; 0x44f6 <main+0x10a>
    44f4:	43 c2       	rjmp	.+1158   	; 0x497c <main+0x590>
    44f6:	89 a1       	ldd	r24, Y+33	; 0x21
    44f8:	9a a1       	ldd	r25, Y+34	; 0x22
    44fa:	80 31       	cpi	r24, 0x10	; 16
    44fc:	91 05       	cpc	r25, r1
    44fe:	09 f4       	brne	.+2      	; 0x4502 <main+0x116>
    4500:	68 c2       	rjmp	.+1232   	; 0x49d2 <main+0x5e6>
    4502:	8a c2       	rjmp	.+1300   	; 0x4a18 <main+0x62c>
case 1:lcd_goto_xy(1,2+y);lcd_print("7");val=7;num=num*10+val;x++;y++;break;
    4504:	89 81       	ldd	r24, Y+1	; 0x01
    4506:	98 2f       	mov	r25, r24
    4508:	9e 5f       	subi	r25, 0xFE	; 254
    450a:	81 e0       	ldi	r24, 0x01	; 1
    450c:	69 2f       	mov	r22, r25
    450e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    4512:	80 e6       	ldi	r24, 0x60	; 96
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    451a:	87 e0       	ldi	r24, 0x07	; 7
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	9e 87       	std	Y+14, r25	; 0x0e
    4520:	8d 87       	std	Y+13, r24	; 0x0d
    4522:	8f 85       	ldd	r24, Y+15	; 0x0f
    4524:	98 89       	ldd	r25, Y+16	; 0x10
    4526:	9c 01       	movw	r18, r24
    4528:	22 0f       	add	r18, r18
    452a:	33 1f       	adc	r19, r19
    452c:	c9 01       	movw	r24, r18
    452e:	88 0f       	add	r24, r24
    4530:	99 1f       	adc	r25, r25
    4532:	88 0f       	add	r24, r24
    4534:	99 1f       	adc	r25, r25
    4536:	28 0f       	add	r18, r24
    4538:	39 1f       	adc	r19, r25
    453a:	8d 85       	ldd	r24, Y+13	; 0x0d
    453c:	9e 85       	ldd	r25, Y+14	; 0x0e
    453e:	82 0f       	add	r24, r18
    4540:	93 1f       	adc	r25, r19
    4542:	98 8b       	std	Y+16, r25	; 0x10
    4544:	8f 87       	std	Y+15, r24	; 0x0f
    4546:	8f 81       	ldd	r24, Y+7	; 0x07
    4548:	98 85       	ldd	r25, Y+8	; 0x08
    454a:	01 96       	adiw	r24, 0x01	; 1
    454c:	98 87       	std	Y+8, r25	; 0x08
    454e:	8f 83       	std	Y+7, r24	; 0x07
    4550:	89 81       	ldd	r24, Y+1	; 0x01
    4552:	9a 81       	ldd	r25, Y+2	; 0x02
    4554:	01 96       	adiw	r24, 0x01	; 1
    4556:	9a 83       	std	Y+2, r25	; 0x02
    4558:	89 83       	std	Y+1, r24	; 0x01
    455a:	5e c2       	rjmp	.+1212   	; 0x4a18 <main+0x62c>
case 2:lcd_goto_xy(1,2+y);lcd_print("8");val=8;num=num*10+val;x++;y++;break;
    455c:	89 81       	ldd	r24, Y+1	; 0x01
    455e:	98 2f       	mov	r25, r24
    4560:	9e 5f       	subi	r25, 0xFE	; 254
    4562:	81 e0       	ldi	r24, 0x01	; 1
    4564:	69 2f       	mov	r22, r25
    4566:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    456a:	82 e6       	ldi	r24, 0x62	; 98
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    4572:	88 e0       	ldi	r24, 0x08	; 8
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	9e 87       	std	Y+14, r25	; 0x0e
    4578:	8d 87       	std	Y+13, r24	; 0x0d
    457a:	8f 85       	ldd	r24, Y+15	; 0x0f
    457c:	98 89       	ldd	r25, Y+16	; 0x10
    457e:	9c 01       	movw	r18, r24
    4580:	22 0f       	add	r18, r18
    4582:	33 1f       	adc	r19, r19
    4584:	c9 01       	movw	r24, r18
    4586:	88 0f       	add	r24, r24
    4588:	99 1f       	adc	r25, r25
    458a:	88 0f       	add	r24, r24
    458c:	99 1f       	adc	r25, r25
    458e:	28 0f       	add	r18, r24
    4590:	39 1f       	adc	r19, r25
    4592:	8d 85       	ldd	r24, Y+13	; 0x0d
    4594:	9e 85       	ldd	r25, Y+14	; 0x0e
    4596:	82 0f       	add	r24, r18
    4598:	93 1f       	adc	r25, r19
    459a:	98 8b       	std	Y+16, r25	; 0x10
    459c:	8f 87       	std	Y+15, r24	; 0x0f
    459e:	8f 81       	ldd	r24, Y+7	; 0x07
    45a0:	98 85       	ldd	r25, Y+8	; 0x08
    45a2:	01 96       	adiw	r24, 0x01	; 1
    45a4:	98 87       	std	Y+8, r25	; 0x08
    45a6:	8f 83       	std	Y+7, r24	; 0x07
    45a8:	89 81       	ldd	r24, Y+1	; 0x01
    45aa:	9a 81       	ldd	r25, Y+2	; 0x02
    45ac:	01 96       	adiw	r24, 0x01	; 1
    45ae:	9a 83       	std	Y+2, r25	; 0x02
    45b0:	89 83       	std	Y+1, r24	; 0x01
    45b2:	32 c2       	rjmp	.+1124   	; 0x4a18 <main+0x62c>
case 3:lcd_goto_xy(1,2+y);lcd_print("9");val=9;num=num*10+val;x++;y++;break;
    45b4:	89 81       	ldd	r24, Y+1	; 0x01
    45b6:	98 2f       	mov	r25, r24
    45b8:	9e 5f       	subi	r25, 0xFE	; 254
    45ba:	81 e0       	ldi	r24, 0x01	; 1
    45bc:	69 2f       	mov	r22, r25
    45be:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    45c2:	84 e6       	ldi	r24, 0x64	; 100
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    45ca:	89 e0       	ldi	r24, 0x09	; 9
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	9e 87       	std	Y+14, r25	; 0x0e
    45d0:	8d 87       	std	Y+13, r24	; 0x0d
    45d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    45d4:	98 89       	ldd	r25, Y+16	; 0x10
    45d6:	9c 01       	movw	r18, r24
    45d8:	22 0f       	add	r18, r18
    45da:	33 1f       	adc	r19, r19
    45dc:	c9 01       	movw	r24, r18
    45de:	88 0f       	add	r24, r24
    45e0:	99 1f       	adc	r25, r25
    45e2:	88 0f       	add	r24, r24
    45e4:	99 1f       	adc	r25, r25
    45e6:	28 0f       	add	r18, r24
    45e8:	39 1f       	adc	r19, r25
    45ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ee:	82 0f       	add	r24, r18
    45f0:	93 1f       	adc	r25, r19
    45f2:	98 8b       	std	Y+16, r25	; 0x10
    45f4:	8f 87       	std	Y+15, r24	; 0x0f
    45f6:	8f 81       	ldd	r24, Y+7	; 0x07
    45f8:	98 85       	ldd	r25, Y+8	; 0x08
    45fa:	01 96       	adiw	r24, 0x01	; 1
    45fc:	98 87       	std	Y+8, r25	; 0x08
    45fe:	8f 83       	std	Y+7, r24	; 0x07
    4600:	89 81       	ldd	r24, Y+1	; 0x01
    4602:	9a 81       	ldd	r25, Y+2	; 0x02
    4604:	01 96       	adiw	r24, 0x01	; 1
    4606:	9a 83       	std	Y+2, r25	; 0x02
    4608:	89 83       	std	Y+1, r24	; 0x01
    460a:	06 c2       	rjmp	.+1036   	; 0x4a18 <main+0x62c>
case 4:lcd_goto_xy(1,2+y);lcd_print("/");fnum=num;lcd_goto_xy(1,x);op=1;x=8;num=0;y++;break;
    460c:	89 81       	ldd	r24, Y+1	; 0x01
    460e:	98 2f       	mov	r25, r24
    4610:	9e 5f       	subi	r25, 0xFE	; 254
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	69 2f       	mov	r22, r25
    4616:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    461a:	86 e6       	ldi	r24, 0x66	; 102
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    4622:	8f 85       	ldd	r24, Y+15	; 0x0f
    4624:	98 89       	ldd	r25, Y+16	; 0x10
    4626:	9a 8b       	std	Y+18, r25	; 0x12
    4628:	89 8b       	std	Y+17, r24	; 0x11
    462a:	9f 81       	ldd	r25, Y+7	; 0x07
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	69 2f       	mov	r22, r25
    4630:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	9e 8b       	std	Y+22, r25	; 0x16
    463a:	8d 8b       	std	Y+21, r24	; 0x15
    463c:	88 e0       	ldi	r24, 0x08	; 8
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	98 87       	std	Y+8, r25	; 0x08
    4642:	8f 83       	std	Y+7, r24	; 0x07
    4644:	18 8a       	std	Y+16, r1	; 0x10
    4646:	1f 86       	std	Y+15, r1	; 0x0f
    4648:	89 81       	ldd	r24, Y+1	; 0x01
    464a:	9a 81       	ldd	r25, Y+2	; 0x02
    464c:	01 96       	adiw	r24, 0x01	; 1
    464e:	9a 83       	std	Y+2, r25	; 0x02
    4650:	89 83       	std	Y+1, r24	; 0x01
    4652:	e2 c1       	rjmp	.+964    	; 0x4a18 <main+0x62c>
case 5:lcd_goto_xy(1,2+y);lcd_print("4");val=4;num=num*10+val;x++;y++;break;
    4654:	89 81       	ldd	r24, Y+1	; 0x01
    4656:	98 2f       	mov	r25, r24
    4658:	9e 5f       	subi	r25, 0xFE	; 254
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	69 2f       	mov	r22, r25
    465e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    4662:	88 e6       	ldi	r24, 0x68	; 104
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    466a:	84 e0       	ldi	r24, 0x04	; 4
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	9e 87       	std	Y+14, r25	; 0x0e
    4670:	8d 87       	std	Y+13, r24	; 0x0d
    4672:	8f 85       	ldd	r24, Y+15	; 0x0f
    4674:	98 89       	ldd	r25, Y+16	; 0x10
    4676:	9c 01       	movw	r18, r24
    4678:	22 0f       	add	r18, r18
    467a:	33 1f       	adc	r19, r19
    467c:	c9 01       	movw	r24, r18
    467e:	88 0f       	add	r24, r24
    4680:	99 1f       	adc	r25, r25
    4682:	88 0f       	add	r24, r24
    4684:	99 1f       	adc	r25, r25
    4686:	28 0f       	add	r18, r24
    4688:	39 1f       	adc	r19, r25
    468a:	8d 85       	ldd	r24, Y+13	; 0x0d
    468c:	9e 85       	ldd	r25, Y+14	; 0x0e
    468e:	82 0f       	add	r24, r18
    4690:	93 1f       	adc	r25, r19
    4692:	98 8b       	std	Y+16, r25	; 0x10
    4694:	8f 87       	std	Y+15, r24	; 0x0f
    4696:	8f 81       	ldd	r24, Y+7	; 0x07
    4698:	98 85       	ldd	r25, Y+8	; 0x08
    469a:	01 96       	adiw	r24, 0x01	; 1
    469c:	98 87       	std	Y+8, r25	; 0x08
    469e:	8f 83       	std	Y+7, r24	; 0x07
    46a0:	89 81       	ldd	r24, Y+1	; 0x01
    46a2:	9a 81       	ldd	r25, Y+2	; 0x02
    46a4:	01 96       	adiw	r24, 0x01	; 1
    46a6:	9a 83       	std	Y+2, r25	; 0x02
    46a8:	89 83       	std	Y+1, r24	; 0x01
    46aa:	b6 c1       	rjmp	.+876    	; 0x4a18 <main+0x62c>
case 6:lcd_goto_xy(1,2+y);lcd_print("5");val=5;num=num*10+val;x++;y++;break;
    46ac:	89 81       	ldd	r24, Y+1	; 0x01
    46ae:	98 2f       	mov	r25, r24
    46b0:	9e 5f       	subi	r25, 0xFE	; 254
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	69 2f       	mov	r22, r25
    46b6:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    46ba:	8a e6       	ldi	r24, 0x6A	; 106
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    46c2:	85 e0       	ldi	r24, 0x05	; 5
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	9e 87       	std	Y+14, r25	; 0x0e
    46c8:	8d 87       	std	Y+13, r24	; 0x0d
    46ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    46cc:	98 89       	ldd	r25, Y+16	; 0x10
    46ce:	9c 01       	movw	r18, r24
    46d0:	22 0f       	add	r18, r18
    46d2:	33 1f       	adc	r19, r19
    46d4:	c9 01       	movw	r24, r18
    46d6:	88 0f       	add	r24, r24
    46d8:	99 1f       	adc	r25, r25
    46da:	88 0f       	add	r24, r24
    46dc:	99 1f       	adc	r25, r25
    46de:	28 0f       	add	r18, r24
    46e0:	39 1f       	adc	r19, r25
    46e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    46e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    46e6:	82 0f       	add	r24, r18
    46e8:	93 1f       	adc	r25, r19
    46ea:	98 8b       	std	Y+16, r25	; 0x10
    46ec:	8f 87       	std	Y+15, r24	; 0x0f
    46ee:	8f 81       	ldd	r24, Y+7	; 0x07
    46f0:	98 85       	ldd	r25, Y+8	; 0x08
    46f2:	01 96       	adiw	r24, 0x01	; 1
    46f4:	98 87       	std	Y+8, r25	; 0x08
    46f6:	8f 83       	std	Y+7, r24	; 0x07
    46f8:	89 81       	ldd	r24, Y+1	; 0x01
    46fa:	9a 81       	ldd	r25, Y+2	; 0x02
    46fc:	01 96       	adiw	r24, 0x01	; 1
    46fe:	9a 83       	std	Y+2, r25	; 0x02
    4700:	89 83       	std	Y+1, r24	; 0x01
    4702:	8a c1       	rjmp	.+788    	; 0x4a18 <main+0x62c>
case 7:lcd_goto_xy(1,2+y);lcd_print("6");val=6;num=num*10+val;x++;y++;break;
    4704:	89 81       	ldd	r24, Y+1	; 0x01
    4706:	98 2f       	mov	r25, r24
    4708:	9e 5f       	subi	r25, 0xFE	; 254
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	69 2f       	mov	r22, r25
    470e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    4712:	8c e6       	ldi	r24, 0x6C	; 108
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    471a:	86 e0       	ldi	r24, 0x06	; 6
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	9e 87       	std	Y+14, r25	; 0x0e
    4720:	8d 87       	std	Y+13, r24	; 0x0d
    4722:	8f 85       	ldd	r24, Y+15	; 0x0f
    4724:	98 89       	ldd	r25, Y+16	; 0x10
    4726:	9c 01       	movw	r18, r24
    4728:	22 0f       	add	r18, r18
    472a:	33 1f       	adc	r19, r19
    472c:	c9 01       	movw	r24, r18
    472e:	88 0f       	add	r24, r24
    4730:	99 1f       	adc	r25, r25
    4732:	88 0f       	add	r24, r24
    4734:	99 1f       	adc	r25, r25
    4736:	28 0f       	add	r18, r24
    4738:	39 1f       	adc	r19, r25
    473a:	8d 85       	ldd	r24, Y+13	; 0x0d
    473c:	9e 85       	ldd	r25, Y+14	; 0x0e
    473e:	82 0f       	add	r24, r18
    4740:	93 1f       	adc	r25, r19
    4742:	98 8b       	std	Y+16, r25	; 0x10
    4744:	8f 87       	std	Y+15, r24	; 0x0f
    4746:	8f 81       	ldd	r24, Y+7	; 0x07
    4748:	98 85       	ldd	r25, Y+8	; 0x08
    474a:	01 96       	adiw	r24, 0x01	; 1
    474c:	98 87       	std	Y+8, r25	; 0x08
    474e:	8f 83       	std	Y+7, r24	; 0x07
    4750:	89 81       	ldd	r24, Y+1	; 0x01
    4752:	9a 81       	ldd	r25, Y+2	; 0x02
    4754:	01 96       	adiw	r24, 0x01	; 1
    4756:	9a 83       	std	Y+2, r25	; 0x02
    4758:	89 83       	std	Y+1, r24	; 0x01
    475a:	5e c1       	rjmp	.+700    	; 0x4a18 <main+0x62c>
case 8:lcd_goto_xy(1,2+y);lcd_print("X");fnum=num;lcd_goto_xy(1,y);y++;op=2;x=8;num=0;;break;
    475c:	89 81       	ldd	r24, Y+1	; 0x01
    475e:	98 2f       	mov	r25, r24
    4760:	9e 5f       	subi	r25, 0xFE	; 254
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	69 2f       	mov	r22, r25
    4766:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    476a:	8e e6       	ldi	r24, 0x6E	; 110
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    4772:	8f 85       	ldd	r24, Y+15	; 0x0f
    4774:	98 89       	ldd	r25, Y+16	; 0x10
    4776:	9a 8b       	std	Y+18, r25	; 0x12
    4778:	89 8b       	std	Y+17, r24	; 0x11
    477a:	99 81       	ldd	r25, Y+1	; 0x01
    477c:	81 e0       	ldi	r24, 0x01	; 1
    477e:	69 2f       	mov	r22, r25
    4780:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    4784:	89 81       	ldd	r24, Y+1	; 0x01
    4786:	9a 81       	ldd	r25, Y+2	; 0x02
    4788:	01 96       	adiw	r24, 0x01	; 1
    478a:	9a 83       	std	Y+2, r25	; 0x02
    478c:	89 83       	std	Y+1, r24	; 0x01
    478e:	82 e0       	ldi	r24, 0x02	; 2
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	9e 8b       	std	Y+22, r25	; 0x16
    4794:	8d 8b       	std	Y+21, r24	; 0x15
    4796:	88 e0       	ldi	r24, 0x08	; 8
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	98 87       	std	Y+8, r25	; 0x08
    479c:	8f 83       	std	Y+7, r24	; 0x07
    479e:	18 8a       	std	Y+16, r1	; 0x10
    47a0:	1f 86       	std	Y+15, r1	; 0x0f
    47a2:	3a c1       	rjmp	.+628    	; 0x4a18 <main+0x62c>
case 9:lcd_goto_xy(1,2+y);lcd_print("1");val=1;num=num*10+val;x++;y++;break;
    47a4:	89 81       	ldd	r24, Y+1	; 0x01
    47a6:	98 2f       	mov	r25, r24
    47a8:	9e 5f       	subi	r25, 0xFE	; 254
    47aa:	81 e0       	ldi	r24, 0x01	; 1
    47ac:	69 2f       	mov	r22, r25
    47ae:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    47b2:	80 e7       	ldi	r24, 0x70	; 112
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    47ba:	81 e0       	ldi	r24, 0x01	; 1
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	9e 87       	std	Y+14, r25	; 0x0e
    47c0:	8d 87       	std	Y+13, r24	; 0x0d
    47c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    47c4:	98 89       	ldd	r25, Y+16	; 0x10
    47c6:	9c 01       	movw	r18, r24
    47c8:	22 0f       	add	r18, r18
    47ca:	33 1f       	adc	r19, r19
    47cc:	c9 01       	movw	r24, r18
    47ce:	88 0f       	add	r24, r24
    47d0:	99 1f       	adc	r25, r25
    47d2:	88 0f       	add	r24, r24
    47d4:	99 1f       	adc	r25, r25
    47d6:	28 0f       	add	r18, r24
    47d8:	39 1f       	adc	r19, r25
    47da:	8d 85       	ldd	r24, Y+13	; 0x0d
    47dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    47de:	82 0f       	add	r24, r18
    47e0:	93 1f       	adc	r25, r19
    47e2:	98 8b       	std	Y+16, r25	; 0x10
    47e4:	8f 87       	std	Y+15, r24	; 0x0f
    47e6:	8f 81       	ldd	r24, Y+7	; 0x07
    47e8:	98 85       	ldd	r25, Y+8	; 0x08
    47ea:	01 96       	adiw	r24, 0x01	; 1
    47ec:	98 87       	std	Y+8, r25	; 0x08
    47ee:	8f 83       	std	Y+7, r24	; 0x07
    47f0:	89 81       	ldd	r24, Y+1	; 0x01
    47f2:	9a 81       	ldd	r25, Y+2	; 0x02
    47f4:	01 96       	adiw	r24, 0x01	; 1
    47f6:	9a 83       	std	Y+2, r25	; 0x02
    47f8:	89 83       	std	Y+1, r24	; 0x01
    47fa:	0e c1       	rjmp	.+540    	; 0x4a18 <main+0x62c>
case 10:lcd_goto_xy(1,2+y);lcd_print("2");val=2;num=num*10+val;x++;y++;break;
    47fc:	89 81       	ldd	r24, Y+1	; 0x01
    47fe:	98 2f       	mov	r25, r24
    4800:	9e 5f       	subi	r25, 0xFE	; 254
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	69 2f       	mov	r22, r25
    4806:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    480a:	82 e7       	ldi	r24, 0x72	; 114
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    4812:	82 e0       	ldi	r24, 0x02	; 2
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	9e 87       	std	Y+14, r25	; 0x0e
    4818:	8d 87       	std	Y+13, r24	; 0x0d
    481a:	8f 85       	ldd	r24, Y+15	; 0x0f
    481c:	98 89       	ldd	r25, Y+16	; 0x10
    481e:	9c 01       	movw	r18, r24
    4820:	22 0f       	add	r18, r18
    4822:	33 1f       	adc	r19, r19
    4824:	c9 01       	movw	r24, r18
    4826:	88 0f       	add	r24, r24
    4828:	99 1f       	adc	r25, r25
    482a:	88 0f       	add	r24, r24
    482c:	99 1f       	adc	r25, r25
    482e:	28 0f       	add	r18, r24
    4830:	39 1f       	adc	r19, r25
    4832:	8d 85       	ldd	r24, Y+13	; 0x0d
    4834:	9e 85       	ldd	r25, Y+14	; 0x0e
    4836:	82 0f       	add	r24, r18
    4838:	93 1f       	adc	r25, r19
    483a:	98 8b       	std	Y+16, r25	; 0x10
    483c:	8f 87       	std	Y+15, r24	; 0x0f
    483e:	8f 81       	ldd	r24, Y+7	; 0x07
    4840:	98 85       	ldd	r25, Y+8	; 0x08
    4842:	01 96       	adiw	r24, 0x01	; 1
    4844:	98 87       	std	Y+8, r25	; 0x08
    4846:	8f 83       	std	Y+7, r24	; 0x07
    4848:	89 81       	ldd	r24, Y+1	; 0x01
    484a:	9a 81       	ldd	r25, Y+2	; 0x02
    484c:	01 96       	adiw	r24, 0x01	; 1
    484e:	9a 83       	std	Y+2, r25	; 0x02
    4850:	89 83       	std	Y+1, r24	; 0x01
    4852:	e2 c0       	rjmp	.+452    	; 0x4a18 <main+0x62c>
case 11:lcd_goto_xy(1,2+y);lcd_print("3");val=3;num=num*10+val;x++;y++;break;
    4854:	89 81       	ldd	r24, Y+1	; 0x01
    4856:	98 2f       	mov	r25, r24
    4858:	9e 5f       	subi	r25, 0xFE	; 254
    485a:	81 e0       	ldi	r24, 0x01	; 1
    485c:	69 2f       	mov	r22, r25
    485e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    4862:	84 e7       	ldi	r24, 0x74	; 116
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    486a:	83 e0       	ldi	r24, 0x03	; 3
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	9e 87       	std	Y+14, r25	; 0x0e
    4870:	8d 87       	std	Y+13, r24	; 0x0d
    4872:	8f 85       	ldd	r24, Y+15	; 0x0f
    4874:	98 89       	ldd	r25, Y+16	; 0x10
    4876:	9c 01       	movw	r18, r24
    4878:	22 0f       	add	r18, r18
    487a:	33 1f       	adc	r19, r19
    487c:	c9 01       	movw	r24, r18
    487e:	88 0f       	add	r24, r24
    4880:	99 1f       	adc	r25, r25
    4882:	88 0f       	add	r24, r24
    4884:	99 1f       	adc	r25, r25
    4886:	28 0f       	add	r18, r24
    4888:	39 1f       	adc	r19, r25
    488a:	8d 85       	ldd	r24, Y+13	; 0x0d
    488c:	9e 85       	ldd	r25, Y+14	; 0x0e
    488e:	82 0f       	add	r24, r18
    4890:	93 1f       	adc	r25, r19
    4892:	98 8b       	std	Y+16, r25	; 0x10
    4894:	8f 87       	std	Y+15, r24	; 0x0f
    4896:	8f 81       	ldd	r24, Y+7	; 0x07
    4898:	98 85       	ldd	r25, Y+8	; 0x08
    489a:	01 96       	adiw	r24, 0x01	; 1
    489c:	98 87       	std	Y+8, r25	; 0x08
    489e:	8f 83       	std	Y+7, r24	; 0x07
    48a0:	89 81       	ldd	r24, Y+1	; 0x01
    48a2:	9a 81       	ldd	r25, Y+2	; 0x02
    48a4:	01 96       	adiw	r24, 0x01	; 1
    48a6:	9a 83       	std	Y+2, r25	; 0x02
    48a8:	89 83       	std	Y+1, r24	; 0x01
    48aa:	b6 c0       	rjmp	.+364    	; 0x4a18 <main+0x62c>
case 12:lcd_goto_xy(1,2+y);lcd_print("-");fnum=num;lcd_goto_xy(1,y);y++;op=3;x=8;num=0;break;
    48ac:	89 81       	ldd	r24, Y+1	; 0x01
    48ae:	98 2f       	mov	r25, r24
    48b0:	9e 5f       	subi	r25, 0xFE	; 254
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	69 2f       	mov	r22, r25
    48b6:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    48ba:	86 e7       	ldi	r24, 0x76	; 118
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    48c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    48c4:	98 89       	ldd	r25, Y+16	; 0x10
    48c6:	9a 8b       	std	Y+18, r25	; 0x12
    48c8:	89 8b       	std	Y+17, r24	; 0x11
    48ca:	99 81       	ldd	r25, Y+1	; 0x01
    48cc:	81 e0       	ldi	r24, 0x01	; 1
    48ce:	69 2f       	mov	r22, r25
    48d0:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    48d4:	89 81       	ldd	r24, Y+1	; 0x01
    48d6:	9a 81       	ldd	r25, Y+2	; 0x02
    48d8:	01 96       	adiw	r24, 0x01	; 1
    48da:	9a 83       	std	Y+2, r25	; 0x02
    48dc:	89 83       	std	Y+1, r24	; 0x01
    48de:	83 e0       	ldi	r24, 0x03	; 3
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	9e 8b       	std	Y+22, r25	; 0x16
    48e4:	8d 8b       	std	Y+21, r24	; 0x15
    48e6:	88 e0       	ldi	r24, 0x08	; 8
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	98 87       	std	Y+8, r25	; 0x08
    48ec:	8f 83       	std	Y+7, r24	; 0x07
    48ee:	18 8a       	std	Y+16, r1	; 0x10
    48f0:	1f 86       	std	Y+15, r1	; 0x0f
    48f2:	92 c0       	rjmp	.+292    	; 0x4a18 <main+0x62c>
case 13:lcd_CLEAR(); x=0;lcd_goto_xy(1,2+y);n=0;lnum=0;equan=0;y=0;break;
    48f4:	0e 94 9a 20 	call	0x4134	; 0x4134 <lcd_CLEAR>
    48f8:	18 86       	std	Y+8, r1	; 0x08
    48fa:	1f 82       	std	Y+7, r1	; 0x07
    48fc:	89 81       	ldd	r24, Y+1	; 0x01
    48fe:	98 2f       	mov	r25, r24
    4900:	9e 5f       	subi	r25, 0xFE	; 254
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	69 2f       	mov	r22, r25
    4906:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    490a:	1c 82       	std	Y+4, r1	; 0x04
    490c:	1b 82       	std	Y+3, r1	; 0x03
    490e:	1c 8a       	std	Y+20, r1	; 0x14
    4910:	1b 8a       	std	Y+19, r1	; 0x13
    4912:	80 e0       	ldi	r24, 0x00	; 0
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	a0 e0       	ldi	r26, 0x00	; 0
    4918:	b0 e0       	ldi	r27, 0x00	; 0
    491a:	89 87       	std	Y+9, r24	; 0x09
    491c:	9a 87       	std	Y+10, r25	; 0x0a
    491e:	ab 87       	std	Y+11, r26	; 0x0b
    4920:	bc 87       	std	Y+12, r27	; 0x0c
    4922:	1a 82       	std	Y+2, r1	; 0x02
    4924:	19 82       	std	Y+1, r1	; 0x01
    4926:	78 c0       	rjmp	.+240    	; 0x4a18 <main+0x62c>
case 14:lcd_goto_xy(1,2+y);lcd_print("0");val=0;num=num*10+val;x++;y++;break;
    4928:	89 81       	ldd	r24, Y+1	; 0x01
    492a:	98 2f       	mov	r25, r24
    492c:	9e 5f       	subi	r25, 0xFE	; 254
    492e:	81 e0       	ldi	r24, 0x01	; 1
    4930:	69 2f       	mov	r22, r25
    4932:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    4936:	88 e7       	ldi	r24, 0x78	; 120
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    493e:	1e 86       	std	Y+14, r1	; 0x0e
    4940:	1d 86       	std	Y+13, r1	; 0x0d
    4942:	8f 85       	ldd	r24, Y+15	; 0x0f
    4944:	98 89       	ldd	r25, Y+16	; 0x10
    4946:	9c 01       	movw	r18, r24
    4948:	22 0f       	add	r18, r18
    494a:	33 1f       	adc	r19, r19
    494c:	c9 01       	movw	r24, r18
    494e:	88 0f       	add	r24, r24
    4950:	99 1f       	adc	r25, r25
    4952:	88 0f       	add	r24, r24
    4954:	99 1f       	adc	r25, r25
    4956:	28 0f       	add	r18, r24
    4958:	39 1f       	adc	r19, r25
    495a:	8d 85       	ldd	r24, Y+13	; 0x0d
    495c:	9e 85       	ldd	r25, Y+14	; 0x0e
    495e:	82 0f       	add	r24, r18
    4960:	93 1f       	adc	r25, r19
    4962:	98 8b       	std	Y+16, r25	; 0x10
    4964:	8f 87       	std	Y+15, r24	; 0x0f
    4966:	8f 81       	ldd	r24, Y+7	; 0x07
    4968:	98 85       	ldd	r25, Y+8	; 0x08
    496a:	01 96       	adiw	r24, 0x01	; 1
    496c:	98 87       	std	Y+8, r25	; 0x08
    496e:	8f 83       	std	Y+7, r24	; 0x07
    4970:	89 81       	ldd	r24, Y+1	; 0x01
    4972:	9a 81       	ldd	r25, Y+2	; 0x02
    4974:	01 96       	adiw	r24, 0x01	; 1
    4976:	9a 83       	std	Y+2, r25	; 0x02
    4978:	89 83       	std	Y+1, r24	; 0x01
    497a:	4e c0       	rjmp	.+156    	; 0x4a18 <main+0x62c>
case 15:lcd_goto_xy(1,2+y);lcd_print("=");x=8;lnum=num;equan=operat(&fnum,&lnum,&op);y=0;n=1;break;
    497c:	89 81       	ldd	r24, Y+1	; 0x01
    497e:	98 2f       	mov	r25, r24
    4980:	9e 5f       	subi	r25, 0xFE	; 254
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	69 2f       	mov	r22, r25
    4986:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    498a:	8a e7       	ldi	r24, 0x7A	; 122
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    4992:	88 e0       	ldi	r24, 0x08	; 8
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	98 87       	std	Y+8, r25	; 0x08
    4998:	8f 83       	std	Y+7, r24	; 0x07
    499a:	8f 85       	ldd	r24, Y+15	; 0x0f
    499c:	98 89       	ldd	r25, Y+16	; 0x10
    499e:	9c 8b       	std	Y+20, r25	; 0x14
    49a0:	8b 8b       	std	Y+19, r24	; 0x13
    49a2:	ce 01       	movw	r24, r28
    49a4:	41 96       	adiw	r24, 0x11	; 17
    49a6:	9e 01       	movw	r18, r28
    49a8:	2d 5e       	subi	r18, 0xED	; 237
    49aa:	3f 4f       	sbci	r19, 0xFF	; 255
    49ac:	ae 01       	movw	r20, r28
    49ae:	4b 5e       	subi	r20, 0xEB	; 235
    49b0:	5f 4f       	sbci	r21, 0xFF	; 255
    49b2:	b9 01       	movw	r22, r18
    49b4:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <operat>
    49b8:	dc 01       	movw	r26, r24
    49ba:	cb 01       	movw	r24, r22
    49bc:	89 87       	std	Y+9, r24	; 0x09
    49be:	9a 87       	std	Y+10, r25	; 0x0a
    49c0:	ab 87       	std	Y+11, r26	; 0x0b
    49c2:	bc 87       	std	Y+12, r27	; 0x0c
    49c4:	1a 82       	std	Y+2, r1	; 0x02
    49c6:	19 82       	std	Y+1, r1	; 0x01
    49c8:	81 e0       	ldi	r24, 0x01	; 1
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	9c 83       	std	Y+4, r25	; 0x04
    49ce:	8b 83       	std	Y+3, r24	; 0x03
    49d0:	23 c0       	rjmp	.+70     	; 0x4a18 <main+0x62c>
case 16:lcd_goto_xy(1,2+y);lcd_print("+");fnum=num;lcd_goto_xy(1,y);op=4;x=8;num=0;y++;break;
    49d2:	89 81       	ldd	r24, Y+1	; 0x01
    49d4:	98 2f       	mov	r25, r24
    49d6:	9e 5f       	subi	r25, 0xFE	; 254
    49d8:	81 e0       	ldi	r24, 0x01	; 1
    49da:	69 2f       	mov	r22, r25
    49dc:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    49e0:	8c e7       	ldi	r24, 0x7C	; 124
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    49e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    49ea:	98 89       	ldd	r25, Y+16	; 0x10
    49ec:	9a 8b       	std	Y+18, r25	; 0x12
    49ee:	89 8b       	std	Y+17, r24	; 0x11
    49f0:	99 81       	ldd	r25, Y+1	; 0x01
    49f2:	81 e0       	ldi	r24, 0x01	; 1
    49f4:	69 2f       	mov	r22, r25
    49f6:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
    49fa:	84 e0       	ldi	r24, 0x04	; 4
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	9e 8b       	std	Y+22, r25	; 0x16
    4a00:	8d 8b       	std	Y+21, r24	; 0x15
    4a02:	88 e0       	ldi	r24, 0x08	; 8
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	98 87       	std	Y+8, r25	; 0x08
    4a08:	8f 83       	std	Y+7, r24	; 0x07
    4a0a:	18 8a       	std	Y+16, r1	; 0x10
    4a0c:	1f 86       	std	Y+15, r1	; 0x0f
    4a0e:	89 81       	ldd	r24, Y+1	; 0x01
    4a10:	9a 81       	ldd	r25, Y+2	; 0x02
    4a12:	01 96       	adiw	r24, 0x01	; 1
    4a14:	9a 83       	std	Y+2, r25	; 0x02
    4a16:	89 83       	std	Y+1, r24	; 0x01
default:;
}
}while(x<8);}
    4a18:	8f 81       	ldd	r24, Y+7	; 0x07
    4a1a:	98 85       	ldd	r25, Y+8	; 0x08
    4a1c:	88 30       	cpi	r24, 0x08	; 8
    4a1e:	91 05       	cpc	r25, r1
    4a20:	0c f4       	brge	.+2      	; 0x4a24 <main+0x638>
    4a22:	fa cc       	rjmp	.-1548   	; 0x4418 <main+0x2c>
while (n<1);
    4a24:	8b 81       	ldd	r24, Y+3	; 0x03
    4a26:	9c 81       	ldd	r25, Y+4	; 0x04
    4a28:	18 16       	cp	r1, r24
    4a2a:	19 06       	cpc	r1, r25
    4a2c:	0c f0       	brlt	.+2      	; 0x4a30 <main+0x644>
    4a2e:	f4 cc       	rjmp	.-1560   	; 0x4418 <main+0x2c>
lcd_goto_xy(2,4);
    4a30:	82 e0       	ldi	r24, 0x02	; 2
    4a32:	64 e0       	ldi	r22, 0x04	; 4
    4a34:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <lcd_goto_xy>
dtostrf(equan,10,3,finum);
    4a38:	89 85       	ldd	r24, Y+9	; 0x09
    4a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a3c:	ab 85       	ldd	r26, Y+11	; 0x0b
    4a3e:	bc 85       	ldd	r27, Y+12	; 0x0c
    4a40:	fe 01       	movw	r30, r28
    4a42:	77 96       	adiw	r30, 0x17	; 23
    4a44:	bc 01       	movw	r22, r24
    4a46:	cd 01       	movw	r24, r26
    4a48:	4a e0       	ldi	r20, 0x0A	; 10
    4a4a:	23 e0       	ldi	r18, 0x03	; 3
    4a4c:	8f 01       	movw	r16, r30
    4a4e:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <dtostrf>
lcd_print(finum);
    4a52:	ce 01       	movw	r24, r28
    4a54:	47 96       	adiw	r24, 0x17	; 23
    4a56:	0e 94 7d 20 	call	0x40fa	; 0x40fa <lcd_print>
    4a5a:	d8 cc       	rjmp	.-1616   	; 0x440c <main+0x20>

00004a5c <operat>:
}
}

 double operat(int *frist,int *last,int *opr){
    4a5c:	ef 92       	push	r14
    4a5e:	ff 92       	push	r15
    4a60:	0f 93       	push	r16
    4a62:	1f 93       	push	r17
    4a64:	df 93       	push	r29
    4a66:	cf 93       	push	r28
    4a68:	cd b7       	in	r28, 0x3d	; 61
    4a6a:	de b7       	in	r29, 0x3e	; 62
    4a6c:	2a 97       	sbiw	r28, 0x0a	; 10
    4a6e:	0f b6       	in	r0, 0x3f	; 63
    4a70:	f8 94       	cli
    4a72:	de bf       	out	0x3e, r29	; 62
    4a74:	0f be       	out	0x3f, r0	; 63
    4a76:	cd bf       	out	0x3d, r28	; 61
    4a78:	9e 83       	std	Y+6, r25	; 0x06
    4a7a:	8d 83       	std	Y+5, r24	; 0x05
    4a7c:	78 87       	std	Y+8, r23	; 0x08
    4a7e:	6f 83       	std	Y+7, r22	; 0x07
    4a80:	5a 87       	std	Y+10, r21	; 0x0a
    4a82:	49 87       	std	Y+9, r20	; 0x09
	double result;
	if (*opr==4){
    4a84:	e9 85       	ldd	r30, Y+9	; 0x09
    4a86:	fa 85       	ldd	r31, Y+10	; 0x0a
    4a88:	80 81       	ld	r24, Z
    4a8a:	91 81       	ldd	r25, Z+1	; 0x01
    4a8c:	84 30       	cpi	r24, 0x04	; 4
    4a8e:	91 05       	cpc	r25, r1
    4a90:	c9 f4       	brne	.+50     	; 0x4ac4 <operat+0x68>
	result=*frist+*last;
    4a92:	ed 81       	ldd	r30, Y+5	; 0x05
    4a94:	fe 81       	ldd	r31, Y+6	; 0x06
    4a96:	20 81       	ld	r18, Z
    4a98:	31 81       	ldd	r19, Z+1	; 0x01
    4a9a:	ef 81       	ldd	r30, Y+7	; 0x07
    4a9c:	f8 85       	ldd	r31, Y+8	; 0x08
    4a9e:	80 81       	ld	r24, Z
    4aa0:	91 81       	ldd	r25, Z+1	; 0x01
    4aa2:	82 0f       	add	r24, r18
    4aa4:	93 1f       	adc	r25, r19
    4aa6:	aa 27       	eor	r26, r26
    4aa8:	97 fd       	sbrc	r25, 7
    4aaa:	a0 95       	com	r26
    4aac:	ba 2f       	mov	r27, r26
    4aae:	bc 01       	movw	r22, r24
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	89 83       	std	Y+1, r24	; 0x01
    4abc:	9a 83       	std	Y+2, r25	; 0x02
    4abe:	ab 83       	std	Y+3, r26	; 0x03
    4ac0:	bc 83       	std	Y+4, r27	; 0x04
    4ac2:	6e c0       	rjmp	.+220    	; 0x4ba0 <operat+0x144>
	}
else if(*opr==3){
    4ac4:	e9 85       	ldd	r30, Y+9	; 0x09
    4ac6:	fa 85       	ldd	r31, Y+10	; 0x0a
    4ac8:	80 81       	ld	r24, Z
    4aca:	91 81       	ldd	r25, Z+1	; 0x01
    4acc:	83 30       	cpi	r24, 0x03	; 3
    4ace:	91 05       	cpc	r25, r1
    4ad0:	d9 f4       	brne	.+54     	; 0x4b08 <operat+0xac>
result=*frist-*last;
    4ad2:	ed 81       	ldd	r30, Y+5	; 0x05
    4ad4:	fe 81       	ldd	r31, Y+6	; 0x06
    4ad6:	20 81       	ld	r18, Z
    4ad8:	31 81       	ldd	r19, Z+1	; 0x01
    4ada:	ef 81       	ldd	r30, Y+7	; 0x07
    4adc:	f8 85       	ldd	r31, Y+8	; 0x08
    4ade:	80 81       	ld	r24, Z
    4ae0:	91 81       	ldd	r25, Z+1	; 0x01
    4ae2:	a9 01       	movw	r20, r18
    4ae4:	48 1b       	sub	r20, r24
    4ae6:	59 0b       	sbc	r21, r25
    4ae8:	ca 01       	movw	r24, r20
    4aea:	aa 27       	eor	r26, r26
    4aec:	97 fd       	sbrc	r25, 7
    4aee:	a0 95       	com	r26
    4af0:	ba 2f       	mov	r27, r26
    4af2:	bc 01       	movw	r22, r24
    4af4:	cd 01       	movw	r24, r26
    4af6:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
    4afa:	dc 01       	movw	r26, r24
    4afc:	cb 01       	movw	r24, r22
    4afe:	89 83       	std	Y+1, r24	; 0x01
    4b00:	9a 83       	std	Y+2, r25	; 0x02
    4b02:	ab 83       	std	Y+3, r26	; 0x03
    4b04:	bc 83       	std	Y+4, r27	; 0x04
    4b06:	4c c0       	rjmp	.+152    	; 0x4ba0 <operat+0x144>
	}
else if(*opr==2){
    4b08:	e9 85       	ldd	r30, Y+9	; 0x09
    4b0a:	fa 85       	ldd	r31, Y+10	; 0x0a
    4b0c:	80 81       	ld	r24, Z
    4b0e:	91 81       	ldd	r25, Z+1	; 0x01
    4b10:	82 30       	cpi	r24, 0x02	; 2
    4b12:	91 05       	cpc	r25, r1
    4b14:	f9 f4       	brne	.+62     	; 0x4b54 <operat+0xf8>
result=(*frist)*(*last);
    4b16:	ed 81       	ldd	r30, Y+5	; 0x05
    4b18:	fe 81       	ldd	r31, Y+6	; 0x06
    4b1a:	20 81       	ld	r18, Z
    4b1c:	31 81       	ldd	r19, Z+1	; 0x01
    4b1e:	ef 81       	ldd	r30, Y+7	; 0x07
    4b20:	f8 85       	ldd	r31, Y+8	; 0x08
    4b22:	80 81       	ld	r24, Z
    4b24:	91 81       	ldd	r25, Z+1	; 0x01
    4b26:	ac 01       	movw	r20, r24
    4b28:	24 9f       	mul	r18, r20
    4b2a:	c0 01       	movw	r24, r0
    4b2c:	25 9f       	mul	r18, r21
    4b2e:	90 0d       	add	r25, r0
    4b30:	34 9f       	mul	r19, r20
    4b32:	90 0d       	add	r25, r0
    4b34:	11 24       	eor	r1, r1
    4b36:	aa 27       	eor	r26, r26
    4b38:	97 fd       	sbrc	r25, 7
    4b3a:	a0 95       	com	r26
    4b3c:	ba 2f       	mov	r27, r26
    4b3e:	bc 01       	movw	r22, r24
    4b40:	cd 01       	movw	r24, r26
    4b42:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
    4b46:	dc 01       	movw	r26, r24
    4b48:	cb 01       	movw	r24, r22
    4b4a:	89 83       	std	Y+1, r24	; 0x01
    4b4c:	9a 83       	std	Y+2, r25	; 0x02
    4b4e:	ab 83       	std	Y+3, r26	; 0x03
    4b50:	bc 83       	std	Y+4, r27	; 0x04
    4b52:	26 c0       	rjmp	.+76     	; 0x4ba0 <operat+0x144>
	}
else{
result=(*frist*1.00)/(*last*1.00);
    4b54:	ed 81       	ldd	r30, Y+5	; 0x05
    4b56:	fe 81       	ldd	r31, Y+6	; 0x06
    4b58:	80 81       	ld	r24, Z
    4b5a:	91 81       	ldd	r25, Z+1	; 0x01
    4b5c:	aa 27       	eor	r26, r26
    4b5e:	97 fd       	sbrc	r25, 7
    4b60:	a0 95       	com	r26
    4b62:	ba 2f       	mov	r27, r26
    4b64:	bc 01       	movw	r22, r24
    4b66:	cd 01       	movw	r24, r26
    4b68:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
    4b6c:	7b 01       	movw	r14, r22
    4b6e:	8c 01       	movw	r16, r24
    4b70:	ef 81       	ldd	r30, Y+7	; 0x07
    4b72:	f8 85       	ldd	r31, Y+8	; 0x08
    4b74:	80 81       	ld	r24, Z
    4b76:	91 81       	ldd	r25, Z+1	; 0x01
    4b78:	aa 27       	eor	r26, r26
    4b7a:	97 fd       	sbrc	r25, 7
    4b7c:	a0 95       	com	r26
    4b7e:	ba 2f       	mov	r27, r26
    4b80:	bc 01       	movw	r22, r24
    4b82:	cd 01       	movw	r24, r26
    4b84:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
    4b88:	9b 01       	movw	r18, r22
    4b8a:	ac 01       	movw	r20, r24
    4b8c:	c8 01       	movw	r24, r16
    4b8e:	b7 01       	movw	r22, r14
    4b90:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    4b94:	dc 01       	movw	r26, r24
    4b96:	cb 01       	movw	r24, r22
    4b98:	89 83       	std	Y+1, r24	; 0x01
    4b9a:	9a 83       	std	Y+2, r25	; 0x02
    4b9c:	ab 83       	std	Y+3, r26	; 0x03
    4b9e:	bc 83       	std	Y+4, r27	; 0x04

}
return (result);
    4ba0:	89 81       	ldd	r24, Y+1	; 0x01
    4ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba4:	ab 81       	ldd	r26, Y+3	; 0x03
    4ba6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    4ba8:	bc 01       	movw	r22, r24
    4baa:	cd 01       	movw	r24, r26
    4bac:	2a 96       	adiw	r28, 0x0a	; 10
    4bae:	0f b6       	in	r0, 0x3f	; 63
    4bb0:	f8 94       	cli
    4bb2:	de bf       	out	0x3e, r29	; 62
    4bb4:	0f be       	out	0x3f, r0	; 63
    4bb6:	cd bf       	out	0x3d, r28	; 61
    4bb8:	cf 91       	pop	r28
    4bba:	df 91       	pop	r29
    4bbc:	1f 91       	pop	r17
    4bbe:	0f 91       	pop	r16
    4bc0:	ff 90       	pop	r15
    4bc2:	ef 90       	pop	r14
    4bc4:	08 95       	ret

00004bc6 <__prologue_saves__>:
    4bc6:	2f 92       	push	r2
    4bc8:	3f 92       	push	r3
    4bca:	4f 92       	push	r4
    4bcc:	5f 92       	push	r5
    4bce:	6f 92       	push	r6
    4bd0:	7f 92       	push	r7
    4bd2:	8f 92       	push	r8
    4bd4:	9f 92       	push	r9
    4bd6:	af 92       	push	r10
    4bd8:	bf 92       	push	r11
    4bda:	cf 92       	push	r12
    4bdc:	df 92       	push	r13
    4bde:	ef 92       	push	r14
    4be0:	ff 92       	push	r15
    4be2:	0f 93       	push	r16
    4be4:	1f 93       	push	r17
    4be6:	cf 93       	push	r28
    4be8:	df 93       	push	r29
    4bea:	cd b7       	in	r28, 0x3d	; 61
    4bec:	de b7       	in	r29, 0x3e	; 62
    4bee:	ca 1b       	sub	r28, r26
    4bf0:	db 0b       	sbc	r29, r27
    4bf2:	0f b6       	in	r0, 0x3f	; 63
    4bf4:	f8 94       	cli
    4bf6:	de bf       	out	0x3e, r29	; 62
    4bf8:	0f be       	out	0x3f, r0	; 63
    4bfa:	cd bf       	out	0x3d, r28	; 61
    4bfc:	09 94       	ijmp

00004bfe <__epilogue_restores__>:
    4bfe:	2a 88       	ldd	r2, Y+18	; 0x12
    4c00:	39 88       	ldd	r3, Y+17	; 0x11
    4c02:	48 88       	ldd	r4, Y+16	; 0x10
    4c04:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c06:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c08:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c10:	b9 84       	ldd	r11, Y+9	; 0x09
    4c12:	c8 84       	ldd	r12, Y+8	; 0x08
    4c14:	df 80       	ldd	r13, Y+7	; 0x07
    4c16:	ee 80       	ldd	r14, Y+6	; 0x06
    4c18:	fd 80       	ldd	r15, Y+5	; 0x05
    4c1a:	0c 81       	ldd	r16, Y+4	; 0x04
    4c1c:	1b 81       	ldd	r17, Y+3	; 0x03
    4c1e:	aa 81       	ldd	r26, Y+2	; 0x02
    4c20:	b9 81       	ldd	r27, Y+1	; 0x01
    4c22:	ce 0f       	add	r28, r30
    4c24:	d1 1d       	adc	r29, r1
    4c26:	0f b6       	in	r0, 0x3f	; 63
    4c28:	f8 94       	cli
    4c2a:	de bf       	out	0x3e, r29	; 62
    4c2c:	0f be       	out	0x3f, r0	; 63
    4c2e:	cd bf       	out	0x3d, r28	; 61
    4c30:	ed 01       	movw	r28, r26
    4c32:	08 95       	ret

00004c34 <dtostrf>:
    4c34:	ef 92       	push	r14
    4c36:	ff 92       	push	r15
    4c38:	0f 93       	push	r16
    4c3a:	1f 93       	push	r17
    4c3c:	f2 2f       	mov	r31, r18
    4c3e:	f0 2e       	mov	r15, r16
    4c40:	47 fd       	sbrc	r20, 7
    4c42:	02 c0       	rjmp	.+4      	; 0x4c48 <dtostrf+0x14>
    4c44:	e4 e0       	ldi	r30, 0x04	; 4
    4c46:	01 c0       	rjmp	.+2      	; 0x4c4a <dtostrf+0x16>
    4c48:	e4 e1       	ldi	r30, 0x14	; 20
    4c4a:	24 2f       	mov	r18, r20
    4c4c:	33 27       	eor	r19, r19
    4c4e:	27 fd       	sbrc	r18, 7
    4c50:	30 95       	com	r19
    4c52:	37 ff       	sbrs	r19, 7
    4c54:	03 c0       	rjmp	.+6      	; 0x4c5c <dtostrf+0x28>
    4c56:	30 95       	com	r19
    4c58:	21 95       	neg	r18
    4c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c5c:	4f 2d       	mov	r20, r15
    4c5e:	51 2f       	mov	r21, r17
    4c60:	0f 2f       	mov	r16, r31
    4c62:	ee 2e       	mov	r14, r30
    4c64:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <dtoa_prf>
    4c68:	8f 2d       	mov	r24, r15
    4c6a:	91 2f       	mov	r25, r17
    4c6c:	1f 91       	pop	r17
    4c6e:	0f 91       	pop	r16
    4c70:	ff 90       	pop	r15
    4c72:	ef 90       	pop	r14
    4c74:	08 95       	ret

00004c76 <dtoa_prf>:
    4c76:	a9 e0       	ldi	r26, 0x09	; 9
    4c78:	b0 e0       	ldi	r27, 0x00	; 0
    4c7a:	e1 e4       	ldi	r30, 0x41	; 65
    4c7c:	f6 e2       	ldi	r31, 0x26	; 38
    4c7e:	0c 94 e7 25 	jmp	0x4bce	; 0x4bce <__prologue_saves__+0x8>
    4c82:	6a 01       	movw	r12, r20
    4c84:	12 2f       	mov	r17, r18
    4c86:	a0 2e       	mov	r10, r16
    4c88:	be 2c       	mov	r11, r14
    4c8a:	2b e3       	ldi	r18, 0x3B	; 59
    4c8c:	20 17       	cp	r18, r16
    4c8e:	18 f4       	brcc	.+6      	; 0x4c96 <dtoa_prf+0x20>
    4c90:	2c e3       	ldi	r18, 0x3C	; 60
    4c92:	92 2e       	mov	r9, r18
    4c94:	02 c0       	rjmp	.+4      	; 0x4c9a <dtoa_prf+0x24>
    4c96:	90 2e       	mov	r9, r16
    4c98:	93 94       	inc	r9
    4c9a:	ae 01       	movw	r20, r28
    4c9c:	4f 5f       	subi	r20, 0xFF	; 255
    4c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4ca0:	27 e0       	ldi	r18, 0x07	; 7
    4ca2:	09 2d       	mov	r16, r9
    4ca4:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <__ftoa_engine>
    4ca8:	bc 01       	movw	r22, r24
    4caa:	89 81       	ldd	r24, Y+1	; 0x01
    4cac:	e8 2e       	mov	r14, r24
    4cae:	ff 24       	eor	r15, r15
    4cb0:	c7 01       	movw	r24, r14
    4cb2:	89 70       	andi	r24, 0x09	; 9
    4cb4:	90 70       	andi	r25, 0x00	; 0
    4cb6:	01 97       	sbiw	r24, 0x01	; 1
    4cb8:	11 f4       	brne	.+4      	; 0x4cbe <dtoa_prf+0x48>
    4cba:	ad e2       	ldi	r26, 0x2D	; 45
    4cbc:	09 c0       	rjmp	.+18     	; 0x4cd0 <dtoa_prf+0x5a>
    4cbe:	b1 fe       	sbrs	r11, 1
    4cc0:	02 c0       	rjmp	.+4      	; 0x4cc6 <dtoa_prf+0x50>
    4cc2:	ab e2       	ldi	r26, 0x2B	; 43
    4cc4:	05 c0       	rjmp	.+10     	; 0x4cd0 <dtoa_prf+0x5a>
    4cc6:	b0 fc       	sbrc	r11, 0
    4cc8:	02 c0       	rjmp	.+4      	; 0x4cce <dtoa_prf+0x58>
    4cca:	a0 e0       	ldi	r26, 0x00	; 0
    4ccc:	01 c0       	rjmp	.+2      	; 0x4cd0 <dtoa_prf+0x5a>
    4cce:	a0 e2       	ldi	r26, 0x20	; 32
    4cd0:	e3 fe       	sbrs	r14, 3
    4cd2:	3b c0       	rjmp	.+118    	; 0x4d4a <dtoa_prf+0xd4>
    4cd4:	aa 23       	and	r26, r26
    4cd6:	11 f4       	brne	.+4      	; 0x4cdc <dtoa_prf+0x66>
    4cd8:	23 e0       	ldi	r18, 0x03	; 3
    4cda:	01 c0       	rjmp	.+2      	; 0x4cde <dtoa_prf+0x68>
    4cdc:	24 e0       	ldi	r18, 0x04	; 4
    4cde:	21 17       	cp	r18, r17
    4ce0:	10 f0       	brcs	.+4      	; 0x4ce6 <dtoa_prf+0x70>
    4ce2:	20 e0       	ldi	r18, 0x00	; 0
    4ce4:	02 c0       	rjmp	.+4      	; 0x4cea <dtoa_prf+0x74>
    4ce6:	12 1b       	sub	r17, r18
    4ce8:	21 2f       	mov	r18, r17
    4cea:	eb 2c       	mov	r14, r11
    4cec:	b4 fe       	sbrs	r11, 4
    4cee:	02 c0       	rjmp	.+4      	; 0x4cf4 <dtoa_prf+0x7e>
    4cf0:	32 2f       	mov	r19, r18
    4cf2:	0a c0       	rjmp	.+20     	; 0x4d08 <dtoa_prf+0x92>
    4cf4:	f6 01       	movw	r30, r12
    4cf6:	32 2f       	mov	r19, r18
    4cf8:	80 e2       	ldi	r24, 0x20	; 32
    4cfa:	02 c0       	rjmp	.+4      	; 0x4d00 <dtoa_prf+0x8a>
    4cfc:	81 93       	st	Z+, r24
    4cfe:	31 50       	subi	r19, 0x01	; 1
    4d00:	33 23       	and	r19, r19
    4d02:	e1 f7       	brne	.-8      	; 0x4cfc <dtoa_prf+0x86>
    4d04:	c2 0e       	add	r12, r18
    4d06:	d1 1c       	adc	r13, r1
    4d08:	aa 23       	and	r26, r26
    4d0a:	19 f0       	breq	.+6      	; 0x4d12 <dtoa_prf+0x9c>
    4d0c:	f6 01       	movw	r30, r12
    4d0e:	a1 93       	st	Z+, r26
    4d10:	6f 01       	movw	r12, r30
    4d12:	f6 01       	movw	r30, r12
    4d14:	31 96       	adiw	r30, 0x01	; 1
    4d16:	e2 fe       	sbrs	r14, 2
    4d18:	05 c0       	rjmp	.+10     	; 0x4d24 <dtoa_prf+0xae>
    4d1a:	9e e4       	ldi	r25, 0x4E	; 78
    4d1c:	d6 01       	movw	r26, r12
    4d1e:	9c 93       	st	X, r25
    4d20:	81 e4       	ldi	r24, 0x41	; 65
    4d22:	04 c0       	rjmp	.+8      	; 0x4d2c <dtoa_prf+0xb6>
    4d24:	9e e6       	ldi	r25, 0x6E	; 110
    4d26:	d6 01       	movw	r26, r12
    4d28:	9c 93       	st	X, r25
    4d2a:	81 e6       	ldi	r24, 0x61	; 97
    4d2c:	11 96       	adiw	r26, 0x01	; 1
    4d2e:	8c 93       	st	X, r24
    4d30:	91 83       	std	Z+1, r25	; 0x01
    4d32:	32 96       	adiw	r30, 0x02	; 2
    4d34:	df 01       	movw	r26, r30
    4d36:	83 2f       	mov	r24, r19
    4d38:	90 e2       	ldi	r25, 0x20	; 32
    4d3a:	02 c0       	rjmp	.+4      	; 0x4d40 <dtoa_prf+0xca>
    4d3c:	9d 93       	st	X+, r25
    4d3e:	81 50       	subi	r24, 0x01	; 1
    4d40:	88 23       	and	r24, r24
    4d42:	e1 f7       	brne	.-8      	; 0x4d3c <dtoa_prf+0xc6>
    4d44:	e3 0f       	add	r30, r19
    4d46:	f1 1d       	adc	r31, r1
    4d48:	40 c0       	rjmp	.+128    	; 0x4dca <dtoa_prf+0x154>
    4d4a:	e2 fe       	sbrs	r14, 2
    4d4c:	42 c0       	rjmp	.+132    	; 0x4dd2 <dtoa_prf+0x15c>
    4d4e:	aa 23       	and	r26, r26
    4d50:	11 f4       	brne	.+4      	; 0x4d56 <dtoa_prf+0xe0>
    4d52:	23 e0       	ldi	r18, 0x03	; 3
    4d54:	01 c0       	rjmp	.+2      	; 0x4d58 <dtoa_prf+0xe2>
    4d56:	24 e0       	ldi	r18, 0x04	; 4
    4d58:	21 17       	cp	r18, r17
    4d5a:	10 f0       	brcs	.+4      	; 0x4d60 <dtoa_prf+0xea>
    4d5c:	20 e0       	ldi	r18, 0x00	; 0
    4d5e:	02 c0       	rjmp	.+4      	; 0x4d64 <dtoa_prf+0xee>
    4d60:	12 1b       	sub	r17, r18
    4d62:	21 2f       	mov	r18, r17
    4d64:	eb 2c       	mov	r14, r11
    4d66:	b4 fe       	sbrs	r11, 4
    4d68:	02 c0       	rjmp	.+4      	; 0x4d6e <dtoa_prf+0xf8>
    4d6a:	92 2f       	mov	r25, r18
    4d6c:	0a c0       	rjmp	.+20     	; 0x4d82 <dtoa_prf+0x10c>
    4d6e:	f6 01       	movw	r30, r12
    4d70:	92 2f       	mov	r25, r18
    4d72:	80 e2       	ldi	r24, 0x20	; 32
    4d74:	02 c0       	rjmp	.+4      	; 0x4d7a <dtoa_prf+0x104>
    4d76:	81 93       	st	Z+, r24
    4d78:	91 50       	subi	r25, 0x01	; 1
    4d7a:	99 23       	and	r25, r25
    4d7c:	e1 f7       	brne	.-8      	; 0x4d76 <dtoa_prf+0x100>
    4d7e:	c2 0e       	add	r12, r18
    4d80:	d1 1c       	adc	r13, r1
    4d82:	aa 23       	and	r26, r26
    4d84:	19 f0       	breq	.+6      	; 0x4d8c <dtoa_prf+0x116>
    4d86:	f6 01       	movw	r30, r12
    4d88:	a1 93       	st	Z+, r26
    4d8a:	6f 01       	movw	r12, r30
    4d8c:	f6 01       	movw	r30, r12
    4d8e:	31 96       	adiw	r30, 0x01	; 1
    4d90:	e2 fe       	sbrs	r14, 2
    4d92:	08 c0       	rjmp	.+16     	; 0x4da4 <dtoa_prf+0x12e>
    4d94:	89 e4       	ldi	r24, 0x49	; 73
    4d96:	d6 01       	movw	r26, r12
    4d98:	8c 93       	st	X, r24
    4d9a:	8e e4       	ldi	r24, 0x4E	; 78
    4d9c:	11 96       	adiw	r26, 0x01	; 1
    4d9e:	8c 93       	st	X, r24
    4da0:	86 e4       	ldi	r24, 0x46	; 70
    4da2:	07 c0       	rjmp	.+14     	; 0x4db2 <dtoa_prf+0x13c>
    4da4:	89 e6       	ldi	r24, 0x69	; 105
    4da6:	d6 01       	movw	r26, r12
    4da8:	8c 93       	st	X, r24
    4daa:	8e e6       	ldi	r24, 0x6E	; 110
    4dac:	11 96       	adiw	r26, 0x01	; 1
    4dae:	8c 93       	st	X, r24
    4db0:	86 e6       	ldi	r24, 0x66	; 102
    4db2:	81 83       	std	Z+1, r24	; 0x01
    4db4:	32 96       	adiw	r30, 0x02	; 2
    4db6:	df 01       	movw	r26, r30
    4db8:	89 2f       	mov	r24, r25
    4dba:	20 e2       	ldi	r18, 0x20	; 32
    4dbc:	02 c0       	rjmp	.+4      	; 0x4dc2 <dtoa_prf+0x14c>
    4dbe:	2d 93       	st	X+, r18
    4dc0:	81 50       	subi	r24, 0x01	; 1
    4dc2:	88 23       	and	r24, r24
    4dc4:	e1 f7       	brne	.-8      	; 0x4dbe <dtoa_prf+0x148>
    4dc6:	e9 0f       	add	r30, r25
    4dc8:	f1 1d       	adc	r31, r1
    4dca:	10 82       	st	Z, r1
    4dcc:	2e ef       	ldi	r18, 0xFE	; 254
    4dce:	3f ef       	ldi	r19, 0xFF	; 255
    4dd0:	af c0       	rjmp	.+350    	; 0x4f30 <dtoa_prf+0x2ba>
    4dd2:	16 16       	cp	r1, r22
    4dd4:	17 06       	cpc	r1, r23
    4dd6:	1c f0       	brlt	.+6      	; 0x4dde <dtoa_prf+0x168>
    4dd8:	41 e0       	ldi	r20, 0x01	; 1
    4dda:	50 e0       	ldi	r21, 0x00	; 0
    4ddc:	03 c0       	rjmp	.+6      	; 0x4de4 <dtoa_prf+0x16e>
    4dde:	ab 01       	movw	r20, r22
    4de0:	4f 5f       	subi	r20, 0xFF	; 255
    4de2:	5f 4f       	sbci	r21, 0xFF	; 255
    4de4:	aa 20       	and	r10, r10
    4de6:	19 f4       	brne	.+6      	; 0x4dee <dtoa_prf+0x178>
    4de8:	80 e0       	ldi	r24, 0x00	; 0
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	03 c0       	rjmp	.+6      	; 0x4df4 <dtoa_prf+0x17e>
    4dee:	8a 2d       	mov	r24, r10
    4df0:	90 e0       	ldi	r25, 0x00	; 0
    4df2:	01 96       	adiw	r24, 0x01	; 1
    4df4:	20 e0       	ldi	r18, 0x00	; 0
    4df6:	30 e0       	ldi	r19, 0x00	; 0
    4df8:	aa 23       	and	r26, r26
    4dfa:	11 f0       	breq	.+4      	; 0x4e00 <dtoa_prf+0x18a>
    4dfc:	21 e0       	ldi	r18, 0x01	; 1
    4dfe:	30 e0       	ldi	r19, 0x00	; 0
    4e00:	24 0f       	add	r18, r20
    4e02:	35 1f       	adc	r19, r21
    4e04:	28 0f       	add	r18, r24
    4e06:	39 1f       	adc	r19, r25
    4e08:	81 2f       	mov	r24, r17
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	28 17       	cp	r18, r24
    4e0e:	39 07       	cpc	r19, r25
    4e10:	14 f0       	brlt	.+4      	; 0x4e16 <dtoa_prf+0x1a0>
    4e12:	20 e0       	ldi	r18, 0x00	; 0
    4e14:	02 c0       	rjmp	.+4      	; 0x4e1a <dtoa_prf+0x1a4>
    4e16:	12 1b       	sub	r17, r18
    4e18:	21 2f       	mov	r18, r17
    4e1a:	4b 2d       	mov	r20, r11
    4e1c:	50 e0       	ldi	r21, 0x00	; 0
    4e1e:	ca 01       	movw	r24, r20
    4e20:	80 71       	andi	r24, 0x10	; 16
    4e22:	90 70       	andi	r25, 0x00	; 0
    4e24:	b4 fc       	sbrc	r11, 4
    4e26:	0d c0       	rjmp	.+26     	; 0x4e42 <dtoa_prf+0x1cc>
    4e28:	b3 fc       	sbrc	r11, 3
    4e2a:	0b c0       	rjmp	.+22     	; 0x4e42 <dtoa_prf+0x1cc>
    4e2c:	f6 01       	movw	r30, r12
    4e2e:	32 2f       	mov	r19, r18
    4e30:	40 e2       	ldi	r20, 0x20	; 32
    4e32:	02 c0       	rjmp	.+4      	; 0x4e38 <dtoa_prf+0x1c2>
    4e34:	41 93       	st	Z+, r20
    4e36:	31 50       	subi	r19, 0x01	; 1
    4e38:	33 23       	and	r19, r19
    4e3a:	e1 f7       	brne	.-8      	; 0x4e34 <dtoa_prf+0x1be>
    4e3c:	c2 0e       	add	r12, r18
    4e3e:	d1 1c       	adc	r13, r1
    4e40:	01 c0       	rjmp	.+2      	; 0x4e44 <dtoa_prf+0x1ce>
    4e42:	32 2f       	mov	r19, r18
    4e44:	aa 23       	and	r26, r26
    4e46:	19 f0       	breq	.+6      	; 0x4e4e <dtoa_prf+0x1d8>
    4e48:	f6 01       	movw	r30, r12
    4e4a:	a1 93       	st	Z+, r26
    4e4c:	6f 01       	movw	r12, r30
    4e4e:	89 2b       	or	r24, r25
    4e50:	11 f0       	breq	.+4      	; 0x4e56 <dtoa_prf+0x1e0>
    4e52:	13 2f       	mov	r17, r19
    4e54:	0a c0       	rjmp	.+20     	; 0x4e6a <dtoa_prf+0x1f4>
    4e56:	f6 01       	movw	r30, r12
    4e58:	13 2f       	mov	r17, r19
    4e5a:	80 e3       	ldi	r24, 0x30	; 48
    4e5c:	02 c0       	rjmp	.+4      	; 0x4e62 <dtoa_prf+0x1ec>
    4e5e:	81 93       	st	Z+, r24
    4e60:	11 50       	subi	r17, 0x01	; 1
    4e62:	11 23       	and	r17, r17
    4e64:	e1 f7       	brne	.-8      	; 0x4e5e <dtoa_prf+0x1e8>
    4e66:	c3 0e       	add	r12, r19
    4e68:	d1 1c       	adc	r13, r1
    4e6a:	09 2d       	mov	r16, r9
    4e6c:	06 0f       	add	r16, r22
    4e6e:	ba 80       	ldd	r11, Y+2	; 0x02
    4e70:	90 e1       	ldi	r25, 0x10	; 16
    4e72:	89 2e       	mov	r8, r25
    4e74:	91 2c       	mov	r9, r1
    4e76:	8e 20       	and	r8, r14
    4e78:	9f 20       	and	r9, r15
    4e7a:	e4 fe       	sbrs	r14, 4
    4e7c:	04 c0       	rjmp	.+8      	; 0x4e86 <dtoa_prf+0x210>
    4e7e:	f1 e3       	ldi	r31, 0x31	; 49
    4e80:	bf 16       	cp	r11, r31
    4e82:	09 f4       	brne	.+2      	; 0x4e86 <dtoa_prf+0x210>
    4e84:	01 50       	subi	r16, 0x01	; 1
    4e86:	10 16       	cp	r1, r16
    4e88:	14 f0       	brlt	.+4      	; 0x4e8e <dtoa_prf+0x218>
    4e8a:	01 e0       	ldi	r16, 0x01	; 1
    4e8c:	03 c0       	rjmp	.+6      	; 0x4e94 <dtoa_prf+0x21e>
    4e8e:	09 30       	cpi	r16, 0x09	; 9
    4e90:	08 f0       	brcs	.+2      	; 0x4e94 <dtoa_prf+0x21e>
    4e92:	08 e0       	ldi	r16, 0x08	; 8
    4e94:	9b 01       	movw	r18, r22
    4e96:	77 ff       	sbrs	r23, 7
    4e98:	02 c0       	rjmp	.+4      	; 0x4e9e <dtoa_prf+0x228>
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	cb 01       	movw	r24, r22
    4ea0:	01 96       	adiw	r24, 0x01	; 1
    4ea2:	82 1b       	sub	r24, r18
    4ea4:	93 0b       	sbc	r25, r19
    4ea6:	fe 01       	movw	r30, r28
    4ea8:	31 96       	adiw	r30, 0x01	; 1
    4eaa:	e8 0f       	add	r30, r24
    4eac:	f9 1f       	adc	r31, r25
    4eae:	8e e2       	ldi	r24, 0x2E	; 46
    4eb0:	f8 2e       	mov	r15, r24
    4eb2:	3b 01       	movw	r6, r22
    4eb4:	60 1a       	sub	r6, r16
    4eb6:	71 08       	sbc	r7, r1
    4eb8:	8a 2d       	mov	r24, r10
    4eba:	90 e0       	ldi	r25, 0x00	; 0
    4ebc:	44 27       	eor	r20, r20
    4ebe:	55 27       	eor	r21, r21
    4ec0:	48 1b       	sub	r20, r24
    4ec2:	59 0b       	sbc	r21, r25
    4ec4:	8f ef       	ldi	r24, 0xFF	; 255
    4ec6:	2f 3f       	cpi	r18, 0xFF	; 255
    4ec8:	38 07       	cpc	r19, r24
    4eca:	19 f4       	brne	.+6      	; 0x4ed2 <dtoa_prf+0x25c>
    4ecc:	d6 01       	movw	r26, r12
    4ece:	fd 92       	st	X+, r15
    4ed0:	6d 01       	movw	r12, r26
    4ed2:	62 17       	cp	r22, r18
    4ed4:	73 07       	cpc	r23, r19
    4ed6:	2c f0       	brlt	.+10     	; 0x4ee2 <dtoa_prf+0x26c>
    4ed8:	62 16       	cp	r6, r18
    4eda:	73 06       	cpc	r7, r19
    4edc:	14 f4       	brge	.+4      	; 0x4ee2 <dtoa_prf+0x26c>
    4ede:	80 81       	ld	r24, Z
    4ee0:	01 c0       	rjmp	.+2      	; 0x4ee4 <dtoa_prf+0x26e>
    4ee2:	80 e3       	ldi	r24, 0x30	; 48
    4ee4:	21 50       	subi	r18, 0x01	; 1
    4ee6:	30 40       	sbci	r19, 0x00	; 0
    4ee8:	31 96       	adiw	r30, 0x01	; 1
    4eea:	24 17       	cp	r18, r20
    4eec:	35 07       	cpc	r19, r21
    4eee:	24 f0       	brlt	.+8      	; 0x4ef8 <dtoa_prf+0x282>
    4ef0:	d6 01       	movw	r26, r12
    4ef2:	8d 93       	st	X+, r24
    4ef4:	6d 01       	movw	r12, r26
    4ef6:	e6 cf       	rjmp	.-52     	; 0x4ec4 <dtoa_prf+0x24e>
    4ef8:	26 17       	cp	r18, r22
    4efa:	37 07       	cpc	r19, r23
    4efc:	49 f4       	brne	.+18     	; 0x4f10 <dtoa_prf+0x29a>
    4efe:	b5 e3       	ldi	r27, 0x35	; 53
    4f00:	bb 15       	cp	r27, r11
    4f02:	28 f0       	brcs	.+10     	; 0x4f0e <dtoa_prf+0x298>
    4f04:	bb 16       	cp	r11, r27
    4f06:	21 f4       	brne	.+8      	; 0x4f10 <dtoa_prf+0x29a>
    4f08:	81 14       	cp	r8, r1
    4f0a:	91 04       	cpc	r9, r1
    4f0c:	09 f4       	brne	.+2      	; 0x4f10 <dtoa_prf+0x29a>
    4f0e:	81 e3       	ldi	r24, 0x31	; 49
    4f10:	f6 01       	movw	r30, r12
    4f12:	81 93       	st	Z+, r24
    4f14:	d6 01       	movw	r26, r12
    4f16:	81 2f       	mov	r24, r17
    4f18:	90 e2       	ldi	r25, 0x20	; 32
    4f1a:	02 c0       	rjmp	.+4      	; 0x4f20 <dtoa_prf+0x2aa>
    4f1c:	9c 93       	st	X, r25
    4f1e:	81 50       	subi	r24, 0x01	; 1
    4f20:	11 96       	adiw	r26, 0x01	; 1
    4f22:	88 23       	and	r24, r24
    4f24:	d9 f7       	brne	.-10     	; 0x4f1c <dtoa_prf+0x2a6>
    4f26:	e1 0f       	add	r30, r17
    4f28:	f1 1d       	adc	r31, r1
    4f2a:	10 82       	st	Z, r1
    4f2c:	20 e0       	ldi	r18, 0x00	; 0
    4f2e:	30 e0       	ldi	r19, 0x00	; 0
    4f30:	c9 01       	movw	r24, r18
    4f32:	29 96       	adiw	r28, 0x09	; 9
    4f34:	ee e0       	ldi	r30, 0x0E	; 14
    4f36:	0c 94 03 26 	jmp	0x4c06	; 0x4c06 <__epilogue_restores__+0x8>

00004f3a <__ftoa_engine>:
    4f3a:	28 30       	cpi	r18, 0x08	; 8
    4f3c:	08 f0       	brcs	.+2      	; 0x4f40 <__ftoa_engine+0x6>
    4f3e:	27 e0       	ldi	r18, 0x07	; 7
    4f40:	33 27       	eor	r19, r19
    4f42:	da 01       	movw	r26, r20
    4f44:	99 0f       	add	r25, r25
    4f46:	31 1d       	adc	r19, r1
    4f48:	87 fd       	sbrc	r24, 7
    4f4a:	91 60       	ori	r25, 0x01	; 1
    4f4c:	00 96       	adiw	r24, 0x00	; 0
    4f4e:	61 05       	cpc	r22, r1
    4f50:	71 05       	cpc	r23, r1
    4f52:	39 f4       	brne	.+14     	; 0x4f62 <__ftoa_engine+0x28>
    4f54:	32 60       	ori	r19, 0x02	; 2
    4f56:	2e 5f       	subi	r18, 0xFE	; 254
    4f58:	3d 93       	st	X+, r19
    4f5a:	30 e3       	ldi	r19, 0x30	; 48
    4f5c:	2a 95       	dec	r18
    4f5e:	e1 f7       	brne	.-8      	; 0x4f58 <__ftoa_engine+0x1e>
    4f60:	08 95       	ret
    4f62:	9f 3f       	cpi	r25, 0xFF	; 255
    4f64:	30 f0       	brcs	.+12     	; 0x4f72 <__ftoa_engine+0x38>
    4f66:	80 38       	cpi	r24, 0x80	; 128
    4f68:	71 05       	cpc	r23, r1
    4f6a:	61 05       	cpc	r22, r1
    4f6c:	09 f0       	breq	.+2      	; 0x4f70 <__ftoa_engine+0x36>
    4f6e:	3c 5f       	subi	r19, 0xFC	; 252
    4f70:	3c 5f       	subi	r19, 0xFC	; 252
    4f72:	3d 93       	st	X+, r19
    4f74:	91 30       	cpi	r25, 0x01	; 1
    4f76:	08 f0       	brcs	.+2      	; 0x4f7a <__ftoa_engine+0x40>
    4f78:	80 68       	ori	r24, 0x80	; 128
    4f7a:	91 1d       	adc	r25, r1
    4f7c:	df 93       	push	r29
    4f7e:	cf 93       	push	r28
    4f80:	1f 93       	push	r17
    4f82:	0f 93       	push	r16
    4f84:	ff 92       	push	r15
    4f86:	ef 92       	push	r14
    4f88:	19 2f       	mov	r17, r25
    4f8a:	98 7f       	andi	r25, 0xF8	; 248
    4f8c:	96 95       	lsr	r25
    4f8e:	e9 2f       	mov	r30, r25
    4f90:	96 95       	lsr	r25
    4f92:	96 95       	lsr	r25
    4f94:	e9 0f       	add	r30, r25
    4f96:	ff 27       	eor	r31, r31
    4f98:	e2 55       	subi	r30, 0x52	; 82
    4f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9c:	99 27       	eor	r25, r25
    4f9e:	33 27       	eor	r19, r19
    4fa0:	ee 24       	eor	r14, r14
    4fa2:	ff 24       	eor	r15, r15
    4fa4:	a7 01       	movw	r20, r14
    4fa6:	e7 01       	movw	r28, r14
    4fa8:	05 90       	lpm	r0, Z+
    4faa:	08 94       	sec
    4fac:	07 94       	ror	r0
    4fae:	28 f4       	brcc	.+10     	; 0x4fba <__ftoa_engine+0x80>
    4fb0:	36 0f       	add	r19, r22
    4fb2:	e7 1e       	adc	r14, r23
    4fb4:	f8 1e       	adc	r15, r24
    4fb6:	49 1f       	adc	r20, r25
    4fb8:	51 1d       	adc	r21, r1
    4fba:	66 0f       	add	r22, r22
    4fbc:	77 1f       	adc	r23, r23
    4fbe:	88 1f       	adc	r24, r24
    4fc0:	99 1f       	adc	r25, r25
    4fc2:	06 94       	lsr	r0
    4fc4:	a1 f7       	brne	.-24     	; 0x4fae <__ftoa_engine+0x74>
    4fc6:	05 90       	lpm	r0, Z+
    4fc8:	07 94       	ror	r0
    4fca:	28 f4       	brcc	.+10     	; 0x4fd6 <__ftoa_engine+0x9c>
    4fcc:	e7 0e       	add	r14, r23
    4fce:	f8 1e       	adc	r15, r24
    4fd0:	49 1f       	adc	r20, r25
    4fd2:	56 1f       	adc	r21, r22
    4fd4:	c1 1d       	adc	r28, r1
    4fd6:	77 0f       	add	r23, r23
    4fd8:	88 1f       	adc	r24, r24
    4fda:	99 1f       	adc	r25, r25
    4fdc:	66 1f       	adc	r22, r22
    4fde:	06 94       	lsr	r0
    4fe0:	a1 f7       	brne	.-24     	; 0x4fca <__ftoa_engine+0x90>
    4fe2:	05 90       	lpm	r0, Z+
    4fe4:	07 94       	ror	r0
    4fe6:	28 f4       	brcc	.+10     	; 0x4ff2 <__ftoa_engine+0xb8>
    4fe8:	f8 0e       	add	r15, r24
    4fea:	49 1f       	adc	r20, r25
    4fec:	56 1f       	adc	r21, r22
    4fee:	c7 1f       	adc	r28, r23
    4ff0:	d1 1d       	adc	r29, r1
    4ff2:	88 0f       	add	r24, r24
    4ff4:	99 1f       	adc	r25, r25
    4ff6:	66 1f       	adc	r22, r22
    4ff8:	77 1f       	adc	r23, r23
    4ffa:	06 94       	lsr	r0
    4ffc:	a1 f7       	brne	.-24     	; 0x4fe6 <__ftoa_engine+0xac>
    4ffe:	05 90       	lpm	r0, Z+
    5000:	07 94       	ror	r0
    5002:	20 f4       	brcc	.+8      	; 0x500c <__ftoa_engine+0xd2>
    5004:	49 0f       	add	r20, r25
    5006:	56 1f       	adc	r21, r22
    5008:	c7 1f       	adc	r28, r23
    500a:	d8 1f       	adc	r29, r24
    500c:	99 0f       	add	r25, r25
    500e:	66 1f       	adc	r22, r22
    5010:	77 1f       	adc	r23, r23
    5012:	88 1f       	adc	r24, r24
    5014:	06 94       	lsr	r0
    5016:	a9 f7       	brne	.-22     	; 0x5002 <__ftoa_engine+0xc8>
    5018:	84 91       	lpm	r24, Z+
    501a:	10 95       	com	r17
    501c:	17 70       	andi	r17, 0x07	; 7
    501e:	41 f0       	breq	.+16     	; 0x5030 <__ftoa_engine+0xf6>
    5020:	d6 95       	lsr	r29
    5022:	c7 95       	ror	r28
    5024:	57 95       	ror	r21
    5026:	47 95       	ror	r20
    5028:	f7 94       	ror	r15
    502a:	e7 94       	ror	r14
    502c:	1a 95       	dec	r17
    502e:	c1 f7       	brne	.-16     	; 0x5020 <__ftoa_engine+0xe6>
    5030:	e4 e5       	ldi	r30, 0x54	; 84
    5032:	f0 e0       	ldi	r31, 0x00	; 0
    5034:	68 94       	set
    5036:	15 90       	lpm	r1, Z+
    5038:	15 91       	lpm	r17, Z+
    503a:	35 91       	lpm	r19, Z+
    503c:	65 91       	lpm	r22, Z+
    503e:	95 91       	lpm	r25, Z+
    5040:	05 90       	lpm	r0, Z+
    5042:	7f e2       	ldi	r23, 0x2F	; 47
    5044:	73 95       	inc	r23
    5046:	e1 18       	sub	r14, r1
    5048:	f1 0a       	sbc	r15, r17
    504a:	43 0b       	sbc	r20, r19
    504c:	56 0b       	sbc	r21, r22
    504e:	c9 0b       	sbc	r28, r25
    5050:	d0 09       	sbc	r29, r0
    5052:	c0 f7       	brcc	.-16     	; 0x5044 <__ftoa_engine+0x10a>
    5054:	e1 0c       	add	r14, r1
    5056:	f1 1e       	adc	r15, r17
    5058:	43 1f       	adc	r20, r19
    505a:	56 1f       	adc	r21, r22
    505c:	c9 1f       	adc	r28, r25
    505e:	d0 1d       	adc	r29, r0
    5060:	7e f4       	brtc	.+30     	; 0x5080 <__ftoa_engine+0x146>
    5062:	70 33       	cpi	r23, 0x30	; 48
    5064:	11 f4       	brne	.+4      	; 0x506a <__ftoa_engine+0x130>
    5066:	8a 95       	dec	r24
    5068:	e6 cf       	rjmp	.-52     	; 0x5036 <__ftoa_engine+0xfc>
    506a:	e8 94       	clt
    506c:	01 50       	subi	r16, 0x01	; 1
    506e:	30 f0       	brcs	.+12     	; 0x507c <__ftoa_engine+0x142>
    5070:	08 0f       	add	r16, r24
    5072:	0a f4       	brpl	.+2      	; 0x5076 <__ftoa_engine+0x13c>
    5074:	00 27       	eor	r16, r16
    5076:	02 17       	cp	r16, r18
    5078:	08 f4       	brcc	.+2      	; 0x507c <__ftoa_engine+0x142>
    507a:	20 2f       	mov	r18, r16
    507c:	23 95       	inc	r18
    507e:	02 2f       	mov	r16, r18
    5080:	7a 33       	cpi	r23, 0x3A	; 58
    5082:	28 f0       	brcs	.+10     	; 0x508e <__ftoa_engine+0x154>
    5084:	79 e3       	ldi	r23, 0x39	; 57
    5086:	7d 93       	st	X+, r23
    5088:	2a 95       	dec	r18
    508a:	e9 f7       	brne	.-6      	; 0x5086 <__ftoa_engine+0x14c>
    508c:	10 c0       	rjmp	.+32     	; 0x50ae <__ftoa_engine+0x174>
    508e:	7d 93       	st	X+, r23
    5090:	2a 95       	dec	r18
    5092:	89 f6       	brne	.-94     	; 0x5036 <__ftoa_engine+0xfc>
    5094:	06 94       	lsr	r0
    5096:	97 95       	ror	r25
    5098:	67 95       	ror	r22
    509a:	37 95       	ror	r19
    509c:	17 95       	ror	r17
    509e:	17 94       	ror	r1
    50a0:	e1 18       	sub	r14, r1
    50a2:	f1 0a       	sbc	r15, r17
    50a4:	43 0b       	sbc	r20, r19
    50a6:	56 0b       	sbc	r21, r22
    50a8:	c9 0b       	sbc	r28, r25
    50aa:	d0 09       	sbc	r29, r0
    50ac:	98 f0       	brcs	.+38     	; 0x50d4 <__ftoa_engine+0x19a>
    50ae:	23 95       	inc	r18
    50b0:	7e 91       	ld	r23, -X
    50b2:	73 95       	inc	r23
    50b4:	7a 33       	cpi	r23, 0x3A	; 58
    50b6:	08 f0       	brcs	.+2      	; 0x50ba <__ftoa_engine+0x180>
    50b8:	70 e3       	ldi	r23, 0x30	; 48
    50ba:	7c 93       	st	X, r23
    50bc:	20 13       	cpse	r18, r16
    50be:	b8 f7       	brcc	.-18     	; 0x50ae <__ftoa_engine+0x174>
    50c0:	7e 91       	ld	r23, -X
    50c2:	70 61       	ori	r23, 0x10	; 16
    50c4:	7d 93       	st	X+, r23
    50c6:	30 f0       	brcs	.+12     	; 0x50d4 <__ftoa_engine+0x19a>
    50c8:	83 95       	inc	r24
    50ca:	71 e3       	ldi	r23, 0x31	; 49
    50cc:	7d 93       	st	X+, r23
    50ce:	70 e3       	ldi	r23, 0x30	; 48
    50d0:	2a 95       	dec	r18
    50d2:	e1 f7       	brne	.-8      	; 0x50cc <__ftoa_engine+0x192>
    50d4:	11 24       	eor	r1, r1
    50d6:	ef 90       	pop	r14
    50d8:	ff 90       	pop	r15
    50da:	0f 91       	pop	r16
    50dc:	1f 91       	pop	r17
    50de:	cf 91       	pop	r28
    50e0:	df 91       	pop	r29
    50e2:	99 27       	eor	r25, r25
    50e4:	87 fd       	sbrc	r24, 7
    50e6:	90 95       	com	r25
    50e8:	08 95       	ret

000050ea <_exit>:
    50ea:	f8 94       	cli

000050ec <__stop_program>:
    50ec:	ff cf       	rjmp	.-2      	; 0x50ec <__stop_program>
